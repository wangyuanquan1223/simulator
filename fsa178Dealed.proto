// Protocol Buffers Message Database
//
// FSA Version: 178
//
// Description:
//
// Date: 12/18/2024 0:00:00 AM
syntax = "proto2";
package  fsa;
option  go_package = "com.fsa";




//**********************
//Interface ID: 1 iDeviceInformation
//**********************

//Method 13 ClearDeserializationError
//--------------------------------------
message  ClearDeserializationError_request  {

}

//Method 14 ClearECURestetInfo
//--------------------------------------
message  ClearECURestetInfo_request  {

}

//Property 1 DeviceInfo
//--------------------------------------
message  DeviceInfo_status  {

  optional	 string	 CompanyName = 1 ;
  optional	 string	 ProductName = 2 ;
  optional	 string	 ProductPartNumber = 3 ;
  optional	 string	 ProductSerialNumber = 4 ;
  optional	 string	 ProductSoftwarePartNumber = 5 ;
  optional	 string	 XMLVersionNumber = 6 ;
}

//Property 2 AsBuiltInfo
//--------------------------------------
message  AsBuiltInfo_status  {

  optional	 string	 AsBuiltInfo = 1 ;
}

//Property 3 ReadDeserializationError
//--------------------------------------
message  ReadDeserializationError_status  {

  optional	 uint32	 DeserializationError = 1 ;
}

//Property 4 ReadECUResetInfo
//--------------------------------------
message  ReadECUResetInfo_status  {

  repeated	 eCUResetInfo	 ECUResetInfo = 1 ;
  optional	 uint32	 ECURestInfoCount = 2 ;
}

message  eCUResetInfo  {

  optional	 string	 Timestamp = 2 ;
  optional	 string	 Reason = 3 ;
}


//**********************
//Interface ID: 2 iDiscovery
//**********************

//Event 110 OfferService
//--------------------------------------
message  OfferService_event  {

  optional	 string	 IPAddress = 1 ;
  optional	 uint32	 Port = 2 ;
}

//Event 112 FindService
//--------------------------------------
//message  FindService_event  {
//
//No parameters, so GPB not necessary.
//}


//**********************
//Interface ID: 3 iNotification
//**********************

//Method 120 Subscribe
//--------------------------------------
message  Subscribe_request_response  {

  repeated	 uint32	 FunctionID = 1 ;
}

message  Subscribe_response  {

  repeated	 functionResults	 FunctionResults = 1 ;
}

//Method 121 RemoveSubscription
//--------------------------------------
message  RemoveSubscription_request_response  {

  repeated	 uint32	 FunctionID = 1 ;
}

message  RemoveSubscription_response  {

  repeated	 functionResults	 FunctionResults = 1 ;
}

message  functionResults  {

  optional	 uint32	 FunctionID = 1 ;
  optional	 bool	 Successful = 2 ;
}


//**********************
//Interface ID: 4 iStateOfHealth
//**********************

//Property 100 Heartbeat
//--------------------------------------
message  Heartbeat_status  {

  optional	 uint32	 Heartbeat = 1 ;
}

//Event 111 RemoveService
//--------------------------------------
//message  RemoveService_event  {
//
//No parameters, so GPB not necessary.
//}


//**********************
//Interface ID: 5 iCustomChimeDownload
//**********************

//Method 500 UpdateChimeTheme
//--------------------------------------
message  UpdateChimeTheme_request_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 string	 ChimeThemeVersion = 2 ;
  optional	 uint32	 ChimeEventCount = 3 ;
  optional	 int32	 ChimeThemeLevelOffset = 4 ;
  repeated	 chimeEventTable	 ChimeEventTable = 5 ;
}

message  UpdateChimeTheme_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 string	 ChimeThemeVersion = 2 ;
  optional	 uint32	 ChimeEventCount = 3 ;
}

//Method 503 ChangeCurrentChimeTheme
//--------------------------------------
message  ChangeCurrentChimeTheme_request_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
}

message  ChangeCurrentChimeTheme_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
}

//Method 504 InitiateChimeThemeUpdate
//--------------------------------------
message  InitiateChimeThemeUpdate_request_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 string	 ChimeThemeVersion = 2 ;
  optional	 uint32	 ChimeEventCount = 3 ;
  optional	 int32	 ChimeThemeLevelOffset = 4 ;
}

message  InitiateChimeThemeUpdate_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 string	 ChimeThemeVersion = 2 ;
}

//Method 505 UpdateChimeThemeEvent
//--------------------------------------
message  UpdateChimeThemeEvent_request_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 uint32	 CurrentEventCount = 2 ;
  optional	 uint32	 ChimeEventCount = 3 ;
  optional	 uint32	 ChimeEventID = 4 ;
  optional	 uint32	 ChimeEventCatagory = 5 ;
  optional	 uint32	 SeprationTime = 6 ;
  optional	 uint32	 ChimeEventRepetitionCount = 7 ;
  optional	 int32	 ChimeLevelOffset = 8 ;
  optional	 chimeEventSoundLocationType	 ChimeEventSoundLocation = 9 ;
  optional	 string	 AudioFileName = 10 ;
  optional	 string	 DecayAudioFileName = 11 ;
}

message  UpdateChimeThemeEvent_response  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 uint32	 CurrentEventCount = 2 ;
  optional	 uint32	 ChimeEventCount = 3 ;
}

//Property 502 CurrentChimeTheme
//--------------------------------------
message  CurrentChimeTheme_status  {

  optional	 chimeThemeType	 ChimeThemeID = 1[default = Theme_0];
  optional	 string	 ChimeThemeVersion = 2 ;
}

enum  chimeThemeType  {

  Theme_0 = 0 ;
  Theme_1 = 1 ;
}

enum  chimeEventSoundLocationType  {

  DRIVER_FRONT = 0 ;
  FULL_FRONT = 1 ;
  FULL_REAR = 2 ;
  FULL_LEFT = 3 ;
  FULL_RIGHT = 4 ;
  RIGHT_FRONT = 5 ;
  RIGHT_REAR = 6 ;
  LEFT_FRONT = 7 ;
  LEFT_REAR = 8 ;
}

message  chimeEventTable  {

  optional	 uint32	 ChimeEventID = 1 ;
  optional	 string	 ChimeEventName = 2 ;
  optional	 uint32	 ChimeEventCatagory = 3 ;
  optional	 uint32	 ConfigurableChimeProducerEventSeprationTime = 4 ;
  optional	 uint32	 ConfigurableChimeProducerChimeEventRepetitionCount = 5 ;
  optional	 int32	 ConfigurableChimeProducerEventLevelOffset = 6 ;
  optional	 chimeEventSoundLocationType	 ConfigurableChimeProducerChimeEventSoundLocation = 7 ;
  optional	 string	 ConfigurableChimeProducerEventAudioFileID = 8 ;
}


//**********************
//Interface ID: 6 iProgrammingMaster
//**********************

//Method 205 UpdateProgressBar
//--------------------------------------
message  UpdateProgressBar_request_response  {

  optional	 uint32	 CurrentFileProgress = 1 ;
  optional	 string	 TotalFileProgress = 2 ;
}

message  UpdateProgressBar_response  {

  optional	 bool	 Status = 1 ;
}

//Method 206 SendManifestFileProgrammingResult
//--------------------------------------
message  SendManifestFileProgrammingResult_request_response  {

  optional	 bool	 Status = 1 ;
  optional	 string	 FileName = 2 ;
}

message  SendManifestFileProgrammingResult_response  {

  optional	 bool	 Status = 1 ;
}

//Method 215 SwitchProgMode
//--------------------------------------
message  SwitchProgMode_request_response  {

  optional	 string	 FileName = 1 ;
}

message  SwitchProgMode_response  {

  optional	 progModeStatus	 ProgModeStatus = 1 ;
}

//Method 220 ClientError
//--------------------------------------
message  ClientError_request  {

  optional	 clientErrorMode	 ClientErrorMode = 1 ;
}

//Property 202 ProgMode
//--------------------------------------
message  ProgMode_status  {

  optional	 mode	 Mode = 1 ;
}

//Property 219 UserConsented
//--------------------------------------
message  UserConsented_status  {

  optional	 bool	 Consented = 1 ;
}

//Property 225 TransmissionShiftLock
//--------------------------------------
message  TransmissionShiftLock_status  {

  optional	 bool	 EngageShiftLock = 1 ;
}

//Property 231 USBFound
//--------------------------------------
message  USBFound_status  {

  optional	 bool	 ManFileAndStatusStream = 1 ;
}

//Event 201 ProgManifest
//--------------------------------------
message  ProgManifest_event  {

  optional	 deviceToBeProg	 DeviceToBeProg = 1 ;
  optional	 string	 ManifestVersion = 2 ;
  optional	 uint32	 FCID = 3 ;
  optional	 string	 ManifestFileName = 4 ;
  optional	 string	 IPAddress = 5 ;
  optional	 string	 Port = 6 ;
}

//Event 210 EndProgrammingSession
//--------------------------------------
//message  EndProgrammingSession_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 217 BeginProgrammingSession
//--------------------------------------
//message  BeginProgrammingSession_event  {
//
//No parameters, so GPB not necessary.
//}

enum  progModeStatus  {

  SWITCH_PROG_MODE_SUCCESS = 0 ;
  SWITCH_PROG_MODE_SUSPEND = 1 ;
  SWITCH_PROG_MODE_ABORT_NOT_AVAILABLE = 2 ;
  SWITCH_PROG_MODE_ABORT_MD_MISMATCH = 3 ;
  SWITCH_PROG_MODE_ABORT_OTHER = 4 ;
}

enum  clientErrorMode  {

  INVALID_FILE = 0 ;
  MD_MISMATCH = 1 ;
  LIC_MISMATCH = 2 ;
  FCID_MISMATCH = 3 ;
  FILE_UNAVAILABLE = 4 ;
  NO_CALIBRATION = 5 ;
  MNFFILE_DONTAPPLY = 6 ;
  WRITE_ERROR = 7 ;
  TIMEOUT_ERROR = 8 ;
  OTHER = 9 ;
}

enum  mode  {

  IDLE = 0 ;
  SUSPENDCOMM = 1 ;
  PROGRAMMING = 2 ;
}

enum  deviceToBeProg  {

  IPC = 1 ;
  RSI = 2 ;
  AMP = 3 ;
}


//**********************
//Interface ID: 7 iRemoteModuleHMI
//**********************

//Method 700 UploadAssets
//--------------------------------------
message  UploadAssets_request_response  {

  optional	 string	 AssetURL = 1 ;
}

message  UploadAssets_response  {

  optional	 methodResponseErrorType	 Error = 1 ;
  optional	 assetFileTypeType	 AssetFileType = 2 ;
  optional	 bytes	 AssetFile = 3 ;
}

//Method 706 RMIdentification
//--------------------------------------
message  RMIdentification_request_response  {

  optional	 string	 VariantID = 1 ;
}

message  RMIdentification_response  {

  optional	 methodResponseErrorType	 Error = 1 ;
  repeated	 extendedAssets	 ExtendedAssets = 2 ;
}

//Method 711 ListSlice
//--------------------------------------
message  ListSlice_request_response  {

  optional	 string	 ListID = 1 ;
  optional	 string	 UniqueID = 2 ;
  optional	 int32	 NumberRows = 3 ;
  optional	 uint32	 DisplayNumber = 4 ;
  optional	 string	 ViewID = 5 ;
  optional	 uint32	 UniqueIDNumeric = 6 ;
}

message  ListSlice_response  {

  optional	 methodResponseErrorType	 Error = 1 ;
  optional	 string	 ListID = 2 ;
  optional	 string	 VersionID = 3 ;
  repeated	 rowValuesType	 RowValues = 4 ;
}

//Method 712 ClientFocus
//--------------------------------------
message  ClientFocus_request_response  {

  repeated	 focusedWidget	 FocusedWidget = 1 ;
}

message  ClientFocus_response  {

  optional	 methodResponseErrorType	 Error = 1 ;
}

//Method 714 AssetsProcessed
//--------------------------------------
message  AssetsProcessed_request_response  {

  repeated	 extendedAssetsFile	 ExtendedAssetsFile = 1 ;
}

//Method 709 CallbackMethod
//--------------------------------------
message  CallbackMethod_request_response  {

  optional	 string	 ViewID = 1 ;
  optional	 string	 Callback = 2 ;
  optional	 string	 Identifier = 3 ;
  optional	 uint32	 IdentifierNumeric = 4 ;
}

//Method 703 OverlayResponse
//--------------------------------------
message  OverlayResponse_request_response  {

  optional	 string	 OverlayID = 1 ;
  optional	 overlayStatus	 OverlayStatus = 2 ;
}

//Property 705 ServerAppList
//--------------------------------------
message  ServerAppList_status  {

  repeated	 appListType	 ViewAppArray = 1 ;
}

//Event 701 OverlayRequest
//--------------------------------------
message  OverlayRequest_event  {

  optional	 string	 OverlayID = 1 ;
  optional	 priority	 Priority = 2[default = LOW];
  optional	 screenType	 Screen = 3 ;
}

//Event 702 ScreenRequest
//--------------------------------------
message  ScreenRequest_event  {

  optional	 string	 ID = 1 ;
  optional	 bool	 PersistenceFlag = 2 ;
  optional	 screenType	 Screen = 3 ;
}

//Event 704 OverlayCancelled
//--------------------------------------
message  OverlayCancelled_event  {

  optional	 string	 OverlayID = 1 ;
}

//Event 707 ImageWidgetDataUpdate
//--------------------------------------
message  ImageWidgetDataUpdate_event  {

  optional	 string	 ViewID = 1 ;
  repeated	 imageWidgetUpdateType	 ImageData = 2 ;
}

//Event 708 ProgressBarDataUpdate
//--------------------------------------
message  ProgressBarDataUpdate_event  {

  optional	 string	 ViewID = 1 ;
  repeated	 progressBarData	 ProgressBarData = 2 ;
}

//Event 713 ListContentChange
//--------------------------------------
message  ListContentChange_event  {

  optional	 string	 ListID = 1 ;
  optional	 string	 VersionID = 2 ;
  optional	 uint32	 TotalRows = 3 ;
  optional	 alphaDataType	 AlphaData = 4 ;
  optional	 string	 ViewID = 5 ;
}

//Event 715 LabelWidgetDataUpdate
//--------------------------------------
message  LabelWidgetDataUpdate_event  {

  optional	 string	 ViewID = 1 ;
  repeated	 labelData	 LabelData = 2 ;
}

//Event 720 ActivityIndicator
//--------------------------------------
message  ActivityIndicator_event  {

  optional	 string	 ViewID = 1 ;
  optional	 string	 WidgetID = 2 ;
  optional	 locationType	 Location = 3 ;
  optional	 sizeType	 Size = 4 ;
  optional	 string	 ActivityIndicatorURL = 5 ;
  optional	 uint32	 Alpha = 6 ;
  optional	 uint32	 ZOrder = 7 ;
}

//Event 721 StopActivityIndicator
//--------------------------------------
message  StopActivityIndicator_event  {

  optional	 string	 ViewID = 1 ;
  optional	 string	 WidgetID = 2 ;
}

//Event 722 GenericSWCEthernetFeedback
//--------------------------------------
message  GenericSWCEthernetFeedback_event  {

  repeated	 genericSWCInputMap	 GenericSWCInputMap = 1 ;
}

//Event 723 ListRowUpdate
//--------------------------------------
message  ListRowUpdate_event  {

  optional	 string	 ViewID = 1 ;
  optional	 string	 ListID = 2 ;
  repeated	 rowValuesUpdate	 RowValuesUpdate = 3 ;
}

//Event 724 MoveToTopOfList
//--------------------------------------
//message  MoveToTopOfList_event  {
//
//No parameters, so GPB not necessary.
//}

enum  errorCode  {

  ProtoBufSerError = 0 ;
  FileURLError = 1 ;
  RMVarNotRec = 2 ;
  ListIDNotRec = 3 ;
  RefWidgetNotRec = 4 ;
}

message  methodResponseErrorType  {

  optional	 bool	 Error = 1 ;
  optional	 errorCode	 ErrorCode = 2 ;
}

enum  assetFileTypeType  {

  png = 1 ;
  bmp = 2 ;
  jpeg = 6 ;
  zip = 7 ;
}

message  extendedAssets  {

  optional	 string	 UUID = 1 ;
  optional	 string	 URL = 2 ;
  optional	 uint32	 AssetFileSize = 3 ;
  optional	 uint32	 UUIDNumeric = 4 ;
}

message  imageElementDataType  {

  optional	 uint32	 ID = 1 ;
  optional	 string	 NormalURL = 2 ;
  optional	 string	 FocusURL = 3 ;
}

enum  encoding  {

  UTF8 = 0 ;
  UTF16 = 1 ;
  GB18030 = 2 ;
}

message  stringTranslationType  {

  optional	 encoding	 Encoding = 1 ;
  optional	 bytes	 Text = 2 ;
}

enum  decoration  {

  Normal = 0 ;
  Bold = 1 ;
  Italic = 2 ;
  Underlined = 3 ;
}

enum  textAlign  {

  Left = 0 ;
  Right = 1 ;
  Center = 2 ;
}

enum  textDirection  {

  LeftToRight = 0 ;
  RightToLeft = 1 ;
}

message  fontType  {

  optional	 string	 Name = 1 ;
  optional	 uint32	 Size = 2 ;
  optional	 decoration	 Decoration = 3 ;
  optional	 textAlign	 TextAlign = 4 ;
  optional	 string	 Color = 5 ;
  optional	 textDirection	 TextDirection = 6 ;
}

message  textElementDataType  {

  optional	 uint32	 ID = 1 ;
  optional	 stringTranslationType	 Value = 2 ;
  optional	 fontType	 Font = 3 ;
  optional	 fontType	 FocusFont = 4 ;
}

message  rowValuesType  {

  optional	 string	 UniqueID = 1 ;
  optional	 uint32	 DisplayNumber = 2 ;
  repeated	 imageElementDataType	 ImageElements = 4 ;
  repeated	 textElementDataType	 LabelElements = 5 ;
  optional	 uint32	 UniqueIDNumeric = 6 ;
}

message  tabOrderType  {

  optional	 uint32	 TabV = 1 ;
  optional	 uint32	 TabH = 2 ;
}

message  focusedWidget  {

  optional	 string	 ID = 1 ;
  optional	 tabOrderType	 FocusWidget = 2 ;
  optional	 uint32	 FocusRow = 3 ;
}

message  extendedAssetsFile  {

  optional	 string	 UUID = 1 ;
  optional	 bool	 Success = 2 ;
  optional	 uint32	 UUIDNumeric = 3 ;
}

enum  overlayStatus  {

  Rejected = 0 ;
  Queued = 1 ;
  Granted = 2 ;
  Displayed = 3 ;
  Removed = 4 ;
}

message  appsType  {

  optional	 stringTranslationType	 Name = 1 ;
  optional	 string	 IconNormal = 2 ;
  optional	 string	 IconFocused = 3 ;
  optional	 string	 IconUnavailable = 4 ;
  optional	 string	 LaunchCallback = 5 ;
  optional	 bool	 AvailableFlag = 6 ;
}

message  appListType  {

  optional	 string	 ID = 1 ;
  repeated	 appsType	 ViewItems = 2 ;
}

enum  priority  {

  HIGHEST = 0 ;
  IMMEDIATE = 1 ;
  HIGH = 2 ;
  MEDIUM = 3 ;
  LOW = 4 ;
  LOWEST = 5 ;
}

message  locationType  {

  optional	 int32	 LocationX = 1 ;
  optional	 int32	 LocationY = 2 ;
}

message  sizeType  {

  optional	 uint32	 SizeW = 1 ;
  optional	 uint32	 SizeH = 2 ;
}

enum  userInputType  {

  LeftEdge = 0 ;
  LeftPressed = 1 ;
  LeftShort = 2 ;
  LeftMedium = 3 ;
  LeftLong = 4 ;
  LeftReleased = 5 ;
  RightEdge = 6 ;
  RightPressed = 7 ;
  RightShort = 8 ;
  RightMedium = 9 ;
  RightLong = 10 ;
  RightReleased = 11 ;
  UpEdge = 12 ;
  UpPressed = 13 ;
  UpShort = 14 ;
  UpMedium = 15 ;
  UpLong = 16 ;
  UpReleased = 17 ;
  DownEdge = 18 ;
  DownPressed = 19 ;
  DownShort = 20 ;
  DownMedium = 21 ;
  DownLong = 22 ;
  DownReleased = 23 ;
  SelectEdge = 24 ;
  SelectPressed = 25 ;
  SelectShort = 26 ;
  SelectMedium = 27 ;
  SelectLong = 28 ;
  SelectReleased = 29 ;
  FavUpEdge = 30 ;
  FavUpPressed = 31 ;
  FavUpShort = 32 ;
  FavUpMedium = 33 ;
  FavUpLong = 34 ;
  FavUpReleased = 35 ;
  FavDownEdge = 36 ;
  FavDownPressed = 37 ;
  FavDownShort = 38 ;
  FavDownMedium = 39 ;
  FavDownLong = 40 ;
  FavDownReleased = 41 ;
  VolUpEdge = 42 ;
  VolUpPressed = 43 ;
  VolUpShort = 44 ;
  VolUpMedium = 45 ;
  VolUpLong = 46 ;
  VolUpReleased = 47 ;
  VolDownEdge = 48 ;
  VolDownPressed = 49 ;
  VolDownShort = 50 ;
  VolDownMedium = 51 ;
  VolDownLong = 52 ;
  VolDownRelesed = 53 ;
  SpeechPhoneEdge = 54 ;
  SpeechPhonePressed = 55 ;
  SpeechPhoneShort = 56 ;
  SpeechPhoneMedium = 57 ;
  SpeechPhoneLong = 58 ;
  SpeechPhoneReleased = 59 ;
  MuteHangupEdge = 60 ;
  MuteHangupPressed = 61 ;
  MuteHangupShort = 62 ;
  MuteHangupMedium = 63 ;
  MuteHangupLong = 64 ;
  MuteHangupReleased = 65 ;
  LeftExtraLong = 66 ;
  RightExtraLong = 67 ;
  UpExtraLong = 68 ;
  DownExtraLong = 69 ;
  SelectExtraLong = 70 ;
  FavUpExtraLong = 71 ;
  FavDownExtraLong = 72 ;
  VolUpExtraLong = 73 ;
  VolDownExtraLong = 74 ;
  SpeechPhoneExtraLong = 75 ;
  MuteHangupExtraLong = 76 ;
}

message  inputWidgetMapping  {

  optional	 userInputType	 UserInput = 1 ;
  optional	 string	 WidgetCallback = 2 ;
}

message  imageWidget  {

  optional	 string	 ID = 1 ;
  optional	 locationType	 Location = 2 ;
  optional	 sizeType	 Size = 3 ;
  optional	 tabOrderType	 TabOrder = 4 ;
  optional	 string	 NormalURL = 5 ;
  optional	 string	 FocusURL = 6 ;
  optional	 uint32	 Alpha = 7 ;
  repeated	 inputWidgetMapping	 InputWidgetMapping = 8 ;
  optional	 string	 OnFocusCallback = 10 ;
  optional	 int32	 ZOrder = 11 ;
}

enum  textWrapType  {

  Truncate = 0 ;
  TruncateEllipsis = 1 ;
  Scroll = 2 ;
  Paging = 3 ;
}

message  labelWidget  {

  optional	 string	 ID = 1 ;
  optional	 stringTranslationType	 Value = 2 ;
  optional	 fontType	 Font = 3 ;
  optional	 fontType	 FocusFont = 4 ;
  optional	 textWrapType	 TextWrap = 5 ;
  optional	 locationType	 Location = 6 ;
  optional	 sizeType	 Size = 7 ;
  optional	 tabOrderType	 TabOrder = 8 ;
  optional	 uint32	 Alpha = 9 ;
  repeated	 inputWidgetMapping	 InputWidgetMapping = 10 ;
  optional	 string	 OnFocusCallback = 12 ;
  optional	 int32	 ZOrder = 13 ;
}

message  imageElementDefType  {

  optional	 uint32	 ID = 1 ;
  optional	 locationType	 Location = 2 ;
  optional	 sizeType	 Size = 3 ;
}

message  textElementDefType  {

  optional	 uint32	 ID = 1 ;
  optional	 locationType	 Location = 2 ;
  optional	 sizeType	 Size = 3 ;
}

message  rowTemplateLayoutType  {

  repeated	 imageElementDefType	 ImageElements = 1 ;
  repeated	 textElementDefType	 TextElements = 2 ;
}

enum  widgetInputType  {

  NextItem = 0 ;
  PreviousItem = 1 ;
  AlphaUp = 2 ;
  AlphaDown = 3 ;
  AlphaEnd = 4 ;
  Callback = 5 ;
  FastScrollUp = 6 ;
  FastScrollDown = 7 ;
}

message  listInputWidgetMapping  {

  optional	 userInputType	 UserInput = 1 ;
  optional	 widgetInputType	 WidgetInput = 2 ;
  optional	 string	 EventCallbackString = 3 ;
}

message  letterIndexArray  {

  optional	 stringTranslationType	 Character = 1 ;
  optional	 uint32	 DisplayNumber = 2 ;
  optional	 string	 UniqueID = 3 ;
  optional	 uint32	 UniqueIDNumeric = 4 ;
}

message  alphaDataType  {

  optional	 string	 ImageURL = 1 ;
  optional	 locationType	 BackgroundPosition = 2 ;
  optional	 sizeType	 Size = 3 ;
  optional	 int32	 ZOrder = 4 ;
  repeated	 letterIndexArray	 LetterIndexArray = 5 ;
  optional	 fontType	 Font = 6 ;
  optional	 locationType	 CharacterPosition = 7 ;
}

message  listWidget  {

  optional	 string	 ListID = 1 ;
  optional	 locationType	 Location = 2 ;
  optional	 uint32	 FocusedRow = 3 ;
  optional	 sizeType	 RowSize = 4 ;
  optional	 string	 BackgroundURL = 5 ;
  optional	 string	 OnFocusURL = 6 ;
  optional	 locationType	 OnFocusURLLocation = 7 ;
  optional	 string	 OnFocusCallback = 8 ;
  optional	 uint32	 NumberDisplayedRows = 9 ;
  optional	 uint32	 RowSpacing = 10 ;
  optional	 rowTemplateLayoutType	 RowLayout = 11 ;
  optional	 int32	 ZOrder = 12 ;
  repeated	 listInputWidgetMapping	 ListInputWidgetMapping = 14 ;
  optional	 tabOrderType	 TabOrder = 15 ;
  optional	 uint32	 TotalRows = 16 ;
  optional	 alphaDataType	 AlphaData = 17 ;
  repeated	 rowValuesType	 InitialData = 18 ;
  optional	 sizeType	 OnFocusURLSize = 19 ;
}

enum  orientation  {

  HorizontalLefttoRight = 0 ;
  HorizontalRighttoLeft = 1 ;
  VerticalBottomtoTop = 2 ;
  VerticalToptoBottom = 3 ;
}

message  progressBarWidget  {

  optional	 string	 ID = 1 ;
  optional	 uint32	 Value = 2 ;
  optional	 locationType	 Location = 3 ;
  optional	 sizeType	 Size = 4 ;
  optional	 string	 ProgressBarURL = 6 ;
  optional	 tabOrderType	 TabOrder = 7 ;
  optional	 uint32	 Alpha = 8 ;
  repeated	 inputWidgetMapping	 InputWidgetMapping = 9 ;
  optional	 string	 OnFocusCallback = 11 ;
  optional	 int32	 ZOrder = 12 ;
  optional	 orientation	 Orientation = 13 ;
}

enum  focusInput  {

  FocusUp = 0 ;
  FocusDown = 1 ;
  FocusLeft = 2 ;
  FocusRight = 3 ;
  CallbackStr = 4 ;
}

message  screenInputPairsType  {

  optional	 userInputType	 UserInput = 1 ;
  optional	 focusInput	 FocusInput = 2 ;
  optional	 string	 FocusCallbackStr = 3 ;
}

enum  transitionType  {

  RMDefault = 0 ;
  FlyFromLeft = 1 ;
  FlyFromRight = 2 ;
  FlyFromBelow = 3 ;
  FlyFromAbove = 4 ;
  Appear = 5 ;
}

message  mapWidget  {

  optional	 locationType	 MapLocation = 1 ;
  optional	 int32	 ZOrder = 2 ;
  optional	 sizeType	 MapSize = 3 ;
}

message  screenType  {

  optional	 string	 ScreenID = 1 ;
  repeated	 imageWidget	 ImageWidget = 2 ;
  repeated	 labelWidget	 LabelWidget = 3 ;
  repeated	 listWidget	 ListWidget = 4 ;
  repeated	 progressBarWidget	 ProgressBarWidget = 5 ;
  repeated	 screenInputPairsType	 InputScreenMap = 6 ;
  optional	 transitionType	 Transition = 7 ;
  optional	 tabOrderType	 InitialFocus = 8 ;
  optional	 mapWidget	 MapWidget = 9 ;
  optional	 string	 OnFocus = 10 ;
  optional	 string	 OffFocus = 11 ;
}

message  alphaAnimationType  {

  optional	 uint32	 TargetAlpha = 1 ;
  optional	 uint32	 Time = 2 ;
}

message  translationAnimationType  {

  optional	 locationType	 TargetPosition = 2 ;
  optional	 uint32	 Time = 3 ;
}

message  imageWidgetUpdateType  {

  optional	 string	 ID = 1 ;
  optional	 string	 NormalURL = 2 ;
  optional	 string	 FocusURL = 3 ;
  optional	 locationType	 Location = 4 ;
  optional	 sizeType	 Size = 5 ;
  optional	 uint32	 Alpha = 6 ;
  optional	 alphaAnimationType	 AlphaAnimationData = 7 ;
  optional	 translationAnimationType	 TranslationAnimationData = 8 ;
}

message  progressBarData  {

  optional	 string	 ID = 1 ;
  optional	 uint32	 Value = 2 ;
  optional	 uint32	 Alpha = 3 ;
  optional	 alphaAnimationType	 AlphaAnimationData = 4 ;
  optional	 translationAnimationType	 TranslationAnimationData = 5 ;
}

message  labelData  {

  optional	 string	 ID = 1 ;
  optional	 stringTranslationType	 Value = 2 ;
  optional	 fontType	 Font = 3 ;
  optional	 locationType	 Location = 4 ;
  optional	 uint32	 Alpha = 5 ;
  optional	 alphaAnimationType	 AlphaAnimationData = 6 ;
  optional	 translationAnimationType	 TranslationAnimationData = 7 ;
}

enum  sWCUserInputType  {

  SWCFavUpEdge = 0 ;
  SWCFavUpPressed = 1 ;
  SWCFavUpShort = 2 ;
  SWCFavUpMedium = 3 ;
  SWCFavUpLong = 4 ;
  SWCFavUpReleased = 5 ;
  SWCFavDownEdge = 6 ;
  SWCFavDownPressed = 7 ;
  SWCFavDownShort = 8 ;
  SWCFavDownMedium = 9 ;
  SWCFavDownLong = 10 ;
  SWCFavDownReleased = 11 ;
  SWCVolUpEdge = 12 ;
  SWCVolUpPressed = 13 ;
  SWCVolUpShort = 14 ;
  SWCVolUpMedium = 15 ;
  SWCVolUpLong = 16 ;
  SWCVolUpReleased = 17 ;
  SWCVolDownEdge = 18 ;
  SWCVolDownPressed = 19 ;
  SWCVolDownShort = 20 ;
  SWCVolDownMedium = 21 ;
  SWCVolDownLong = 22 ;
  SWCVolDownRelesed = 23 ;
  SWCSpeechPhoneEdge = 24 ;
  SWCSpeechPhonePressed = 25 ;
  SWCSpeechPhoneShort = 26 ;
  SWCSpeechPhoneMedium = 27 ;
  SWCSpeechPhoneLong = 28 ;
  SWCSpeechPhoneReleased = 29 ;
  SWCMuteHangupEdge = 30 ;
  SWCMuteHangupPressed = 31 ;
  SWCMuteHangupShort = 32 ;
  SWCMuteHangupMedium = 33 ;
  SWCMuteHangupLong = 34 ;
  SWCMuteHangupReleased = 35 ;
  SWCFavUpExtraLong = 36 ;
  SWCFavDownExtraLong = 37 ;
  SWCVolUpExtraLong = 38 ;
  SWCVolDownExtraLong = 39 ;
  SWCSpeechPhoneExtraLong = 40 ;
  SWCMuteHangupExtraLong = 41 ;
  SWCUpEdge = 42 ;
  SWCUpPressed = 43 ;
  SWCUpShort = 44 ;
  SWCUpMedium = 45 ;
  SWCUpLong = 46 ;
  SWCUpReleased = 47 ;
  SWCUpExtraLong = 48 ;
  SWCSelectEdge = 49 ;
  SWCSelectPressed = 50 ;
  SWCSelectShort = 51 ;
  SWCSelectMedium = 52 ;
  SWCSelectLong = 53 ;
  SWCSelectReleased = 54 ;
  SWCSelectExtraLong = 55 ;
  SWCDownEdge = 56 ;
  SWCDownPressed = 57 ;
  SWCDownShort = 58 ;
  SWCDownMedium = 59 ;
  SWCDownLong = 60 ;
  SWCDownReleased = 61 ;
  SWCDownExtraLong = 62 ;
  SWCLeftEdge = 63 ;
  SWCLeftPressed = 64 ;
  SWCLeftShort = 65 ;
  SWCLeftMedium = 66 ;
  SWCLeftLong = 67 ;
  SWCLeftReleased = 68 ;
  SWCLeftExtraLong = 69 ;
  SWCRightEdge = 70 ;
  SWCRightPressed = 71 ;
  SWCRightShort = 72 ;
  SWCRightMedium = 73 ;
  SWCRightLong = 74 ;
  SWCRightReleased = 75 ;
  SWCRightExtraLong = 76 ;
}

message  genericSWCInputMap  {

  optional	 sWCUserInputType	 EthernetSWCInput = 1 ;
  optional	 string	 EthernetSWCCallbackStr = 2 ;
}

message  rowValuesUpdate  {

  optional	 rowValuesType	 ElementData = 1 ;
}


//**********************
//Interface ID: 8 iTBTState
//**********************

//Property 801 TBTStatus
//--------------------------------------
message  TBTStatus_status  {

  optional	 tBTStatus	 TBTStatus = 1[default = SessionIdle];
}

enum  tBTStatus  {

  SessionIdle = 0 ;
  RoutePlanning = 1 ;
  RouteGuidance = 2 ;
  OffRoute = 3 ;
  GuidancePaused = 4 ;
}


//**********************
//Interface ID: 9 iRouteGuidanceUserControl
//**********************

//Method 903 RepeatManeuverPrompt
//--------------------------------------
message  RepeatManeuverPrompt_response  {

  optional	 bool	 Repeat = 1[default = false];
}

//Method 904 CancelRouteGuidance
//--------------------------------------
message  CancelRouteGuidance_response  {

  optional	 bool	 Cancel = 1[default = false];
}

//Method 905 UpdateRoute
//--------------------------------------
message  UpdateRoute_response  {

  optional	 bool	 Update = 1[default = false];
}

//Method 906 IgnoreUpdate
//--------------------------------------
message  IgnoreUpdate_response  {

  optional	 bool	 Ignore = 1[default = false];
}

//Method 907 ContinueRoute
//--------------------------------------
message  ContinueRoute_response  {

  optional	 bool	 Continue = 1[default = false];
}

//Property 902 DirectionsMuteState
//--------------------------------------
message  DirectionsMuteState_set  {

  optional	 muteState	 MuteState = 1 ;
}

message  DirectionsMuteState_status  {

  optional	 muteState	 MuteState = 1[default = NotMuted];
}

enum  muteState  {

  NotMuted = 0 ;
  DirectionsMuted = 1 ;
  AllMuted = 2 ;
}


//**********************
//Interface ID: 10 iRouteGuidance
//**********************

//Property 1002 ManeuverDataUpdate
//--------------------------------------
message  ManeuverDataUpdate_status  {

  optional	 maneuverIconType	 ManeuverIcon = 1[default = NoManeuver];
  optional	 navDefaultStringTranslationType	 ManeuverStreetName = 2 ;
  optional	 uint32	 ManeuverDistance = 3[default = 4294967295];
  optional	 uint32	 ManeuverTime = 4[default = 4294967295];
  optional	 uint32	 DestinationDistance = 5[default = 4294967295];
  optional	 uint32	 RemainingTravelTime = 6[default = 4294967295];
  optional	 uint32	 DistanceBarFill = 7[default = 4294967295];
  optional	 distanceUnitsType	 DestinationDistanceUnits = 8[default = Meters];
  optional	 distanceUnitsType	 ManeuverDistanceUnits = 9[default = Meters];
  optional	 uint32	 EstimatedTimeOfArrival = 10[default = 4294967295];
  optional	 navDefaultStringTranslationType	 ExitNumber = 11 ;
  optional	 navDefaultStringTranslationType	 DirectionalLabel = 12 ;
}

//Property 1007 DestinationInfo
//--------------------------------------
message  DestinationInfo_status  {

  optional	 navDefaultStringTranslationType	 DestinationName = 1 ;
  optional	 navDefaultStringTranslationType	 DestinationAddress = 2 ;
}

//Event 1003 ManeuverPrompt
//--------------------------------------
message  ManeuverPrompt_event  {

  optional	 maneuverPriority	 ManeuverPriority = 1[default = NotUrgent];
}

//Event 1004 LocationError
//--------------------------------------
//message  LocationError_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 1005 GPSOk
//--------------------------------------
//message  GPSOk_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 1008 AtDestination
//--------------------------------------
//message  AtDestination_event  {
//
//No parameters, so GPB not necessary.
//}

enum  maneuverIconType  {

  NoManeuver = 1 ;
  ContinueStraight = 2 ;
  LeftTurn = 3 ;
  RightTurn = 4 ;
  SharpLeftTurn = 5 ;
  SharpRightTurn = 6 ;
  BearLeft = 7 ;
  BearRight = 8 ;
  MergeLeft = 9 ;
  MergeRight = 10 ;
  ExitLeft = 11 ;
  ExitRight = 12 ;
  UturnLeft = 13 ;
  UturnRight = 14 ;
  DestinationAhead = 15 ;
  AtDestination = 16 ;
  CounterClockwiseTrafficCircleUnknownExit = 17 ;
  CounterClockwiseTrafficCircle1stExit = 18 ;
  CounterClockwiseTrafficCircle2ndExit = 19 ;
  CounterClockwiseTrafficCircle3rdExit = 20 ;
  CounterClockwiseTrafficCircle4thExit = 21 ;
  CounterClockwiseTrafficCircle5thExit = 22 ;
  CounterClockwiseTrafficCircle6thExit = 23 ;
  CounterClockwiseTrafficCircle7thExit = 24 ;
  CounterClockwiseTrafficCircle8thExit = 25 ;
  ClockwiseTrafficCircleUnknownExit = 26 ;
  ClockwiseTrafficCircle1stExit = 27 ;
  ClockwiseTrafficCircle2ndExit = 28 ;
  ClockwiseTrafficCircle3rdExit = 29 ;
  ClockwiseTrafficCircle4thExit = 30 ;
  ClockwiseTrafficCircle5thExit = 31 ;
  ClockwiseTrafficCircle6thExit = 32 ;
  ClockwiseTrafficCircle7thExit = 33 ;
  ClockwiseTrafficCircle8thExit = 34 ;
  ZeroDegreeArrow = 35 ;
  FourtyFiveDegreeArrow = 36 ;
  NinetyDegreeArrow = 37 ;
  OneThirtyFiveDegreeArrow = 38 ;
  OneEightyDegreeArrow = 39 ;
  TwoTwentyFiveDegreeArrow = 40 ;
  TwoSeventyDegreeArrow = 41 ;
  ThreeFifteenDegreeArrow = 42 ;
  ReverseDirection = 43 ;
  SecondForkRight = 44 ;
  FirstForkRight = 45 ;
  SecondForkLeft = 46 ;
  FirstForkLeft = 47 ;
  FirstForkLeft4Options = 48 ;
  SecondForkLeft4Options = 49 ;
  FirstForkRight4Options = 50 ;
  SecondForkRight4Options = 51 ;
  Waypoint1 = 52 ;
  Waypoint2 = 53 ;
  Waypoint3 = 54 ;
  Waypoint4 = 55 ;
  Waypoint5 = 56 ;
  CCWTrafficCircle1stExit30Degree = 57 ;
  CCWTrafficCircle2ndtExit30Degree = 58 ;
  CCWTrafficCircle3rdExit30Degree = 59 ;
  CCWTrafficCircle4thExit30Degree = 60 ;
  CCWTrafficCircle5thExit30Degree = 61 ;
  CCWTrafficCircle6thExit30Degree = 62 ;
  CCWTrafficCircle7thExit30Degree = 63 ;
  CCWTrafficCircle8thExit30Degree = 64 ;
  CCWTrafficCircle9thExit30Degree = 65 ;
  CCWTrafficCircle10thExit30Degree = 66 ;
  CCWTrafficCircle11thExit30Degree = 67 ;
  CCWTrafficCircle12thExit30Degree = 68 ;
  CWTrafficCircle1stExit30Degree = 69 ;
  CWTrafficCircle2ndExit30Degree = 70 ;
  CWTrafficCircle3rdExit30Degree = 71 ;
  CWTrafficCircle4thExit30Degree = 72 ;
  CWTrafficCircle5thExit30Degree = 73 ;
  CWTrafficCircle6thExit30Degree = 74 ;
  CWTrafficCircle7thExit30Degree = 75 ;
  CWTrafficCircle8thExit30Degree = 76 ;
  CWTrafficCircle9thExit30Degree = 77 ;
  CWTrafficCircle10thExit30Degree = 78 ;
  CWTrafficCircle11thExit30Degree = 79 ;
  CWTrafficCircle12thExit30Degree = 80 ;
  Waypoint6 = 81 ;
  Waypoint7 = 82 ;
  Waypoint8 = 83 ;
  Waypoint9 = 84 ;
  Waypoint10 = 85 ;
  NoInfo = 86 ;
  DestinationAheadOnLeft = 87 ;
  DestinationAheadOnRight = 88 ;
  AtDestinationAheadOnLeft = 89 ;
  AtDestinationAheadOnRight = 90 ;
  TwentyTwoDegreeArrow = 91 ;
  SixtySevenDegreeArrow = 92 ;
  OneTwelveDegreeArrow = 93 ;
  OneFiftySevenDegreeArrow = 94 ;
  TwoHundredTwoDegreeArrow = 95 ;
  TwoFortySevenDegreeArrow = 96 ;
  TwoNinetyTwoDegreeArrow = 97 ;
  ThreeThirtySevenDegreeArrow = 98 ;
  CalculateRoute = 99 ;
  RecalculateRoute = 100 ;
  TwoForkLeft = 101 ;
  TwoForkRight = 102 ;
  ThreeForkLeft = 103 ;
  ThreeForkRight = 104 ;
  ThreeForkMiddle = 105 ;
  CCWTrafficCircleTwentyTwoDegrees = 106 ;
  CCWTrafficCircleSixtySevenDegrees = 107 ;
  CCWTrafficCircleOneTwelveDegrees = 108 ;
  CCWTrafficCircleOneThirtyFiveDegrees = 109 ;
  CCWTrafficCircleOneFiftySevenDegrees = 110 ;
  CCWTrafficCircleTwoHundredTwoDegrees = 111 ;
  CCWTrafficCircleTwoFortySevenDegrees = 112 ;
  CCWTrafficCircleTwoNinetyTwoDegrees = 113 ;
  CCWTrafficCircleThreeThirtySevenDegrees = 114 ;
  CWTrafficCircleTwentyTwoDegrees = 115 ;
  CWTrafficCircleSixtySevenDegrees = 116 ;
  CWTrafficCircleOneTwelveDegrees = 117 ;
  CWTrafficCircleOneThirtyFiveDegrees = 118 ;
  CWTrafficCircleOneFiftySevenDegrees = 119 ;
  CWTrafficCircleTwoHundredTwoDegrees = 120 ;
  CWTrafficCircleTwoFortySevenDegrees = 121 ;
  CWTrafficCircleTwoNinetyTwoDegrees = 122 ;
  CWTrafficCircleThreeThirtySevenDegrees = 123 ;
  PrepareTurnLeft = 124 ;
  PrepareTurnRight = 125 ;
  Arrow126 = 126 ;
  Arrow127 = 127 ;
  Arrow128 = 128 ;
  Arrow129 = 129 ;
  Arrow130 = 130 ;
  Arrow131 = 131 ;
  Arrow132 = 132 ;
  Arrow133 = 133 ;
  Arrow134 = 134 ;
  Arrow135 = 135 ;
  Arrow136 = 136 ;
  Arrow137 = 137 ;
  Arrow138 = 138 ;
  Arrow139 = 139 ;
  Arrow140 = 140 ;
  Arrow141 = 141 ;
  Arrow142 = 142 ;
  Arrow143 = 143 ;
  Arrow144 = 144 ;
  Arrow145 = 145 ;
  Arrow146 = 146 ;
  Arrow147 = 147 ;
  Arrow148 = 148 ;
  Arrow149 = 149 ;
  Arrow150 = 150 ;
  Arrow151 = 151 ;
  Arrow152 = 152 ;
  Arrow153 = 153 ;
  Arrow154 = 154 ;
  Arrow155 = 155 ;
  Arrow156 = 156 ;
  Arrow157 = 157 ;
  Arrow158 = 158 ;
  Arrow159 = 159 ;
  Arrow160 = 160 ;
  Arrow161 = 161 ;
  Arrow162 = 162 ;
  Arrow163 = 163 ;
  Arrow164 = 164 ;
  Arrow165 = 165 ;
  Arrow166 = 166 ;
  Arrow167 = 167 ;
  Arrow168 = 168 ;
  Arrow169 = 169 ;
  Arrow170 = 170 ;
  Arrow171 = 171 ;
  Arrow172 = 172 ;
  Arrow173 = 173 ;
  Arrow174 = 174 ;
  Arrow175 = 175 ;
  Arrow176 = 176 ;
  Arrow177 = 177 ;
  Arrow178 = 178 ;
  Arrow179 = 179 ;
  Arrow180 = 180 ;
  Arrow181 = 181 ;
  Arrow182 = 182 ;
  Arrow183 = 183 ;
  Arrow184 = 184 ;
  Arrow185 = 185 ;
  Arrow186 = 186 ;
  Arrow187 = 187 ;
  Arrow188 = 188 ;
  Arrow189 = 189 ;
  Arrow190 = 190 ;
  Arrow191 = 191 ;
  Arrow192 = 192 ;
  Arrow193 = 193 ;
  Arrow194 = 194 ;
  Arrow195 = 195 ;
  Arrow196 = 196 ;
  Arrow197 = 197 ;
  Arrow198 = 198 ;
  Arrow199 = 199 ;
  Arrow200 = 200 ;
  Arrow201 = 201 ;
  Arrow202 = 202 ;
  Arrow203 = 203 ;
  Arrow204 = 204 ;
  Arrow205 = 205 ;
  Arrow206 = 206 ;
  Arrow207 = 207 ;
  Arrow208 = 208 ;
  Arrow209 = 209 ;
  Arrow210 = 210 ;
  Arrow211 = 211 ;
  Arrow212 = 212 ;
  Arrow213 = 213 ;
  Arrow214 = 214 ;
  Arrow215 = 215 ;
  Arrow216 = 216 ;
  Arrow217 = 217 ;
  Arrow218 = 218 ;
  Arrow219 = 219 ;
  Arrow220 = 220 ;
  Arrow221 = 221 ;
  Arrow222 = 222 ;
  Arrow223 = 223 ;
  Arrow224 = 224 ;
  Arrow225 = 225 ;
  Arrow226 = 226 ;
  Arrow227 = 227 ;
  Arrow228 = 228 ;
  Arrow229 = 229 ;
  Arrow230 = 230 ;
  Arrow231 = 231 ;
  Arrow232 = 232 ;
  Arrow233 = 233 ;
  Arrow234 = 234 ;
  Arrow235 = 235 ;
  Arrow236 = 236 ;
  Arrow237 = 237 ;
  Arrow238 = 238 ;
  Arrow239 = 239 ;
  Arrow240 = 240 ;
  Arrow241 = 241 ;
  Arrow242 = 242 ;
  Arrow243 = 243 ;
  Arrow244 = 244 ;
  Arrow245 = 245 ;
  Arrow246 = 246 ;
  Arrow247 = 247 ;
  Arrow248 = 248 ;
  Arrow249 = 249 ;
  Arrow250 = 250 ;
  Arrow251 = 251 ;
  Arrow252 = 252 ;
  Arrow253 = 253 ;
  Arrow254 = 254 ;
  Arrow255 = 255 ;
  Arrow256 = 256 ;
  Arrow257 = 257 ;
  Arrow258 = 258 ;
  Arrow259 = 259 ;
  Arrow260 = 260 ;
  Arrow261 = 261 ;
  Arrow262 = 262 ;
  Arrow263 = 263 ;
  Arrow264 = 264 ;
  Arrow265 = 265 ;
  Arrow266 = 266 ;
  Arrow267 = 267 ;
  Arrow268 = 268 ;
  Arrow269 = 269 ;
  Arrow270 = 270 ;
  Arrow271 = 271 ;
  Arrow272 = 272 ;
  Arrow273 = 273 ;
  Arrow274 = 274 ;
  Arrow275 = 275 ;
  Arrow276 = 276 ;
  Arrow277 = 277 ;
  Arrow278 = 278 ;
  Arrow279 = 279 ;
  Arrow280 = 280 ;
  Arrow281 = 281 ;
  Arrow282 = 282 ;
  Arrow283 = 283 ;
  Arrow284 = 284 ;
  Arrow285 = 285 ;
  Arrow286 = 286 ;
  Arrow287 = 287 ;
  Arrow288 = 288 ;
  Arrow289 = 289 ;
  Arrow290 = 290 ;
  Arrow291 = 291 ;
  Arrow292 = 292 ;
  Arrow293 = 293 ;
  Arrow294 = 294 ;
  Arrow295 = 295 ;
  Arrow296 = 296 ;
  Arrow297 = 297 ;
  Arrow298 = 298 ;
  Arrow299 = 299 ;
  Arrow300 = 300 ;
  Arrow301 = 301 ;
  Arrow302 = 302 ;
  Arrow303 = 303 ;
  Arrow304 = 304 ;
  Arrow305 = 305 ;
  Arrow306 = 306 ;
  Arrow307 = 307 ;
  Arrow308 = 308 ;
  Arrow309 = 309 ;
  Arrow310 = 310 ;
  Arrow311 = 311 ;
  Arrow312 = 312 ;
  Arrow313 = 313 ;
  Arrow314 = 314 ;
  Arrow315 = 315 ;
  Arrow316 = 316 ;
  Arrow317 = 317 ;
  Arrow318 = 318 ;
  Arrow319 = 319 ;
  Arrow320 = 320 ;
  Arrow321 = 321 ;
  Arrow322 = 322 ;
  Arrow323 = 323 ;
  Arrow324 = 324 ;
  Arrow325 = 325 ;
  Arrow326 = 326 ;
  Arrow327 = 327 ;
  Arrow328 = 328 ;
  Arrow329 = 329 ;
  Arrow330 = 330 ;
  Arrow331 = 331 ;
  Arrow332 = 332 ;
  Arrow333 = 333 ;
  Arrow334 = 334 ;
  Arrow335 = 335 ;
  Arrow336 = 336 ;
  Arrow337 = 337 ;
  Arrow338 = 338 ;
  Arrow339 = 339 ;
  Arrow340 = 340 ;
  Arrow341 = 341 ;
  Arrow342 = 342 ;
  Arrow343 = 343 ;
  Arrow344 = 344 ;
  Arrow345 = 345 ;
  Arrow346 = 346 ;
  Arrow347 = 347 ;
  Arrow348 = 348 ;
  Arrow349 = 349 ;
  Arrow350 = 350 ;
  Arrow351 = 351 ;
  Arrow352 = 352 ;
  Arrow353 = 353 ;
  Arrow354 = 354 ;
  Arrow355 = 355 ;
  Arrow356 = 356 ;
  Arrow357 = 357 ;
  Arrow358 = 358 ;
  Arrow359 = 359 ;
  Arrow360 = 360 ;
  Arrow361 = 361 ;
  Arrow362 = 362 ;
  Arrow363 = 363 ;
  Arrow364 = 364 ;
  Arrow365 = 365 ;
  Arrow366 = 366 ;
  Arrow367 = 367 ;
  Arrow368 = 368 ;
  Arrow369 = 369 ;
  Arrow370 = 370 ;
  Arrow371 = 371 ;
  Arrow372 = 372 ;
  Arrow373 = 373 ;
  Arrow374 = 374 ;
  Arrow375 = 375 ;
  Arrow376 = 376 ;
  Arrow377 = 377 ;
  Arrow378 = 378 ;
  Arrow379 = 379 ;
  Arrow380 = 380 ;
  Arrow381 = 381 ;
  Arrow382 = 382 ;
  Arrow383 = 383 ;
  Arrow384 = 384 ;
  Arrow385 = 385 ;
  Arrow386 = 386 ;
  Arrow387 = 387 ;
  Arrow388 = 388 ;
  Arrow389 = 389 ;
  Arrow390 = 390 ;
  Arrow391 = 391 ;
  Arrow392 = 392 ;
  Arrow393 = 393 ;
  Arrow394 = 394 ;
  Arrow395 = 395 ;
  Arrow396 = 396 ;
  Arrow397 = 397 ;
  Arrow398 = 398 ;
  Arrow399 = 399 ;
  Arrow400 = 400 ;
  Arrow401 = 401 ;
  Arrow402 = 402 ;
  Arrow403 = 403 ;
  Arrow404 = 404 ;
  Arrow405 = 405 ;
  Arrow406 = 406 ;
  Arrow407 = 407 ;
  Arrow408 = 408 ;
  Arrow409 = 409 ;
  Arrow410 = 410 ;
  Arrow411 = 411 ;
  Arrow412 = 412 ;
  Arrow413 = 413 ;
  Arrow414 = 414 ;
  Arrow415 = 415 ;
  Arrow416 = 416 ;
  Arrow417 = 417 ;
  Arrow418 = 418 ;
  Arrow419 = 419 ;
  Arrow420 = 420 ;
  Arrow421 = 421 ;
  Arrow422 = 422 ;
  Arrow423 = 423 ;
  Arrow424 = 424 ;
  Arrow425 = 425 ;
  Arrow426 = 426 ;
  Arrow427 = 427 ;
  Arrow428 = 428 ;
  Arrow429 = 429 ;
  Arrow430 = 430 ;
  Arrow431 = 431 ;
  Arrow432 = 432 ;
  Arrow433 = 433 ;
  Arrow434 = 434 ;
  Arrow435 = 435 ;
  Arrow436 = 436 ;
  Arrow437 = 437 ;
  Arrow438 = 438 ;
  Arrow439 = 439 ;
  Arrow440 = 440 ;
  Arrow441 = 441 ;
  Arrow442 = 442 ;
  Arrow443 = 443 ;
  Arrow444 = 444 ;
  Arrow445 = 445 ;
  Arrow446 = 446 ;
  Arrow447 = 447 ;
  Arrow448 = 448 ;
  Arrow449 = 449 ;
  Arrow450 = 450 ;
  Arrow451 = 451 ;
  Arrow452 = 452 ;
  Arrow453 = 453 ;
  Arrow454 = 454 ;
  Arrow455 = 455 ;
  Arrow456 = 456 ;
  Arrow457 = 457 ;
  Arrow458 = 458 ;
  Arrow459 = 459 ;
  Arrow460 = 460 ;
  Arrow461 = 461 ;
  Arrow462 = 462 ;
  Arrow463 = 463 ;
  Arrow464 = 464 ;
  Arrow465 = 465 ;
  Arrow466 = 466 ;
  Arrow467 = 467 ;
  Arrow468 = 468 ;
  Arrow469 = 469 ;
  Arrow470 = 470 ;
  Arrow471 = 471 ;
  Arrow472 = 472 ;
  Arrow473 = 473 ;
  Arrow474 = 474 ;
  Arrow475 = 475 ;
  Arrow476 = 476 ;
  Arrow477 = 477 ;
  Arrow478 = 478 ;
  Arrow479 = 479 ;
  Arrow480 = 480 ;
  Arrow481 = 481 ;
  Arrow482 = 482 ;
  Arrow483 = 483 ;
  Arrow484 = 484 ;
  Arrow485 = 485 ;
  Arrow486 = 486 ;
  Arrow487 = 487 ;
  Arrow488 = 488 ;
  Arrow489 = 489 ;
  Arrow490 = 490 ;
  Arrow491 = 491 ;
  Arrow492 = 492 ;
  Arrow493 = 493 ;
  Arrow494 = 494 ;
  Arrow495 = 495 ;
  Arrow496 = 496 ;
  Arrow497 = 497 ;
  Arrow498 = 498 ;
  Arrow499 = 499 ;
  Arrow500 = 500 ;
}

enum  navEncoding  {

  utf8 = 0 ;
  utf16 = 1 ;
  gb18030 = 2 ;
}

message  navDefaultStringTranslationType  {

  optional	 navEncoding	 NavEncoding = 1[default = utf8];
  optional	 bytes	 NavText = 2[default = "44454641554C54"];
}

enum  distanceUnitsType  {

  Meters = 0 ;
  Kilometers = 1 ;
  Yards = 2 ;
  Feet = 3 ;
  Miles = 4 ;
}

enum  maneuverPriority  {

  NotUrgent = 0 ;
  Urgent = 1 ;
}


//**********************
//Interface ID: 11 iRoutePlanning
//**********************

//Method 1102 DestinationDetail
//--------------------------------------
message  DestinationDetail_request_response  {

  optional	 string	 DestinationID = 1 ;
}

message  DestinationDetail_response  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 navDefaultStringTranslationType	 DestinationName = 2 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetPrefix = 3 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetName = 4 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetType = 5 ;
  optional	 navDefaultStringTranslationType	 CrossStreetPrefix = 6 ;
  optional	 navDefaultStringTranslationType	 CrossStreetName = 7 ;
  optional	 navDefaultStringTranslationType	 CrossStreetType = 8 ;
  optional	 navDefaultStringTranslationType	 DestinationCityName = 9 ;
  optional	 navDefaultStringTranslationType	 DestinationStateProvince = 10 ;
  optional	 navDefaultStringTranslationType	 DestinationPostalCode = 11 ;
  optional	 navDefaultStringTranslationType	 DestinationCountry = 12 ;
  optional	 string	 DestinationPhoneNumber = 13[default = "DEFAULT"];
  optional	 uint32	 DestinationDistance = 14[default = 4294967295];
  optional	 uint32	 TimeToDestination = 15[default = 4294967295];
  optional	 distanceUnitsType	 DestinationDistanceUnits = 16[default = Meters];
  optional	 uint32	 EstimatedTimeOfArrival = 17[default = 4294967295];
}

//Method 1103 DestinationSelect
//--------------------------------------
message  DestinationSelect_request_response  {

  optional	 string	 DestinationID = 1 ;
}

message  DestinationSelect_response  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 bool	 DestinationSet = 2[default = false];
}

//Property 1101 DestinationList
//--------------------------------------
message  DestinationList_status  {

  optional	 bool	 SavedDestination = 1[default = false];
  optional	 bool	 RecentDestination = 2[default = false];
  optional	 string	 DestinationID = 4[default = "DEFAULT"];
  optional	 navDefaultStringTranslationType	 DestinationName = 5 ;
  optional	 uint32	 SavedDestinationIndex = 6 ;
  optional	 uint32	 RecentDestinationIndex = 7 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetPrefix = 8 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetName = 9 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetType = 10 ;
  optional	 navDefaultStringTranslationType	 CrossStreetPrefix = 11 ;
  optional	 navDefaultStringTranslationType	 CrossStreetName = 12 ;
  optional	 navDefaultStringTranslationType	 CrossStreetType = 13 ;
  optional	 navDefaultStringTranslationType	 DestinationCityName = 14 ;
  optional	 navDefaultStringTranslationType	 DestinationStateProvince = 15 ;
}

//Event 1104 RoutePlanningFailure
//--------------------------------------
message  RoutePlanningFailure_event  {

  optional	 uint32	 ReasonCode = 1[default = 255];
}


//**********************
//Interface ID: 12 iDestinationListManagement
//**********************

//Method 1201 SaveRouteDestination
//--------------------------------------
message  SaveRouteDestination_request_response  {

  optional	 string	 DestinationID = 1 ;
  optional	 bool	 DestinationIDFavorite = 2 ;
}

message  SaveRouteDestination_response  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 bool	 DestinationSaved = 2[default = false];
}

//Method 1202 DeleteRouteDestination
//--------------------------------------
message  DeleteRouteDestination_request_response  {

  optional	 string	 DestinationID = 1 ;
}

message  DeleteRouteDestination_response  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 bool	 DestinationDeleted = 2[default = false];
}

//Method 1203 ClearDestinationList
//--------------------------------------
message  ClearDestinationList_request_response  {

  optional	 bool	 SavedDestination = 1 ;
  optional	 bool	 RecentDestination = 2 ;
}

message  ClearDestinationList_response  {

  optional	 bool	 SavedDestinationCleared = 1[default = false];
  optional	 bool	 RecentDestinationCleared = 2[default = false];
}

//Method 1204 MoveSavedDestination
//--------------------------------------
message  MoveSavedDestination_request_response  {

  optional	 string	 UID1 = 1 ;
  optional	 string	 UID2 = 2 ;
}

message  MoveSavedDestination_response  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 bool	 DestinationMoved = 2[default = false];
}

//Method 1205 RenameSavedDestination
//--------------------------------------
message  RenameSavedDestination_request_response  {

  optional	 string	 UID_1 = 1 ;
  optional	 stringTranslationType	 DestinationLabel = 2 ;
}

message  RenameSavedDestination_response  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 bool	 DestinationRenamed = 2[default = false];
}


//**********************
//Interface ID: 13 iRoutePreview
//**********************

//Method 1302 ManeuverSelected
//--------------------------------------
message  ManeuverSelected_request_response  {

  optional	 string	 ManeuverID = 1 ;
}

message  ManeuverSelected_response  {

  optional	 string	 ManeuverID = 1[default = "DEFAULT"];
  optional	 bool	 Selected = 2[default = false];
}

//Property 1301 PreviewList
//--------------------------------------
message  PreviewList_status  {

  repeated	 previewListData	 PreviewListData = 1 ;
}

//Property 1303 PreviewManeuverDataUpdate
//--------------------------------------
message  PreviewManeuverDataUpdate_status  {

  optional	 string	 ManeuverID = 1[default = "DEFAULT"];
  optional	 uint32	 ManeuverDistance = 2[default = 4294967295];
  optional	 distanceUnitsType	 ManeuverDistanceUnits = 3[default = Meters];
  optional	 maneuverIconType	 ManeuverIcon = 4[default = NoManeuver];
  optional	 navDefaultStringTranslationType	 ManeuverStreetName = 5 ;
  optional	 uint32	 ManeuverTime = 6[default = 4294967295];
  optional	 navDefaultStringTranslationType	 ExitNumber = 7 ;
  optional	 navDefaultStringTranslationType	 DirectionalLabel = 8 ;
}

message  previewListData  {

  optional	 string	 ManeuverID = 1[default = "DEFAULT"];
  optional	 maneuverIconType	 ManeuverIcon = 2[default = NoManeuver];
  optional	 navDefaultStringTranslationType	 ManeuverStreetName = 3 ;
  optional	 uint32	 ManeuverDistance = 4[default = 4294967295];
  optional	 uint32	 ManeuverTime = 5[default = 4294967295];
  optional	 distanceUnitsType	 ManeuverDistanceUnits = 6[default = Meters];
  optional	 navDefaultStringTranslationType	 ExitNumber = 7 ;
  optional	 navDefaultStringTranslationType	 DirectionalLabel = 8 ;
}


//**********************
//Interface ID: 14 iOnStarControl
//**********************

//Method 1401 OnBoardDestination
//--------------------------------------
message  OnBoardDestination_request  {

  optional	 string	 DestinationID = 1 ;
  optional	 status	 Status = 2 ;
}

//Method 1402 OffBoardDestination
//--------------------------------------
message  OffBoardDestination_request  {

  optional	 string	 DestinationID = 1 ;
  optional	 status	 Status = 2 ;
  optional	 bool	 PositionValidTBT = 3 ;
  optional	 uint32	 EHPE = 4 ;
}

//Method 1409 GetSTID
//--------------------------------------
message  GetSTID_response  {

  optional	 string	 StationID = 1[default = "DEFAULT"];
}

//Method 1410 ExistingNavigationServices
//--------------------------------------
message  ExistingNavigationServices_request  {

  optional	 bool	 OnBoardNavigationAvailable = 1 ;
  optional	 bool	 OffBoardNavigationAvailable = 2 ;
}

//Event 1406 StartOnBoardNavigationSession
//--------------------------------------
message  StartOnBoardNavigationSession_event  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 navDefaultStringTranslationType	 DestinationName = 2 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetPrefix = 3 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetName = 4 ;
  optional	 navDefaultStringTranslationType	 DestinationStreetType = 5 ;
  optional	 navDefaultStringTranslationType	 CrossStreetPrefix = 6 ;
  optional	 navDefaultStringTranslationType	 CrossStreetName = 7 ;
  optional	 navDefaultStringTranslationType	 CrossStreetType = 8 ;
  optional	 navDefaultStringTranslationType	 DestinationCityName = 9 ;
  optional	 navDefaultStringTranslationType	 DestinationStateProvince = 10 ;
  optional	 navDefaultStringTranslationType	 DestinationPostalCode = 11 ;
  optional	 navDefaultStringTranslationType	 DestinationCountry = 12 ;
  optional	 string	 DestinationLongitude = 13[default = "DEFAULT"];
  optional	 string	 DestinationLatitude = 14[default = "DEFAULT"];
  optional	 string	 DestinationPhoneNumber = 15[default = "DEFAULT"];
  optional	 string	 DestinationAddressNumber = 16[default = "DEFAULT"];
}

//Event 1407 StartOffBoardNavigationSession
//--------------------------------------
message  StartOffBoardNavigationSession_event  {

  optional	 string	 DestinationID = 1[default = "DEFAULT"];
  optional	 string	 NavigationServerURI = 2[default = "DEFAULT"];
  optional	 uint32	 ServiceTimer = 3[default = 4294967295];
}

//Event 1408 CancelNavigation
//--------------------------------------
//message  CancelNavigation_event  {
//
//No parameters, so GPB not necessary.
//}

enum  status  {

  Fail = 0 ;
  Success = 1 ;
}


//**********************
//Interface ID: 16 iOnStarFunctions
//**********************

//Method 1622 SendTTYText
//--------------------------------------
message  SendTTYText_request_response  {

  optional	 tTYStringTranslationType	 SendTTYText = 1 ;
}

message  SendTTYText_response  {

  optional	 bool	 Success = 1 ;
}

//Method 1677 NeedLocationSharingEnabledResponse
//--------------------------------------
message  NeedLocationSharingEnabledResponse_request  {

  optional	 bool	 LocationSharingEnabledResponse = 1 ;
}

//Method 1678 DigitalMicrophoneHealthStatus
//--------------------------------------
message  DigitalMicrophoneHealthStatus_request  {

  optional	 uint32	 DigitalMicrophoneHealthStatusCounter = 1 ;
  optional	 bool	 DigitalMicrophoneHealthStatus = 2 ;
}

//Method 1679 LogUpload
//--------------------------------------
message  LogUpload_request_response  {

  optional	 uint32	 TCPProtocolCurrentVersion = 1 ;
  optional	 uint32	 JSONMethodType = 2 ;
  optional	 string	 UploadParameters = 3 ;
}

message  LogUpload_response  {

  optional	 bool	 LogUploadStatus = 1 ;
}

//Property 1613 CellularNetworkStatus
//--------------------------------------
message  CellularNetworkStatus_status  {

  optional	 stringTranslationType	 CellularNetworkNameText = 1 ;
  optional	 cellularNetworkSignalString	 CellularNetworkSignalString = 2[default = NO_SIGNAL];
  optional	 cellularNetworkState	 CellularNetworkState = 3[default = NO_NETWORK];
  optional	 cellularNetworkType	 CellularNetworkType = 4[default = NONE];
  optional	 bool	 CellularNetworkRoaming = 5 ;
  optional	 string	 MobileCountryCode = 6 ;
}

//Property 1632 TTYState
//--------------------------------------
message  TTYState_set  {

  optional	 bool	 TTYState = 1 ;
}

message  TTYState_status  {

  optional	 bool	 TTYStateStatus = 1 ;
}

//Property 1668 TTYMode
//--------------------------------------
message  TTYMode_set  {

  optional	 tTY_ModeType	 TTYFunctionalMode = 1 ;
}

message  TTYMode_status  {

  optional	 tTY_ModeType	 TTYModeStatus = 1 ;
}

//Property 1670 OnStarLocationMasking
//--------------------------------------
message  OnStarLocationMasking_set  {

  optional	 onStarLocationMaskingType	 OnStarLocationMaskingState = 1[default = UNMASK];
}

message  OnStarLocationMasking_status  {

  optional	 onStarLocationMaskingType	 OnStarLocationMaskingStatus = 1[default = UNMASK];
}

//Property 1673 OnStarCellNetStatus
//--------------------------------------
message  OnStarCellNetStatus_status  {

  optional	 string	 MyNumber = 1 ;
  optional	 string	 OnStarMinutesRemaining = 2 ;
  optional	 string	 OnStarMinutesUsed = 3 ;
  optional	 string	 OnStarMinutesExpiration = 4 ;
  optional	 string	 OnStarDataRemaining = 5 ;
  optional	 string	 OnStarDataUsed = 6 ;
  optional	 string	 OnStarDataExpiration = 7 ;
}

//Property 1674 OnStarData
//--------------------------------------
message  OnStarData_status  {

  optional	 uint32	 Size = 1 ;
  optional	 bytes	 Data = 2 ;
}

//Property 1675 DataConfiguration
//--------------------------------------
message  DataConfiguration_set  {

  optional	 bool	 DataServicesConfig = 1 ;
  optional	 bool	 DataRoamingConfig = 2 ;
}

message  DataConfiguration_status  {

  optional	 bool	 DataServicesConfig = 1 ;
  optional	 bool	 DataRoamingConfig = 2 ;
}

//Property 1680 UploadState
//--------------------------------------
message  UploadState_status  {

  optional	 uint32	 TCPProtocolCurrentVersion = 1 ;
  optional	 string	 TCPStatus = 2 ;
}

//Event 1630 OnStarMessage
//--------------------------------------
message  OnStarMessage_event  {

  optional	 stringTranslationType	 AudioMessageText = 1 ;
  optional	 uint32	 SuggestedDuration = 2 ;
}

//Event 1640 TTYReceiveText
//--------------------------------------
message  TTYReceiveText_event  {

  optional	 tTYStringTranslationType	 TTYReceiveText = 1 ;
}

//Event 1646 OnStarLocationShared
//--------------------------------------
//message  OnStarLocationShared_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 1659 NumberRecall
//--------------------------------------
message  NumberRecall_event  {

  optional	 string	 NumberRecall = 1 ;
}

//Event 1672 InfotainmentPushNotification
//--------------------------------------
message  InfotainmentPushNotification_event  {

  optional	 bytes	 InfotainmentPushNotificationURL = 1 ;
}

//Event 1676 NeedLocationSharingEnabled
//--------------------------------------
//message  NeedLocationSharingEnabled_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 1681 UploadStatus
//--------------------------------------
message  UploadStatus_event  {

  optional	 uint32	 TCPProtocolCurrentVersion = 1 ;
  optional	 uint32	 JSONEventType = 2 ;
  optional	 string	 UploadEvent = 3 ;
}

//Event 1682 InVehicleDisplay
//--------------------------------------
message  InVehicleDisplay_event  {

  optional	 displayID	 DisplayID = 1 ;
  optional	 displayArea	 DisplayArea = 2 ;
}

message  tTYStringTranslationType  {

  optional	 encoding	 Encoding = 1 ;
  optional	 bytes	 Text = 2 ;
}

enum  cellularNetworkSignalString  {

  NO_SIGNAL = 0 ;
  LEVEL_1 = 1 ;
  LEVEL_2 = 2 ;
  LEVEL_3 = 3 ;
  LEVEL_4 = 4 ;
  LEVEL_5 = 5 ;
}

enum  cellularNetworkState  {

  REGISTERED = 0 ;
  NO_NETWORK = 1 ;
  AUTO_SEARCHING = 2 ;
  EMERGENCY_CALL_ONLY = 3 ;
}

enum  cellularNetworkType  {

  NONE = 0 ;
  GSM = 1 ;
  GPRS = 2 ;
  EDGE = 3 ;
  EDVO = 4 ;
  ONExRTT = 5 ;
  WCDMA = 6 ;
  LTE = 7 ;
  WCDMA_EXCEPTR99 = 8 ;
  LTE_4G = 9 ;
  LTE_ONLY = 10 ;
  FIVEG = 11 ;
  FIVEG_PLUS = 12 ;
  FIVEG_UWB = 13 ;
  FIVEG_E = 14 ;
}

enum  tTY_ModeType  {

  HEARING_MODE = 0 ;
  TTY_MODE = 1 ;
}

enum  onStarLocationMaskingType  {

  UNMASK = 0 ;
  MASK = 1 ;
}

enum  displayID  {

  DisplayID_NONE = 0 ;
  DisplayID_EMERGENCY_ONEWAYAUDIO = 1 ;
}

enum  displayArea  {

  DisplayArea_NONE = 0 ;
  DisplayArea_CENTERSTACK = 1 ;
}


//**********************
//Interface ID: 17 iWifiSettings
//**********************


//**********************
//Interface ID: 18 iVehicleSettings
//**********************


//**********************
//Interface ID: 19 iRemoteReflash
//**********************

//Method 1903 NotifyRRUpdateStatus
//--------------------------------------
message  NotifyRRUpdateStatus_request  {

  optional	 remoteReflashUpdateState	 RemoteReflashUpdateState = 1 ;
}

//Event 1904 RequestOMADMSession
//--------------------------------------
message  RequestOMADMSession_event  {

  optional	 string	 OMADMSessionURL = 1 ;
}

enum  remoteReflashUpdateState  {

  RR_IDLE = 0 ;
  RR_INPROGRESS = 1 ;
  RR_COMPLETE = 2 ;
}


//**********************
//Interface ID: 20 iPromptPlay
//**********************


//**********************
//Interface ID: 21 iDataPort
//**********************


//**********************
//Interface ID: 22 iOnStarPhone
//**********************

//Method 2201 AcceptIncomingCall
//--------------------------------------
message  AcceptIncomingCall_request_response  {

  optional	 endCallType	 EndCallType = 1 ;
}

message  AcceptIncomingCall_response  {

  optional	 bool	 Success = 1 ;
}

//Method 2202 DeclineIncomingCall
//--------------------------------------
message  DeclineIncomingCall_request_response  {

  optional	 endCallType	 EndCallType = 1 ;
}

message  DeclineIncomingCall_response  {

  optional	 bool	 Success = 1 ;
}

//Method 2203 DialOPC
//--------------------------------------
message  DialOPC_request_response  {

  optional	 string	 DialString = 1 ;
}

message  DialOPC_response  {

  optional	 bool	 Success = 1 ;
}

//Method 2204 EndCall
//--------------------------------------
message  EndCall_request_response  {

  optional	 callSessionTypesType	 EndCallType = 1 ;
}

message  EndCall_response  {

  optional	 bool	 Success = 1 ;
}

//Method 2205 SendDTMF
//--------------------------------------
message  SendDTMF_request  {

  optional	 string	 SendDTMFText = 1 ;
}

//Method 2221 CallOnStarAdvisor
//--------------------------------------
message  CallOnStarAdvisor_request_response  {

  optional	 uint32	 ReasonCode = 1 ;
}

message  CallOnStarAdvisor_response  {

  optional	 bool	 Success = 1 ;
}

//Method 2268 InitiateEmergencyRequest
//--------------------------------------
message  InitiateEmergencyRequest_request_response  {

  optional	 uint32	 EmerReqReasonCode = 1 ;
}

message  InitiateEmergencyRequest_response  {

  optional	 bool	 Success = 1 ;
}

//Property 2206 CallState
//--------------------------------------
message  CallState_status  {

  optional	 callState	 CallState = 1[default = CS_IDLE];
}

//Property 2271 CallSession
//--------------------------------------
message  CallSession_status  {

  optional	 callSessionTypesType	 CS_CallSessionType = 1 ;
}

//Property 2273 CanEndEmergencyCall
//--------------------------------------
message  CanEndEmergencyCall_status  {

  optional	 bool	 CallCanBeEnded = 1[default = true];
}

//Event 2233 OnStarButtonPressed
//--------------------------------------
message  OnStarButtonPressed_event  {

  optional	 buttonType	 ButtonType = 1 ;
  optional	 pressType	 PressType = 2 ;
  optional	 advisorButtonStatus	 AdvisorButtonStatus = 3 ;
  optional	 emergencyButtonStatus	 EmergencyButtonStatus = 4 ;
}

//Event 2269 CallSessionStarted
//--------------------------------------
message  CallSessionStarted_event  {

  optional	 callSessionTypesType	 CallSessionType = 1 ;
}

//Event 2270 CallSessionEnded
//--------------------------------------
message  CallSessionEnded_event  {

  optional	 callSessionTypesType	 CallSessionType = 1 ;
  optional	 reason	 Reason = 2 ;
}

//Event 2272 CallNumber
//--------------------------------------
message  CallNumber_event  {

  optional	 string	 NumberText = 1 ;
}

//Event 2274 EscalationReboot
//--------------------------------------
//message  EscalationReboot_event  {
//
//No parameters, so GPB not necessary.
//}

enum  endCallType  {

  OnStarPersonalCall = 0 ;
  AdvisorCall = 1 ;
  EmergencyCall = 2 ;
}

enum  callSessionTypesType  {

  CS_Inactive = 0 ;
  CS_OutgoingAdvisor = 1 ;
  CS_IncomingAdvisor = 2 ;
  CS_OutgoingEmergency = 3 ;
  CS_IncomingEmergency = 4 ;
  CS_OutgoingOPC = 5 ;
  CS_IncomingOPC = 6 ;
  CS_OutgoingACN = 7 ;
  CS_IncomingStealth = 8 ;
  CS_OutgoingECallEmergency = 9 ;
  CS_OutgoingECallAACN = 10 ;
  CS_Supercruise = 11 ;
  CS_IncomingIVVM = 12 ;
  CS_OutgoingHVEmergency = 13 ;
}

enum  callState  {

  CS_IDLE = 0 ;
  CS_ACTIVE = 1 ;
  CS_DIALING = 2 ;
  CS_RINGING = 3 ;
}

enum  buttonType  {

  BT_none = 0 ;
  BT_emergency = 1 ;
  BT_advisor = 2 ;
  BT_white = 3 ;
}

enum  pressType  {

  PT_none = 0 ;
  PT_pressRelease = 1 ;
  PT_pressHold = 2 ;
  PT_stuck = 3 ;
}

enum  advisorButtonStatus  {

  ABS_noCall = 0 ;
  ABS_dataCall = 1 ;
  ABS_demoCall = 2 ;
}

enum  emergencyButtonStatus  {

  EBS_noCall = 0 ;
  EBS_dataCall = 1 ;
  EBS_eCall = 2 ;
}

enum  reason  {

  CS_Normal = 0 ;
  Hangup = 1 ;
  NetworkFailure = 2 ;
  FeaturePrecendence = 3 ;
  PowerState = 4 ;
  MinutesUnavailable = 5 ;
  InvalidRequest = 6 ;
  ResourceLoss = 7 ;
  TCPInternalError = 8 ;
  GeneralFailure = 9 ;
  PermanentFailure = 10 ;
  Transfer = 11 ;
  CS_Rejected = 12 ;
}


//**********************
//Interface ID: 23 iEmergency
//**********************


//**********************
//Interface ID: 24 iRemoteConfig
//**********************

//Method 2403 SendWifiHotSpotConfiguration
//--------------------------------------
message  SendWifiHotSpotConfiguration_request  {

  optional	 string	 SSID = 1 ;
  optional	 string	 PassPhrase = 2 ;
  optional	 encryption	 Encryption = 3 ;
  optional	 securityType	 SecurityType = 4 ;
  optional	 wifiHotSpotStateType	 WifiHotSpotState = 5 ;
  optional	 bool	 WiFiModule = 6 ;
  optional	 uint32	 NumberOfWiFiDevices = 7 ;
  optional	 hotSpotLocationType	 HotSpotLocation = 8 ;
}

//Method 2406 SendAvailableVehicleLanguages
//--------------------------------------
message  SendAvailableVehicleLanguages_request  {

  repeated	 vehicleLanguage	 LanguageTypeList = 1 ;
}


message vehicleLanguage  {

  optional	 vehicleLanguageType	 LanguageList = 1 ;
}

//Method 2409 EraseUserInfo
//--------------------------------------
message  EraseUserInfo_response  {

  optional	 bool	 Success = 1 ;
}

//Event 2401 SetWifiHotspotConfig
//--------------------------------------
message  SetWifiHotspotConfig_event  {

  optional	 string	 SSID = 1 ;
  optional	 string	 PassPhrase = 2 ;
  optional	 encryption	 Encryption = 3 ;
  optional	 securityType	 SecurityType = 4 ;
  optional	 wifiHotSpotStateType	 WifiHotSpotState = 5 ;
  optional	 bool	 WiFiModule = 6 ;
  optional	 hotSpotLocationType	 HotSpotLocation = 7 ;
}

//Event 2402 GetWifiHotspotConfig
//--------------------------------------
message  GetWifiHotspotConfig_event  {

  optional	 uint32	 NumberOfWiFiDevices = 2 ;
}

//Event 2404 RequestAvailableLanguages
//--------------------------------------
//message  RequestAvailableLanguages_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 2405 RequestLanguageChange
//--------------------------------------
message  RequestLanguageChange_event  {

  optional	 vehicleLanguageType	 LanguageSetting = 1 ;
}

//Event 2408 RequestEraseUserInfo
//--------------------------------------
//message  RequestEraseUserInfo_event  {
//
//No parameters, so GPB not necessary.
//}

enum  encryption  {

  OpenEncryption = 0 ;
  AES = 1 ;
  TKIP = 2 ;
  AESorTKIP = 3 ;
}

enum  securityType  {

  Open = 0 ;
  WEP = 1 ;
  WPA = 2 ;
  WPA2 = 3 ;
  IEEE802_1X = 4 ;
}

enum  wifiHotSpotStateType  {

  DISABLE = 0 ;
  ENABLE = 1 ;
}

enum  hotSpotLocationType  {

  HotSpotLocation_NONE = 0 ;
  HotSpotLocation_HOME = 1 ;
  HotSpotLocation_INVEHICLE = 2 ;
  HotSpotLocation_OTHER = 3 ;
}

enum  vehicleLanguageType  {

  NA_English = 0 ;
  German = 1 ;
  Italian = 2 ;
  Swedish = 3 ;
  French = 4 ;
  Spanish = 5 ;
  Dutch = 6 ;
  Portuguese = 7 ;
  Norwegian = 8 ;
  Finnish = 9 ;
  Danish = 10 ;
  Greek = 11 ;
  Japanese = 12 ;
  Arabic = 13 ;
  Standard_Chinese = 14 ;
  Polish = 15 ;
  Turkish = 16 ;
  Korean = 17 ;
  Traditional_Chinese = 18 ;
  UK_English = 19 ;
  Hungarian = 20 ;
  Czech = 21 ;
  Slovak = 22 ;
  Russian = 23 ;
  Brazilian_Portuguese = 24 ;
  Thai = 25 ;
  Bulgarian = 26 ;
  Romanian = 27 ;
  Slovenian = 28 ;
  Croatian = 29 ;
  Ukrainian = 30 ;
  NA_French = 31 ;
  NA_Spanish = 32 ;
  Cantonese = 33 ;
  Uzbek = 34 ;
  Serbian = 35 ;
  Lithuanian = 36 ;
  Estonian = 37 ;
  Latvian = 38 ;
  Macedonian = 39 ;
  AU_English = 40 ;
  ZA_English = 41 ;
  Hebrew = 42 ;
  LA_Spanish = 48 ;
}


//**********************
//Interface ID: 25 iRemoteReflashUI
//**********************

//Method 2501 RRNotifyUserDownload
//--------------------------------------
message  RRNotifyUserDownload_request_response  {

  optional	 userDownloadSelection	 UserDownloadSelection = 1 ;
}

message  RRNotifyUserDownload_response  {

  optional	 bool	 UserDownloadValidRequest = 1 ;
}

//Method 2502 RRNotifyUserUpdate
//--------------------------------------
message  RRNotifyUserUpdate_request_response  {

  optional	 userUpdateSelection	 UserUpdateSelection = 1 ;
}

message  RRNotifyUserUpdate_response  {

  optional	 bool	 UserUpdateValidRequest = 1 ;
}

//Method 2503 RRReadDMTreeData
//--------------------------------------
message  RRReadDMTreeData_request_response  {

  optional	 string	 NodeReference = 1 ;
}

message  RRReadDMTreeData_response  {

  optional	 bytes	 NodeData = 1 ;
}

//Method 2504 RRUpdateVehicleState
//--------------------------------------
message  RRUpdateVehicleState_request_response  {

  optional	 oMDAGenericAlertEnum	 OMDAGenericAlertEnum = 2 ;
}

message  RRUpdateVehicleState_response  {

  optional	 bool	 ValidOMDAGenericAlert = 1 ;
}

//Method 2511 MADAITimer
//--------------------------------------
message  MADAITimer_request_response  {

  optional	 mADAITimerStatus	 MADAITimerStatus = 1 ;
}

message  MADAITimer_response  {

  optional	 bool	 MADAITimerStatusRequest = 1 ;
}

//Method 2512 RRNotifyCheckForUpdates
//--------------------------------------
message  RRNotifyCheckForUpdates_response  {

  optional	 notifyCheckNotifyStatus	 NotifyCheckNotifyStatus = 1 ;
}

//Method 2513 RRWiFiNetworkSelected
//--------------------------------------
message  RRWiFiNetworkSelected_request_response  {

  optional	 bool	 RRWiFiNetworkSelected = 1 ;
}

message  RRWiFiNetworkSelected_response  {

  optional	 bool	 RRWiFiNetworkSelectedStatusRequest = 1 ;
}

//Property 2505 DisplayDL
//--------------------------------------
message  DisplayDL_status  {

  optional	 dD_Progress	 DD_Progress = 1 ;
  optional	 int32	 EstimatedTimeRemaining = 2 ;
  optional	 int32	 PercentageComplete = 3 ;
}

//Property 2508 DisplayUpdate
//--------------------------------------
message  DisplayUpdate_status  {

  optional	 dU_Progress	 DU_Progress = 1 ;
  optional	 uint32	 DU_PercentageComplete = 2 ;
}

//Event 2506 DisplayDLAvailable
//--------------------------------------
message  DisplayDLAvailable_event  {

  optional	 string	 DownloadDMTree = 1 ;
}

//Event 2507 DisplayUpdateAvailable
//--------------------------------------
message  DisplayUpdateAvailable_event  {

  optional	 string	 UpdateDMTree = 1 ;
}

//Event 2509 GetMADAIStatus
//--------------------------------------
//message  GetMADAIStatus_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 2510 DisplayCancelScreen
//--------------------------------------
//message  DisplayCancelScreen_event  {
//
//No parameters, so GPB not necessary.
//}

enum  userDownloadSelection  {

  StartDownload = 0 ;
  PauseDownload = 1 ;
  ResumeDownload = 2 ;
  DeclineDownload = 3 ;
  CancelDownload = 4 ;
  Ignore = 5 ;
  BatteryInsufficient = 6 ;
  InvalidUpdateConfig = 7 ;
  DMTreeReadFailure = 8 ;
}

enum  userUpdateSelection  {

  UUS_InstallUpdate = 0 ;
  UUS_DeclineUpdate = 1 ;
  UUS_Ignore = 2 ;
  UUS_BattInsufficient = 3 ;
  UUS_NotParked = 4 ;
  UUS_ParkingBrakeNotSet = 5 ;
  UUS_EngineRunActive = 6 ;
  UUS_KeyNotOut = 7 ;
  UUS_HighVoltageCharger = 8 ;
  UUS_RemoteStart = 9 ;
  UUS_IncorrectPowermode = 10 ;
  UUS_OperationArborted = 11 ;
  UUS_InitialInstallUpdate = 12 ;
  UUS_NoNetwork = 13 ;
  UUS_FailedSeedRequest = 14 ;
  UUS_FailedKeyRequest = 15 ;
  UUS_FailedSecurityUnlock = 16 ;
  UUS_DelayModuleReflash = 17 ;
  UUS_FailedProgrammingState = 18 ;
  UUS_FailedUpdateVerification = 19 ;
  UUS_CCBattInsufficient = 20 ;
  UUS_CCNotParked = 21 ;
  UUS_CCParkingBrakeNotSet = 22 ;
  UUS_CCEngineRunActive = 23 ;
  UUS_CCIncorrectPowermode = 24 ;
  UUS_CCKeyNotOut = 25 ;
  UUS_CCDelayCondition = 26 ;
  UUS_ScheduledUpdate = 27 ;
  UUS_CancelScheduledUpdate = 28 ;
  UUS_CCUserCancel = 29 ;
  UUS_CountdownStart = 30 ;
  UUS_CountdownAbort = 31 ;
  UUS_InvalidUpdateConfig = 32 ;
  UUS_DMTreeReadFailure = 33 ;
}

enum  oMDAGenericAlertEnum  {

  ALERT_INSUFFICIENT_SOC = 471 ;
  ALERT_VEHICLE_NOT_PARKED = 467 ;
  ALERT_SYSTEM_POWER_MODE = 465 ;
  ALERT_KEY_IN_IGNITION = 498 ;
  ALERT_PARKING_BRAKE_NOT_SET = 499 ;
  ALERT_HIGH_VOLT_CHARGER_STATUS = 492 ;
  ALERT_REMOTE_START = 485 ;
  ALERT_ENGINE_RUN_ACTIVE = 466 ;
}

enum  mADAITimerStatus  {

  MADAITimerStarted = 0 ;
  MADAITimerExpired = 1 ;
  MADAITimerNotStarted = 2 ;
}

enum  notifyCheckNotifyStatus  {

  RR_NoUpdateAvailable = 0 ;
  RR_UpdateAvailable = 1 ;
}

enum  dD_Progress  {

  DD_IDLE = 0 ;
  DD_NetworkWait = 1 ;
  DD_RUNNING = 2 ;
  DD_RetryWait = 3 ;
  DD_SUSPENDED = 4 ;
  DD_FAIL = 5 ;
  DD_COMPLETE = 6 ;
  DD_CANCELLED = 7 ;
  DD_CHUNK_DELAY = 8 ;
  DD_WiFiWait = 9 ;
}

enum  dU_Progress  {

  DU_IDLE = 0 ;
  DU_RunningInternal = 1 ;
  DU_SUCCESSFUL = 2 ;
  DU_InvalidFile = 3 ;
  DU_FailedMDMismatch = 4 ;
  DU_FailedToInstall = 5 ;
  DU_FailedRetryPending = 6 ;
  DU_IGNOffWait = 7 ;
  DU_PreUpdate = 8 ;
  DU_RunningQuery = 9 ;
  DU_RunningExternal = 10 ;
  DU_PostUpdate = 11 ;
  DU_NoNetwork = 12 ;
  DU_FailedSeedRequest = 13 ;
  DU_FailedKeyRequest = 14 ;
  DU_SuccessfulKeyRequest = 15 ;
  DU_FailedSecurityUnlock = 16 ;
  DU_FailedProgrammingState = 17 ;
  DU_BattInsufficient = 18 ;
  DU_NotParked = 19 ;
  DU_ParkingBrakeNotSet = 20 ;
  DU_EngineRunActive = 21 ;
  DU_KeyNotOut = 22 ;
  DU_HighVoltageCharger = 23 ;
  DU_RemoteStart = 24 ;
  DU_IncorrectPowermode = 25 ;
  DU_Cancelled = 26 ;
  DU_DelayModuleReflash = 27 ;
  DU_FailedUpdateVerification = 28 ;
  DU_FailedInstallNoChange = 29 ;
}


//**********************
//Interface ID: 26 iNetworkAccessManager
//**********************

//Method 2601 NetworkRequest
//--------------------------------------
message  NetworkRequest_request_response  {

  optional	 stringTranslationType	 NetworkName = 1 ;
  optional	 networkAccessManagerType	 NetworkType = 2 ;
  optional	 string	 APIDString = 3 ;
  optional	 bool	 NetworkAccess = 4 ;
  optional	 string	 SourceIPAddress = 5 ;
  optional	 networkCostType	 NetworkCost = 6 ;
  optional	 uint32	 SourcePort = 7 ;
}

message  NetworkRequest_response  {

  optional	 stringTranslationType	 NetworkName = 1 ;
  optional	 networkAccessManagerType	 NetworkType = 2 ;
  optional	 bytes	 NetworkMACAddress = 3 ;
  optional	 string	 NetworkIPAddress = 4 ;
  optional	 networkAccessManagerNetworkStatusType	 NetworkStatus = 5 ;
  optional	 string	 APIDString = 6 ;
  optional	 networkCostType	 NetworkCost = 7 ;
  optional	 uint32	 ADNDSCP = 8 ;
  optional	 uint32	 SourcePort = 9 ;
  optional	 uint32	 SourceVLANID = 10 ;
}

//Method 2602 ProvideNetworkList
//--------------------------------------
message  ProvideNetworkList_request_response  {

  optional	 string	 APIDString = 1 ;
}

message  ProvideNetworkList_response  {

  repeated	 networkListInfo	 NetworkListInfo = 1 ;
}

//Method 2603 SessionNotSuccessful
//--------------------------------------
message  SessionNotSuccessful_request  {

  optional	 string	 APIDString = 1 ;
  optional	 sessionStatus	 SessionStatus = 2 ;
}

//Method 2606 AKAChallengeResponse
//--------------------------------------
message  AKAChallengeResponse_request  {

  optional	 bytes	 AT_RES = 1 ;
  optional	 bytes	 AT_IK = 2 ;
  optional	 bytes	 AT_CK = 3 ;
  optional	 bytes	 AT_AUTS = 4 ;
}

//Method 2608 EAP_AKA_Identity
//--------------------------------------
//Method 2609 EAP_AKA_Identity_Response
//--------------------------------------
message  EAP_AKA_Identity_Response_request  {

  optional	 string	 EAP_AKA_IdentityStr = 1 ;
}

//Method 2611 VLANsAvailable
//--------------------------------------
message  VLANsAvailable_request  {

  optional	 bytes	 VLANsAvailable = 1 ;
}

//Property 2607 ControlledECUList
//--------------------------------------
message  ControlledECUList_status  {

  optional	 string	 SourceIPAddress = 1 ;
  optional	 uint32	 SourceVLANID = 2 ;
  optional	 networkAccessState	 NetworkAccessState = 3 ;
  optional	 uint32	 SourcePort = 4 ;
}

//Property 2612 SetAllowECUArray
//--------------------------------------
message  SetAllowECUArray_status  {

  repeated	 allowECUArray	 AllowECUArray = 1 ;
}

//Event 2604 NetworkStatus
//--------------------------------------
message  NetworkStatus_event  {

  optional	 stringTranslationType	 NetworkName = 1 ;
  optional	 networkAccessManagerType	 NetworkType = 2 ;
  optional	 bytes	 NetworkMACAddress = 3 ;
  optional	 string	 NetworkIPAddress = 4 ;
  optional	 networkAccessManagerNetworkStatusType	 NetworkStatus = 5 ;
  optional	 networkCostType	 NetworkCost = 6 ;
}

//Event 2605 AKAChallengeRequest
//--------------------------------------
message  AKAChallengeRequest_event  {

  optional	 bytes	 AT_RAND = 1 ;
  optional	 bytes	 AT_AUTN = 2 ;
}

//Event 2610 EAP_AKA_Identity_Request
//--------------------------------------
//message  EAP_AKA_Identity_Request_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 2613 ServerLost
//--------------------------------------
message  ServerLost_event  {

  optional	 string	 ServerName = 1 ;
}

enum  networkAccessManagerType  {

  NAM_NONE = 0 ;
  WIFI = 1 ;
  CELLULAR = 2 ;
}

enum  networkCostType  {

  NA = 0 ;
  GM_Paid = 1 ;
  Customer_Paid = 2 ;
}

enum  networkAccessManagerNetworkStatusType  {

  DOWN = 0 ;
  UP = 1 ;
  ABORT = 2 ;
  SUSPEND = 3 ;
  RESUME = 4 ;
}

message  networkListInfo  {

  optional	 stringTranslationType	 NetworkName = 1 ;
  optional	 networkAccessManagerType	 NetworkType = 2 ;
  optional	 networkCostType	 NetworkCost = 3 ;
}

enum  sessionStatus  {

  SS_OTHER = 0 ;
  SS_CONNECTION_FAILED = 1 ;
  SS_SERVER_NOT_RESPONDING = 2 ;
  SS_AUTHENTICATION_FAILED = 3 ;
}

enum  networkAccessState  {

  NotAllowed = 0 ;
  Allowed = 1 ;
}

message  allowECUArray  {

  optional	 string	 SourceIPAddress = 1 ;
  optional	 uint32	 SourceVLANID = 2 ;
  optional	 uint32	 SourcePort = 3 ;
}


//**********************
//Interface ID: 27 iDisplaysCoordination
//**********************

//Method 2701 HUDUpDownButtons
//--------------------------------------
message  HUDUpDownButtons_request  {

  optional	 bool	 HUDUpPressed = 1 ;
  optional	 bool	 HUDDownPressed = 2 ;
}

//Method 2702 HUDRotateButtons
//--------------------------------------
message  HUDRotateButtons_request  {

  optional	 bool	 HUDRotateLeftPressed = 1 ;
  optional	 bool	 HUDRotateRightPressed = 2 ;
}

//Method 2703 HUDIntensityButtons
//--------------------------------------
message  HUDIntensityButtons_request  {

  optional	 bool	 HUDIntensityUpPressed = 1 ;
  optional	 bool	 HUDIntensityDownPressed = 2 ;
}

//Method 2704 HUDOnOffButtons
//--------------------------------------
message  HUDOnOffButtons_request  {

  optional	 bool	 HUDOnPressed = 1 ;
  optional	 bool	 HUDOffPressed = 2 ;
}

//Method 2710 ResetOilLife
//--------------------------------------
//Method 2711 AirFilterRequest
//--------------------------------------
message  AirFilterRequest_request_response  {

  optional	 actionAirFilterMonitorDriverRequest	 ActionAirFilterMonitorDriverRequest = 1 ;
}

//Method 2712 BrakePadLifeRequest
//--------------------------------------
message  BrakePadLifeRequest_request_response  {

  optional	 actionBrakePadLifeStatusIndicationDriverRequest	 ActionBrakePadLifeStatusIndicationDriverRequest = 1 ;
}

//Method 2713 FuelEconomyDistanceSelection
//--------------------------------------
message  FuelEconomyDistanceSelection_request_response  {

  optional	 fuelSelectionType	 AFEBestSelectedForViewingRequest = 1[default = FirstEntrySelected];
}

//Method 2714 ResetBestAFE
//--------------------------------------
//Method 2715 ResetAverageSpeed
//--------------------------------------
//Method 2716 StartStopElapsedTimer
//--------------------------------------
//Method 2717 ClearElapsedTimer
//--------------------------------------
//Method 2718 ResetTrafficSignSetAction
//--------------------------------------
//Method 2719 TrafficSignMemoryPageDisplayActive
//--------------------------------------
message  TrafficSignMemoryPageDisplayActive_request_response  {

  optional	 bool	 TSMMemoryPageDisplayActive = 1 ;
}

//Method 2720 TrafficSignMemoryOnOff
//--------------------------------------
message  TrafficSignMemoryOnOff_request_response  {

  optional	 bool	 SelectTSMOnOff = 1 ;
}

//Method 2721 ResetFuelFilterLife
//--------------------------------------
//Method 2722 TransmissionFluidReset
//--------------------------------------
message  TransmissionFluidReset_request_response  {

  optional	 transmissionOilLifeResetRequested	 TransmissionOilLifeResetRequested = 1 ;
}

//Method 2723 TrailerBrakeDisplayFocusGained
//--------------------------------------
//Method 2755 AugmentedReality
//--------------------------------------
message  AugmentedReality_request_response  {

  optional	 aRStatus	 ARStatus = 1 ;
}

//Method 2756 Units
//--------------------------------------
message  Units_request_response  {

  optional	 setDisplayUnit	 SetDisplayUnit = 1 ;
}

//Method 2757 ACCSpeedFromSigns
//--------------------------------------
message  ACCSpeedFromSigns_request_response  {

  optional	 bool	 ACCDisplayMode = 1 ;
}

//Method 2758 SetTireLoad
//--------------------------------------
message  SetTireLoad_request_response  {

  optional	 tireLoadStatusType	 SelectedTireLoadingStatus = 1 ;
}

//Method 2759 SetHUDSpeedSign
//--------------------------------------
message  SetHUDSpeedSign_request_response  {

  optional	 bool	 ShowHUDSpeedSign = 1 ;
}

//Method 2760 SetIPCLayout
//--------------------------------------
message  SetIPCLayout_request_response  {

  optional	 iPCLayoutType	 IPCLayoutSelection = 1 ;
}

//Method 2761 SetIPCSpeedConfig
//--------------------------------------
message  SetIPCSpeedConfig_request_response  {

  optional	 bool	 ShowIPCDigitalSpeedometer = 1 ;
  optional	 bool	 ShowSpeedLimit = 2 ;
  optional	 bool	 ShowIPCSpeedWarningColor = 3 ;
}

//Method 2767 IPCNAV
//--------------------------------------
message  IPCNAV_request_response  {

  optional	 nAVStatus	 NAVStatus = 1 ;
}

//Method 2768 TractionandStabilityRequest
//--------------------------------------
message  TractionandStabilityRequest_request_response  {

  optional	 bool	 SetTractionControl = 1 ;
  optional	 bool	 SetStabilityControl = 2 ;
}

//Method 2771 TPMS_Relearn
//--------------------------------------
//Method 2772 StartLearnRemote
//--------------------------------------
//Method 2773 TrailerBrakeDisplayFocusLost
//--------------------------------------
//Method 2775 AGCControlRequest
//--------------------------------------
message  AGCControlRequest_request_response  {

  optional	 aGCControl	 AGCControl = 1 ;
  optional	 uint32	 NextAGCStep = 2 ;
}

//Method 2777 ICCStatusIndicator
//--------------------------------------
message  ICCStatusIndicator_request_response  {

  optional	 iCCStatusIndType	 ICCStatusIndReq = 1 ;
}

message  ICCStatusIndicator_response  {

  optional	 iCCStatusIndType	 ICCStatusIndResp = 1 ;
}

//Method 2778 AGCRequestICS
//--------------------------------------
message  AGCRequestICS_request_response  {

  optional	 iCSAGCRequest	 ICSAGCRequest = 1 ;
  optional	 uint32	 ICSDimmingLevel = 2 ;
}

//Property 2705 HUDButtonControlStatus
//--------------------------------------
message  HUDButtonControlStatus_status  {

  optional	 bool	 HUDUp = 1 ;
  optional	 bool	 HUDDown = 2 ;
  optional	 bool	 HUDRotateLeft = 3 ;
  optional	 bool	 HUDRotateRight = 4 ;
  optional	 bool	 HUDIntensityUp = 5 ;
  optional	 bool	 HUDIntensityDown = 6 ;
}

//Property 2706 HUDOnOffStatus
//--------------------------------------
message  HUDOnOffStatus_status  {

  optional	 bool	 HUDOnOff = 1 ;
}

//Property 2730 EngineOilLife
//--------------------------------------
message  EngineOilLife_status  {

  optional	 uint32	 OilLife = 1 ;
  optional	 bool	 OilLifeInvalid = 2 ;
  optional	 bool	 ChangeEngineOilSoon = 3 ;
}

//Property 2731 TirePressure
//--------------------------------------
message  TirePressure_status  {

  optional	 uint32	 LFTirePressure = 1 ;
  optional	 bool	 LFTirePressureInvalid = 2 ;
  optional	 uint32	 RFTirePressure = 3 ;
  optional	 bool	 RFTirePressureInvalid = 4 ;
  optional	 uint32	 LRTirePressure = 5 ;
  optional	 bool	 LRTirePressureInvalid = 6 ;
  optional	 uint32	 RRTirePressure = 7 ;
  optional	 bool	 RRTirePressureInvalid = 8 ;
  optional	 bool	 LeftFrontTirePressureLow = 9 ;
  optional	 bool	 RightFrontTirePressureLow = 10 ;
  optional	 bool	 LeftRearTirePressureLow = 11 ;
  optional	 bool	 RightRearTirePressureLow = 12 ;
  optional	 bool	 LeftFrontTirePressureHigh = 13 ;
  optional	 bool	 RightFrontTirePressureHigh = 14 ;
  optional	 bool	 LeftRearTirePressureHigh = 15 ;
  optional	 bool	 RightRearTirePressureHigh = 16 ;
}

//Property 2732 AirFilterLife
//--------------------------------------
message  AirFilterLife_status  {

  optional	 uint32	 EngineAirLifeFilterPercentage = 1 ;
  optional	 bool	 EngineAirLifeFilterPercentageInvalid = 2 ;
  optional	 engineAirFilterMonitorStatus	 EngineAirFilterMonitorStatus = 3 ;
}

//Property 2733 BrakePadLife
//--------------------------------------
message  BrakePadLife_status  {

  optional	 brakePadLifeStatusIndicationRequest	 BrakePadLifeStatusIndicationRequest = 1 ;
  optional	 bool	 BrakePadLifeFrontResetAvailable = 2 ;
  optional	 bool	 BrakePadLifeRearResetAvailable = 3 ;
  optional	 uint32	 BrakePadLifeFront = 4 ;
  optional	 bool	 BrakePadLifeFrontInvalid = 5 ;
  optional	 uint32	 BrakePadLifeRear = 6 ;
  optional	 bool	 BrakePadLifeRearInvalid = 7 ;
}

//Property 2734 FuelEconomyDistances
//--------------------------------------
message  FuelEconomyDistances_status  {

  optional	 fuelSelectionType	 AFEBestSelectedForViewing = 1[default = FirstEntrySelected];
  optional	 uint32	 AFECurrentBestDistance = 2 ;
  optional	 uint32	 AFECurrentBestDistance1 = 3 ;
  optional	 uint32	 AFECurrentBestDistance2 = 4 ;
  optional	 uint32	 AFECurrentBestDistance3 = 5 ;
}

//Property 2735 FuelEconomyKm_L
//--------------------------------------
message  FuelEconomyKm_L_status  {

  optional	 uint32	 AFECurrentInverted = 1 ;
  optional	 bool	 AFECurrentInvertedInvalid = 2 ;
  optional	 uint32	 AFEBestInverted = 3 ;
  optional	 bool	 AFEBestInvertedInvalid = 4 ;
  optional	 uint32	 InstantaneousFuelEconomyInverted = 5 ;
  optional	 bool	 InstantaneousFuelEconomyInvertedInvalid = 6 ;
}

//Property 2736 FuelEconomyL_100km
//--------------------------------------
message  FuelEconomyL_100km_status  {

  optional	 uint32	 AFECurrent = 1 ;
  optional	 bool	 AFECurrentInvalid = 2 ;
  optional	 uint32	 AFEBest = 3 ;
  optional	 bool	 AFEBestInvalid = 4 ;
  optional	 uint32	 InstantaneousFuelEconomy = 5 ;
  optional	 bool	 InstantaneousFuelEconomyInvalid = 6 ;
}

//Property 2737 FuelEconomyParameters
//--------------------------------------
message  FuelEconomyParameters_status  {

  optional	 aFMTotalNumberOfCylinders	 AFMTotalNumberOfCylinders = 1 ;
  optional	 uint32	 AFMNumberOfActiveCylinders = 2 ;
  optional	 bool	 AFMActive = 3 ;
  optional	 bool	 EnergyRecovery = 4 ;
  optional	 bool	 AutoStop = 5 ;
}

//Property 2738 AverageVehicleSpeed
//--------------------------------------
message  AverageVehicleSpeed_status  {

  optional	 uint32	 AverageSpeed = 1 ;
  optional	 bool	 AverageSpeedInvalid = 2 ;
}

//Property 2739 Timer
//--------------------------------------
message  Timer_status  {

  optional	 uint32	 ElapsedTime = 1 ;
  optional	 bool	 ElapsedTimeInvalid = 2 ;
  optional	 bool	 ElapsedTimerOn = 3 ;
}

//Property 2740 TrafficSignMemoryEurope
//--------------------------------------
message  TrafficSignMemoryEurope_status  {

  optional	 tSMEuropeSignType	 TSMEuropeSign1Main = 1 ;
  optional	 tSMEuropeSignAddOnType	 TSMEuropeSign1AddOn = 2 ;
  optional	 tSMEuropeSignType	 TSMEuropeSign2Main = 3 ;
  optional	 tSMEuropeSignAddOnType	 TSMEuropeSign2AddOn = 4 ;
}

//Property 2741 TrafficSignMemoryUSCanada
//--------------------------------------
message  TrafficSignMemoryUSCanada_status  {

  optional	 tSMUSSignType	 TSMUSCanadaDisplaySign1Main = 1 ;
  optional	 tSMUSSignAddOnType	 TSMUSCanadaDisplaySign1AddOn = 2 ;
  optional	 tSMUSSignType	 TSMUSCanadaSign2Main = 3 ;
  optional	 tSMUSSignAddOnType	 TSMUSCanadaSign2AddOn = 4 ;
}

//Property 2742 TrafficSignMemoryStatus
//--------------------------------------
message  TrafficSignMemoryStatus_status  {

  optional	 tSMScreenConfiguration	 TSMScreenConfiguration = 1 ;
  optional	 bool	 TSMStatus = 2 ;
  optional	 bool	 TSMSignDetected = 3 ;
  optional	 bool	 TSMNoEntry = 4 ;
  optional	 bool	 TSMUnits = 5 ;
}

//Property 2743 BatteryVolts
//--------------------------------------
message  BatteryVolts_status  {

  optional	 uint32	 BatteryVoltage = 1 ;
  optional	 bool	 BatteryVoltageInvalid = 2 ;
}

//Property 2744 CoolantTemp
//--------------------------------------
message  CoolantTemp_status  {

  optional	 int32	 CoolantTemperature = 1 ;
  optional	 bool	 CoolantTemperatureInvalid = 2 ;
  optional	 bool	 EngineOverheated = 3 ;
  optional	 bool	 EngineOverheatedIdleEngine = 4 ;
  optional	 uint32	 CoolantTemperatureGageDisplayValue = 5 ;
  optional	 bool	 CoolantTemperatureGageDisplayValueInvalid = 6 ;
}

//Property 2745 EfficiencyGauge
//--------------------------------------
message  EfficiencyGauge_status  {

  optional	 uint32	 HybridEfficiencyFiltered = 1 ;
  optional	 bool	 HybridEfficiencyFilteredInvalid = 2 ;
}

//Property 2746 OilPressure
//--------------------------------------
message  OilPressure_status  {

  optional	 uint32	 OilPressureValue = 1 ;
  optional	 bool	 OilPressureValueInvalid = 2 ;
}

//Property 2747 FuelFilterLife
//--------------------------------------
message  FuelFilterLife_status  {

  optional	 uint32	 FuelFilterRemainingLife = 1 ;
  optional	 bool	 FuelFilterRemainingLifeInvalid = 2 ;
}

//Property 2748 EngineHours
//--------------------------------------
message  EngineHours_status  {

  optional	 uint32	 EngineHourMeter = 1 ;
  optional	 bool	 EngineHourMeterInvalid = 2 ;
  optional	 uint32	 EngineIdleMeter = 3 ;
  optional	 bool	 EngineIdleMeterInvalid = 4 ;
}

//Property 2749 TransmissionFluidTemp
//--------------------------------------
message  TransmissionFluidTemp_status  {

  optional	 int32	 TransmissionOilTemperature = 1 ;
  optional	 bool	 TransmissionOilTemperatureInvalid = 2 ;
}

//Property 2750 TransmissionFluidLife
//--------------------------------------
message  TransmissionFluidLife_status  {

  optional	 uint32	 TransmissionOilRemainingLife = 1 ;
  optional	 bool	 TransmissionOilRemainingLifeInvalid = 2 ;
  optional	 bool	 ChangeTransmissionFluidSoon = 3 ;
}

//Property 2751 TrailerBrake
//--------------------------------------
message  TrailerBrake_status  {

  optional	 uint32	 TrailerBrakingGain = 1 ;
  optional	 bool	 TrailerBrakingGainInvalid = 2 ;
  optional	 uint32	 TrailerBrakingForce = 3 ;
  optional	 bool	 TrailerBrakingForceInvalid = 4 ;
  optional	 bool	 TrailerConnected = 5 ;
  optional	 bool	 TrailerBrakesDisabledServiceRequired = 6 ;
  optional	 bool	 CheckTrailerWiring = 7 ;
}

//Property 2752 OffRoad
//--------------------------------------
message  OffRoad_status  {

  optional	 int32	 RoadWheelAngle = 1 ;
  optional	 bool	 RoadWheelAngleInvalid = 2 ;
  optional	 int32	 VehiclePitchAngle = 3 ;
  optional	 bool	 VehiclePitchAngleInvalid = 4 ;
  optional	 int32	 VehicleRollAngle = 5 ;
  optional	 bool	 VehicleRollAngleInvalid = 6 ;
  optional	 secAxleOperModeType	 SecondaryAxleOperationalMode = 7 ;
  optional	 bool	 SecondaryAxleOperationalModeInvalid = 8 ;
  optional	 bool	 TireLeftFrontLowTractionIndOn = 9 ;
  optional	 bool	 TireRightFrontLowTractionIndOn = 10 ;
  optional	 bool	 TireLeftRearLowTractionIndOn = 11 ;
  optional	 bool	 TireRightRearLowTractionIndOn = 12 ;
  optional	 transferCasePositionType	 TransferCasePosition = 13 ;
  optional	 bool	 TransferCasePostionInvalid = 14 ;
}

//Property 2753 TractionAndStability
//--------------------------------------
message  TractionAndStability_status  {

  optional	 tractionAndStabilityMenuConfiguration	 TractionAndStabilityMenuConfiguration = 1 ;
  optional	 bool	 TractionControlSystemCurrentState = 2 ;
  optional	 bool	 VehicleStabilityEnhancementCurrentState = 3 ;
  optional	 bool	 TractionControlSystemCustomizationAvailable = 4 ;
  optional	 bool	 StabilityCustomizationAvailable = 5 ;
}

//Property 2754 DieselExhaustFluid
//--------------------------------------
message  DieselExhaustFluid_status  {

  optional	 uint32	 DieselExhaustFluidRemainingDistance = 1 ;
  optional	 bool	 DieselExhaustFluidRemainingDistanceInvalid = 2 ;
  optional	 dEFLevelSegmentsOnType	 DEFLevelSegmentsON = 3 ;
  optional	 bool	 DEFRangeLow = 4 ;
  optional	 bool	 DEFRangeHigh = 5 ;
  optional	 dEFOBDMarketType	 DEFOBDMarket = 6 ;
}

//Property 2762 ACCSpeedLimitStatus
//--------------------------------------
message  ACCSpeedLimitStatus_status  {

  optional	 bool	 ACCSettingType = 1 ;
}

//Property 2763 TireLoad
//--------------------------------------
message  TireLoad_status  {

  optional	 tireLoadStatusType	 TPMSTireLoadingStatus = 1 ;
  optional	 bool	 TPMSTireLoadingStatusInvalid = 2 ;
}

//Property 2764 HUDSpeedSign
//--------------------------------------
message  HUDSpeedSign_status  {

  optional	 bool	 HUDSpeedSignStatus = 1 ;
}

//Property 2765 IPCLayout
//--------------------------------------
message  IPCLayout_status  {

  optional	 iPCLayoutType	 IPCLayoutStatus = 1 ;
}

//Property 2766 IPCSpeedConfig
//--------------------------------------
message  IPCSpeedConfig_status  {

  optional	 bool	 IPCDigitalSpeedometerStatus = 1 ;
  optional	 bool	 ShowSpeedLimitInfo = 2 ;
  optional	 bool	 IPCSpeedWarningColorStatus = 3 ;
}

//Property 2769 LifetimeFuelEconomyL_100km
//--------------------------------------
message  LifetimeFuelEconomyL_100km_status  {

  optional	 uint32	 LifetimeAFE = 1 ;
  optional	 bool	 LifetimeAFEInvalid = 2 ;
}

//Property 2770 LifetimeFuelEconomyKm_L
//--------------------------------------
message  LifetimeFuelEconomyKm_L_status  {

  optional	 uint32	 LifetimeAFEInverted = 1 ;
  optional	 bool	 LifetimeAFEInvertedInvalid = 2 ;
}

//Property 2776 AGCRequestStatus
//--------------------------------------
message  AGCRequestStatus_status  {

  optional	 bool	 AGCRequest = 1 ;
  optional	 uint32	 AccumulatedUsedTime = 2 ;
  optional	 iPCAGCRequest	 IPCAGCRequest = 3 ;
  optional	 uint32	 IPCDimmingLevel = 4 ;
}

//Event 2774 DisplaysCoordinationCals
//--------------------------------------
message  DisplaysCoordinationCals_event  {

  optional	 bool	 KeyFobPresent = 1 ;
}

enum  actionAirFilterMonitorDriverRequest  {

  AF_NoAction = 0 ;
  AF_Enable = 1 ;
  AF_Disable = 2 ;
  AF_Reset = 3 ;
}

enum  actionBrakePadLifeStatusIndicationDriverRequest  {

  BP_NoAction = 0 ;
  BP_Disable = 1 ;
  BP_Enable = 2 ;
  BP_ResetFront = 3 ;
  BP_ResetRear = 4 ;
}

enum  fuelSelectionType  {

  FirstEntrySelected = 1 ;
  SecondEntrySelected = 2 ;
  ThirdEntrySelected = 3 ;
}

enum  transmissionOilLifeResetRequested  {

  TF_NoAction = 0 ;
  TF_NoRequest = 1 ;
  TF_ResetRequestActive = 2 ;
}

enum  aRStatus  {

  AR_NoAction_Unknown = 0 ;
  AR_Initializing = 1 ;
  AR_Inactive = 2 ;
  AR_Active = 3 ;
  AR_NeedsService = 4 ;
  AR_TemporarilyUnavailable = 5 ;
}

enum  setDisplayUnit  {

  UnitsMetric = 0 ;
  UnitsUS = 1 ;
  UnitsImperial = 2 ;
}

enum  tireLoadStatusType  {

  TIRE_LOAD_STATUS_UNKNOWN = 0 ;
  TIRE_LOAD_STATUS_LIGHT_LOAD = 1 ;
  TIRE_LOAD_STATUS_BEST_LOAD = 2 ;
  TIRE_LOAD_STATUS_MAX_LOAD = 3 ;
}

enum  iPCLayoutType  {

  Layout_Gauge = 0 ;
  Layout_ARCamera = 1 ;
  Layout_Map = 2 ;
  Layout_NightVision = 3 ;
  Layout_NativeMap = 4 ;
  Layout_ProjectionMap = 5 ;
  Layout_DualGauge = 6 ;
  Layout_VehicleInfo = 7 ;
  Layout_Infotainment = 8 ;
  Layout_DriverAssistance = 9 ;
  Layout_CleanMinimalist = 10 ;
  Layout_Baja = 11 ;
  Layout_OffRoad = 12 ;
  Layout_TowHaul = 13 ;
  Layout_Energy = 14 ;
  Layout_Technical = 15 ;
  Layout_UltraCruise = 16 ;
  Layout_Sport = 17 ;
  Layout_Track = 18 ;
  Layout_MaxPower = 19 ;
}

enum  nAVStatus  {

  NAV_NoAction_Unknown = 0 ;
  NAV_Reserved1 = 1 ;
  NAV_Reserved2 = 2 ;
  NAV_Active = 3 ;
  NAV_MapError = 4 ;
  NAV_Unavailable = 5 ;
}

enum  aGCControl  {

  AGC_NoControl = 0 ;
  AGC_Immediate = 1 ;
  AGC_Schedule = 80 ;
}

enum  iCCStatusIndType  {

  ICC_Off = 0 ;
  ICC_Idle = 1 ;
  ICC_Active = 2 ;
}

enum  iCSAGCRequest  {

  ICS_AGC_Initial = 0 ;
  ICS_AGC_Invalid = 1 ;
  ICS_AGC_Not_Needed = 2 ;
  ICS_AGC_Needed = 3 ;
  ICS_AGC_Confirmed = 4 ;
  ICS_AGC_Reset_Timer_Confirmed = 5 ;
  ICS_AGC_Reserved1 = 6 ;
  ICS_AGC_Reserved2 = 7 ;
}

enum  engineAirFilterMonitorStatus  {

  AFL_OK = 0 ;
  AFL_ReplaceAirFilterSoon = 1 ;
  AFL_ReplaceAirFilterNow = 2 ;
  AFL_FaultPresent = 3 ;
  AFL_Disabled = 4 ;
}

enum  brakePadLifeStatusIndicationRequest  {

  BPL_NotPresent = 0 ;
  BPL_OK = 1 ;
  BPL_ChangeSoon = 2 ;
  BPL_ChangeNow = 3 ;
  BPL_Disabled = 4 ;
  BPL_Service = 5 ;
}

enum  aFMTotalNumberOfCylinders  {

  FOUR_Cyl = 0 ;
  SIX_Cyl = 1 ;
  EIGHT_Cyl = 2 ;
  TEN_Cyl = 3 ;
  TWELVE_Cyl = 4 ;
}

enum  tSMEuropeSignType  {

  TSME_Unknown = 0 ;
  TSME_NoSignDetected = 1 ;
  TSME_EndOfSpeedLimit = 2 ;
  TSME_EndOfAllRestrictions = 3 ;
  TSME_BeginOfMotorway = 4 ;
  TSME_EndOfMotorway = 5 ;
  TSME_BeginOfExpressway = 6 ;
  TSME_EndOfExpressway = 7 ;
  TSME_BeginOfPlayStreetZone = 8 ;
  TSME_EndOfPlayStreetZone = 9 ;
  TSME_BeginOfPassingRestriction = 10 ;
  TSME_EndOfPassingRestriction = 11 ;
  TSME_NoEntry = 12 ;
  TSME_BeginOfCityLimits = 13 ;
  TSME_EndOfCityLimits = 14 ;
  TSME_SpeedLimit5 = 15 ;
  TSME_SpeedLimit10 = 16 ;
  TSME_SpeedLimit15 = 17 ;
  TSME_SpeedLimit20 = 18 ;
  TSME_SpeedLimit25 = 19 ;
  TSME_SpeedLimit30 = 20 ;
  TSME_SpeedLimit35 = 21 ;
  TSME_SpeedLimit40 = 22 ;
  TSME_SpeedLimit45 = 23 ;
  TSME_SpeedLimit50 = 24 ;
  TSME_SpeedLimit55 = 25 ;
  TSME_SpeedLimit60 = 26 ;
  TSME_SpeedLimit65 = 27 ;
  TSME_SpeedLimit70 = 28 ;
  TSME_SpeedLimit75 = 29 ;
  TSME_SpeedLimit80 = 30 ;
  TSME_SpeedLimit85 = 31 ;
  TSME_SpeedLimit90 = 32 ;
  TSME_SpeedLimit95 = 33 ;
  TSME_SpeedLimit100 = 34 ;
  TSME_SpeedLimit105 = 35 ;
  TSME_SpeedLimit110 = 36 ;
  TSME_SpeedLimit115 = 37 ;
  TSME_SpeedLimit120 = 38 ;
  TSME_SpeedLimit125 = 39 ;
  TSME_SpeedLimit130 = 40 ;
  TSME_SpeedLimit135 = 41 ;
  TSME_SpeedLimit140 = 42 ;
  TSME_SpeedLimit145 = 43 ;
  TSME_SpeedLimit150 = 44 ;
  TSME_SpeedLimit155 = 45 ;
  TSME_SpeedLimit160 = 46 ;
  TSME_SpeedLimit165 = 47 ;
  TSME_SpeedLimit170 = 48 ;
  TSME_SpeedLimit175 = 49 ;
  TSME_SpeedLimit180 = 50 ;
  TSME_SpeedLimit185 = 51 ;
  TSME_SpeedLimit190 = 52 ;
  TSME_SpeedLimit195 = 53 ;
  TSME_SpeedLimit200 = 54 ;
}

enum  tSMEuropeSignAddOnType  {

  TSMEAddOn_Unknown = 0 ;
  TSME_None = 1 ;
  TSME_SuppSignGeneric = 2 ;
  TSME_Rain = 3 ;
  TSME_Snow = 4 ;
  TSME_SnowRain = 5 ;
  TSME_RainCloud = 6 ;
  TSME_Fog = 7 ;
  TSME_Time = 8 ;
  TSME_WetConditions = 9 ;
  TSME_Trailer = 10 ;
  TSME_TractorPassable = 11 ;
  TSME_ArrowLeft = 12 ;
  TSME_ArrowRight = 13 ;
  TSME_DistanceArrow = 14 ;
  TSME_School = 15 ;
}

enum  tSMUSSignType  {

  TSMUS_Unknown = 0 ;
  TSMUS_NoSignDetected = 1 ;
  TSMUS_BeginOfPassingRestrictionUS = 2 ;
  TSMUS_EndOfPassingRestrictionUS = 3 ;
  TSMUS_BeginOfPassingRestrictionCanada = 4 ;
  TSMUS_EndOfPassingRestrictionCanada = 5 ;
  TSMUS_SpeedLimit5 = 6 ;
  TSMUS_SpeedLimit10 = 7 ;
  TSMUS_SpeedLimit15 = 8 ;
  TSMUS_SpeedLimit20 = 9 ;
  TSMUS_SpeedLimit25 = 10 ;
  TSMUS_SpeedLimit30 = 11 ;
  TSMUS_SpeedLimit35 = 12 ;
  TSMUS_SpeedLimit40 = 13 ;
  TSMUS_SpeedLimit45 = 14 ;
  TSMUS_SpeedLimit50 = 15 ;
  TSMUS_SpeedLimit55 = 16 ;
  TSMUS_SpeedLimit60 = 17 ;
  TSMUS_SpeedLimit65 = 18 ;
  TSMUS_SpeedLimit70 = 19 ;
  TSMUS_SpeedLimit75 = 20 ;
  TSMUS_SpeedLimit80 = 21 ;
  TSMUS_SpeedLimit85 = 22 ;
  TSMUS_SpeedLimit90 = 23 ;
  TSMUS_SpeedLimit95 = 24 ;
  TSMUS_SpeedLimit100 = 25 ;
  TSMUS_SpeedLimit105 = 26 ;
  TSMUS_SpeedLimit110 = 27 ;
  TSMUS_SpeedLimit115 = 28 ;
  TSMUS_SpeedLimit120 = 29 ;
  TSMUS_SpeedLimit125 = 30 ;
  TSMUS_SpeedLimit130 = 31 ;
  TSMUS_SpeedLimit135 = 32 ;
  TSMUS_SpeedLimit140 = 33 ;
  TSMUS_SpeedLimit145 = 34 ;
  TSMUS_SpeedLimit150 = 35 ;
  TSMUS_SpeedLimit155 = 36 ;
  TSMUS_SpeedLimit160 = 37 ;
  TSMUS_SpeedLimit165 = 38 ;
  TSMUS_SpeedLimit170 = 39 ;
  TSMUS_SpeedLimit175 = 40 ;
  TSMUS_SpeedLimit180 = 41 ;
  TSMUS_SpeedLimit185 = 42 ;
  TSMUS_SpeedLimit190 = 43 ;
  TSMUS_SpeedLimit195 = 44 ;
  TSMUS_SpeedLimit200 = 45 ;
}

enum  tSMUSSignAddOnType  {

  TSMUSAddOn_Unknown = 0 ;
  TSMUS_None = 1 ;
  TSMUS_SuppSignGeneric = 2 ;
  TSMUS_School = 3 ;
  TSMUS_SchoolWhenFlashing = 4 ;
  TSMUS_EndOfSpeedLimit = 5 ;
  TSMUS_WhereWorkersPresent = 6 ;
}

enum  tSMScreenConfiguration  {

  TSM_SignMain = 0 ;
  TSM_Sign1Main_Sign2Main = 1 ;
  TSM_SignMain_SignAddOn = 2 ;
  TSM_Sign1Main_Sign2Main_Sign1AddOn_Sign2AddOn = 3 ;
}

enum  secAxleOperModeType  {

  SOAM_2WheelDriveHigh = 0 ;
  SOAM_4WheelDriveHighLocked = 1 ;
  SOAM_4WheelDriveLowLocked = 2 ;
  SOAM_ActiveAllWheelDriveHigh = 3 ;
  SOAM_4WheelDriveHighOpen = 4 ;
  SOAM_4WheelDriveLowOpen = 5 ;
  SOAM_ActiveAllWheelDriveLow = 6 ;
  SOAM_2WheelDriveLow = 7 ;
  SOAM_Reserve1 = 8 ;
  SOAM_Reserve2 = 9 ;
  SOAM_Reserve3 = 10 ;
  SOAM_Reserve4 = 11 ;
  SOAM_Reserve5 = 12 ;
  SOAM_Reserve6 = 13 ;
  SOAM_Unknown = 14 ;
  SOAM_Neutral = 15 ;
}

enum  transferCasePositionType  {

  TCP_NoIndication = 0 ;
  TCP_2WDHighPending = 1 ;
  TCP_2WDHighActive = 2 ;
  TCP_4WDHighAutoPending = 3 ;
  TCP_4WDHighAutoActive = 4 ;
  TCP_4WDHighLockPending = 5 ;
  TCP_4WDHighLockActive = 6 ;
  TCP_4WDLowLockPending = 7 ;
  TCP_4WDLowLockActive = 8 ;
  TCP_TransferCaseNeutralPending = 9 ;
  TCP_TransferCaseNeutralActive = 10 ;
  TCP_4WDPositionUndeterminedActive = 11 ;
  TCP_AWDPending = 12 ;
  TCP_AWDActive = 13 ;
  TCP_FrontWheelDrivePending = 14 ;
  TCP_FrontWheelDriveActive = 15 ;
}

enum  tractionAndStabilityMenuConfiguration  {

  TaS_None = 0 ;
  TaS_TractionOnly = 1 ;
  TaS_TractionStabilty = 2 ;
  TaS_TractionStabilityCompetitive = 3 ;
}

enum  dEFLevelSegmentsOnType  {

  DEF_Value0 = 0 ;
  DEF_Value1 = 1 ;
  DEF_Value2 = 2 ;
  DEF_Value3 = 3 ;
  DEF_Value4 = 4 ;
  DEF_Value5 = 5 ;
  DEF_Value6 = 6 ;
  DEF_Value7 = 7 ;
  DEF_Value8 = 8 ;
  DEF_Value9 = 9 ;
}

enum  dEFOBDMarketType  {

  DEF_USEPA = 0 ;
  DEF_EURO = 1 ;
  DEF_UNUSED1 = 2 ;
  DEF_UNUSED2 = 3 ;
}

enum  iPCAGCRequest  {

  AGC_Initial = 0 ;
  Start_AGC_Algorithm = 1 ;
  AGC_Not_Needed = 2 ;
  AGC_Needed = 3 ;
  AGC_Reset_Timer = 4 ;
  AGC_Reserved1 = 5 ;
  AGC_Reserved2 = 6 ;
}


//**********************
//Interface ID: 28 iVehicleDataHubFunctions
//**********************

//Method 2801 VDHDiagnosticRequest
//--------------------------------------
//Event 2802 VDHNotification
//--------------------------------------
message  VDHNotification_event  {

  optional	 bytes	 VDHNotificationURI = 1 ;
  optional	 uint32	 VDHNotificationURILength = 2 ;
}


//**********************
//Interface ID: 29 iV2XCustomizationMenu
//**********************

//Method 2901 V2XResetFactoryDefaults
//--------------------------------------
message  V2XResetFactoryDefaults_request  {

}

//Property 2902 V2XCustomization
//--------------------------------------
message  V2XCustomization_set  {

  optional	 bytes	 V2XCustomizationData = 1 ;
}

message  V2XCustomization_status  {

  optional	 bytes	 V2XCustomizationData = 1 ;
}


//**********************
//Interface ID: 30 iTCPConnectionNotification
//**********************

//Event 3001 TCPConnectionNotificationEvent
//--------------------------------------
message  TCPConnectionNotificationEvent_event  {

  optional	 tCPConnectionNotificationSubtype	 TCPConnectionNotificationSubtype = 1[default = CGM_NONE];
  optional	 string	 TCPConnectionNotificationURI = 2 ;
}

enum  tCPConnectionNotificationSubtype  {

  CGM_NONE = 0 ;
  CGM_OTA = 1 ;
  CGM_VDH = 2 ;
  CGM_DR = 3 ;
  VCU_ULTIFI_WAKEUP = 4 ;
}


//**********************
//Interface ID: 31 iVDHSendData
//**********************

//Method 3101 SendStructData
//--------------------------------------
message  SendStructData_request_response  {

  optional	 bytes	 PackageBlob = 1 ;
  optional	 uint64	 PackageID = 2 ;
  optional	 bytes	 Send_Criteria = 4 ;
}

message  SendStructData_response  {

  optional	 bool	 Ack = 1 ;
}

//Method 3102 GetStructDataStatus
//--------------------------------------
//Method 3103 SendFiles
//--------------------------------------
message  SendFiles_request_response  {

  optional	 string	 FilePath = 1 ;
  optional	 source	 Source = 2 ;
  optional	 bytes	 Send_Criteria = 4 ;
  optional	 bytes	 FileParameter_Blob = 5 ;
}

message  SendFiles_response  {

  optional	 bool	 Ack = 1 ;
  optional	 source	 Source = 2 ;
}

//Method 3104 GetFileSendStatus
//--------------------------------------
//Method 3106 GetSendStatus
//--------------------------------------
message  GetSendStatus_request_response  {

  optional	 uint64	 AcknID = 1 ;
  optional	 source	 Source = 2 ;
}

message  GetSendStatus_response  {

  optional	 uint64	 AcknID = 1 ;
  optional	 vDHStatusType	 Status = 2 ;
}

//Event 3105 StructDataSendEvent
//--------------------------------------
//message  StructDataSendEvent_event  {
//
//No parameters, so GPB not necessary.
//}

//Event 3107 SendStatusEvent
//--------------------------------------
message  SendStatusEvent_event  {

  optional	 uint64	 AcknID = 1 ;
  optional	 vDHStatusType	 Status = 2 ;
  optional	 source	 Source = 3 ;
}

enum  source  {

  ACP = 0 ;
  VCU = 1 ;
}

enum  vDHStatusType  {

  VDHStatus_Unknown = 0 ;
  VDHStatus_Waiting = 1 ;
  VDHStatus_Success = 2 ;
  VDHStatus_Failure = 3 ;
  VDHStatus_MaxAged = 4 ;
}


//**********************
//Interface ID: 32 iVDHRemoteFileAccess
//**********************

//Method 3201 GetFileCommand
//--------------------------------------
message  GetFileCommand_request_response  {

  optional	 fileCommand	 FileCommand = 1 ;
  optional	 string	 FilePath = 2 ;
}

message  GetFileCommand_response  {

  optional	 responseStatus	 ResponseStatus = 1 ;
  optional	 string	 FileTimeStamp = 2 ;
  optional	 uint64	 FileSize = 4 ;
}

//Method 3202 RequestFileBytes
//--------------------------------------
message  RequestFileBytes_request_response  {

  optional	 string	 FilePath = 1 ;
  optional	 uint64	 StartByte = 2 ;
  optional	 uint64	 Length = 3 ;
  optional	 rFB_Mode	 RFB_Mode = 4 ;
}

message  RequestFileBytes_response  {

  optional	 bytes	 ResponsePayload = 1 ;
  optional	 rFB_ResponseStatus	 RFB_ResponseStatus = 2 ;
}

//Property 3203 MaxFileReadByteLength
//--------------------------------------
message  MaxFileReadByteLength_status  {

  optional	 uint32	 MaxFileReadByteLength = 1 ;
}

//Property 3204 MaxNumOpenFiles
//--------------------------------------
message  MaxNumOpenFiles_status  {

  optional	 uint32	 MaxNumOpenFiles = 1 ;
}

enum  fileCommand  {

  GFC_ReadOpenFile = 0 ;
  GFC_CloseFile = 1 ;
  GFC_CloseAll = 2 ;
  GFC_CloseDoneSentSuccessful = 3 ;
  GFC_CloseDoneNotSent = 4 ;
  GFC_FileAccess = 5 ;
}

enum  responseStatus  {

  GFC_Exists = 0 ;
  GFC_NotExists = 1 ;
  GFC_Success = 5 ;
  GFC_StatusNotAvailable = 6 ;
  GFC_Failed_NoAvailFileHandles = 7 ;
}

enum  rFB_Mode  {

  RFB_Bytes = 0 ;
  RFB_Hash = 1 ;
}

enum  rFB_ResponseStatus  {

  RFB_Success = 0 ;
  RFB_SuccessEndoftheFile = 1 ;
  RFB_Fail = 2 ;
  RFB_FileClosed = 3 ;
  RFB_AllFilesClosed = 4 ;
  RFB_Busy = 5 ;
  RFB_NoMoreHandles = 6 ;
  RFB_FileNotOpen = 7 ;
  RFB_FileNotLocked = 8 ;
  RFB_ModeNotSupported = 9 ;
}


//**********************
//Interface ID: 33 iVDHControlParameter
//**********************

//Method 3301 VDHControlParameter
//--------------------------------------
message  VDHControlParameter_request_response  {

  optional	 uint64	 cmdID = 1 ;
  optional	 bytes	 cmdParameters = 2 ;
  optional	 uint64	 cmdTrackingID = 3 ;
  optional	 uint64	 DestinationID = 4 ;
}

message  VDHControlParameter_response  {

  optional	 uint64	 cmdID = 1 ;
  optional	 string	 ResultCode = 2 ;
  optional	 uint64	 cmdTrackingID = 3 ;
  optional	 uint64	 DestinationID = 4 ;
}


//**********************
//Interface ID: 34 iRemoteNavigation
//**********************

//Method 3401 RSIViewVehicleRoute
//--------------------------------------
message  RSIViewVehicleRoute_request  {

}

//Method 3402 FPIViewVehicleRoute
//--------------------------------------
message  FPIViewVehicleRoute_request  {

}

//Method 3403 RSISendDestinationToDriver1
//--------------------------------------
message  RSISendDestinationToDriver1_request_response  {

  optional	 string	 RSI1_DestinationID = 1[default = "DEFAULT"];
  optional	 navDefaultStringTranslationType	 RSI1_DestinationName = 2 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationStreetPrefix = 3 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationStreetName = 4 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationStreetType = 5 ;
  optional	 navDefaultStringTranslationType	 RSI1_CrossStreetPrefix = 6 ;
  optional	 navDefaultStringTranslationType	 RSI1_CrossStreetName = 7 ;
  optional	 navDefaultStringTranslationType	 RSI1_CrossStreetType = 8 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationCityName = 9 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationStateProvince = 10 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationPostalCode = 11 ;
  optional	 navDefaultStringTranslationType	 RSI1_DestinationCountry = 12 ;
  optional	 string	 RSI1_DestinationLongitude = 13[default = "DEFAULT"];
  optional	 string	 RSI1_DestinationLatitude = 14[default = "DEFAULT"];
  optional	 string	 RSI1_DestinationPhoneNumber = 15[default = "DEFAULT"];
  optional	 string	 RSI1_DestinationAddressNumber = 16[default = "DEFAULT"];
}

message  RSISendDestinationToDriver1_response  {

  optional	 bool	 DestinationStatusDriver1 = 1 ;
}

//Method 3404 RSISendDestinationToDriver2
//--------------------------------------
message  RSISendDestinationToDriver2_request_response  {

  optional	 string	 RSI2_DestinationID = 1[default = "DEFAULT"];
  optional	 navDefaultStringTranslationType	 RSI2_DestinationName = 2 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationStreetPrefix = 3 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationStreetName = 4 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationStreetType = 5 ;
  optional	 navDefaultStringTranslationType	 RSI2_CrossStreetPrefix = 6 ;
  optional	 navDefaultStringTranslationType	 RSI2_CrossStreetName = 7 ;
  optional	 navDefaultStringTranslationType	 RSI2_CrossStreetType = 8 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationCityName = 9 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationStateProvince = 10 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationPostalCode = 11 ;
  optional	 navDefaultStringTranslationType	 RSI2_DestinationCountry = 12 ;
  optional	 string	 RSI2_DestinationLongitude = 13[default = "DEFAULT"];
  optional	 string	 RSI2_DestinationLatitude = 14[default = "DEFAULT"];
  optional	 string	 RSI2_DestinationPhoneNumber = 15[default = "DEFAULT"];
  optional	 string	 RSI2_DestinationAddressNumber = 16[default = "DEFAULT"];
}

message  RSISendDestinationToDriver2_response  {

  optional	 bool	 DestinationStatusDriver2 = 1 ;
}

//Method 3405 FPISendDestinationToDriver
//--------------------------------------
message  FPISendDestinationToDriver_request_response  {

  optional	 string	 FPI_DestinationID = 1[default = "DEFAULT"];
  optional	 navDefaultStringTranslationType	 FPI_DestinationName = 2 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationStreetPrefix = 3 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationStreetName = 4 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationStreetType = 5 ;
  optional	 navDefaultStringTranslationType	 FPI_CrossStreetPrefix = 6 ;
  optional	 navDefaultStringTranslationType	 FPI_CrossStreetName = 7 ;
  optional	 navDefaultStringTranslationType	 FPI_CrossStreetType = 8 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationCityName = 9 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationStateProvince = 10 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationPostalCode = 11 ;
  optional	 navDefaultStringTranslationType	 FPI_DestinationCountry = 12 ;
  optional	 string	 FPI_DestinationLongitude = 13[default = "DEFAULT"];
  optional	 string	 FPI_DestinationLatitude = 14[default = "DEFAULT"];
  optional	 string	 FPI_DestinationPhoneNumber = 15[default = "DEFAULT"];
  optional	 string	 FPI_DestinationAddressNumber = 16[default = "DEFAULT"];
}

message  FPISendDestinationToDriver_response  {

  optional	 bool	 DestinationStatusDriver = 1 ;
}


//**********************
//Interface ID: 35 iSoftAppRemote
//**********************

//Event 3501 SoftAppRemoteStatus
//--------------------------------------
message  SoftAppRemoteStatus_event  {

  optional	 softAppRemoteDisplayType	 SoftAppRemoteDisplayType = 1 ;
  optional	 softAppRemoteCommand	 SoftAppRemoteCommand = 2 ;
}

enum  softAppRemoteDisplayType  {

  SoftAppRemoteDisplayType_None = 0 ;
  SoftAppRemoteDisplayType_RSI_DisplayRightRear = 1 ;
  SoftAppRemoteDisplayType_RSI_DisplayLeftRear = 2 ;
  SoftAppRemoteDisplayType_FPI_Display = 3 ;
}

enum  softAppRemoteCommand  {

  SoftAppRemoteCommand_None = 0 ;
  SoftAppRemoteCommand_VolUp = 1 ;
  SoftAppRemoteCommand_VolDown = 2 ;
  SoftAppRemoteCommand_GoToHome = 3 ;
  SoftAppRemoteCommand_GoToBack = 4 ;
  SoftAppRemoteCommand_PowerToggle = 5 ;
  SoftAppRemoteCommand_GoUp = 6 ;
  SoftAppRemoteCommand_GoDown = 7 ;
  SoftAppRemoteCommand_GoLeft = 8 ;
  SoftAppRemoteCommand_GoRight = 9 ;
  SoftAppRemoteCommand_OK = 10 ;
}


//**********************
//Interface ID: 36 iVDHDRDFunctions
//**********************

//Method 3601 ServerQuery
//--------------------------------------
message  ServerQuery_request_response  {

  optional	 uint64	 package_ID = 1 ;
  optional	 string	 Query_URL = 2 ;
  optional	 bytes	 ServerQuery_blob = 3 ;
}

message  ServerQuery_response  {

  optional	 uint64	 package_ID = 1 ;
  optional	 dRD_QueryStatus	 DRD_QueryStatus = 2 ;
  optional	 string	 DRD_QueryFailureReason = 3 ;
  optional	 bytes	 ServerQuery_blob = 4 ;
}

//Method 3602 AcquireSoftResource
//--------------------------------------
message  AcquireSoftResource_request_response  {

  optional	 string	 ResourceID = 1 ;
  optional	 string	 Resource_URL = 2 ;
  optional	 string	 Destination = 3 ;
  optional	 bytes	 Priority = 4 ;
}

message  AcquireSoftResource_response  {

  optional	 ack	 Ack = 1 ;
}

//Method 3603 CancelRetrieveResource
//--------------------------------------
message  CancelRetrieveResource_request_response  {

  optional	 string	 ResourceID = 1 ;
}

message  CancelRetrieveResource_response  {

  optional	 ack	 Ack = 1 ;
}

//Method 3604 DownloadedSoftwareResourceComplete
//--------------------------------------
message  DownloadedSoftwareResourceComplete_request_response  {

  optional	 string	 ResourceID = 1 ;
  optional	 bytes	 DownloadedSoftwareResourceComplete_blob = 2 ;
  optional	 string	 DSRC_ReportURL = 3 ;
}

message  DownloadedSoftwareResourceComplete_response  {

  optional	 ack	 Ack = 1 ;
}

//Event 3605 AcquireSoftResourceStatus
//--------------------------------------
message  AcquireSoftResourceStatus_event  {

  optional	 string	 ResourceID = 1 ;
  optional	 string	 Destination = 2 ;
  optional	 string	 CGMServer_FileName = 3 ;
  optional	 aSRS_Status	 ASRS_Status = 4 ;
}

enum  dRD_QueryStatus  {

  SQ_Unknown = 0 ;
  SQ_Success = 1 ;
  SQ_Failed = 2 ;
}

enum  ack  {

  ASR_Unknown = 0 ;
  ASR_InTheQueue = 1 ;
  ASR_RequestRejected = 2 ;
}

enum  aSRS_Status  {

  ASRS_Unknown = 0 ;
  ASRS_Queued = 1 ;
  ASRS_Downloading = 2 ;
  ASRS_FileAvail = 3 ;
  ASRS_Failed_RequestRejectedQueueFull = 4 ;
  ASRS_Failed = 5 ;
}


//**********************
//Interface ID: 40 iUltraCruiseDisplay
//**********************

//Method 4020 Accepted_AD_Screen_Name
//--------------------------------------
message  Accepted_AD_Screen_Name_request_response  {

  optional	 string	 Accepted_AD_Screen_Name = 1 ;
}

message  Accepted_AD_Screen_Name_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Method 4021 AD_Trip_Reset
//--------------------------------------
message  AD_Trip_Reset_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Method 4030 SensorAlignmentButton
//--------------------------------------
message  SensorAlignmentButton_request  {

  optional	 bool	 SensorAlignmentButtonState = 1 ;
}

//Method 4031 SpeedLimitOffsetResetSwitch
//--------------------------------------
message  SpeedLimitOffsetResetSwitch_request  {

  optional	 bool	 SpeedLimitOffsetResetSwitchState = 1 ;
}

//Property 4001 DisplayView
//--------------------------------------
message  DisplayView_status  {

  optional	 displayView	 DisplayView = 1 ;
  optional	 string	 Timestamp = 2 ;
  optional	 uint32	 rearOffset = 3 ;
  optional	 uint32	 zOffset = 4 ;
  optional	 uint32	 pitch = 5 ;
  optional	 uint32	 hostAngleOffset = 6 ;
  optional	 uint32	 focalLength = 7 ;
  optional	 uint32	 sensorSize = 8 ;
  optional	 uint32	 SensorFit = 9 ;
  optional	 uint32	 FadeRightDistance = 10 ;
  optional	 uint32	 FadeLeftDistance = 11 ;
  optional	 uint32	 FadeBackDistance = 12 ;
  optional	 uint32	 FadeFrontDistance = 13 ;
}

//Property 4004 UCSpeed
//--------------------------------------
message  UCSpeed_status  {

  optional	 float	 SpeedOffset = 1 ;
  optional	 float	 SpeedLimit = 3 ;
  optional	 float	 SetSpeed = 4 ;
  optional	 int32	 AccelerationDecelerationRate = 5 ;
  optional	 string	 Timestamp = 6 ;
}

//Property 4005 AnticipatedSpeed
//--------------------------------------
message  AnticipatedSpeed_status  {

  optional	 float	 AnticipatedSpeed = 1 ;
  optional	 float	 TargetSpeed = 2 ;
  optional	 string	 Timestamp = 3 ;
}

//Property 4006 TrafficSign
//--------------------------------------
message  TrafficSign_status  {

  optional	 trafficSignType	 TrafficSignType = 1 ;
  optional	 uint32	 Distance = 2 ;
  optional	 string	 Timestamp = 3 ;
  optional	 bool	 ShowTCDBubble = 4 ;
}

//Property 4007 TrafficLight
//--------------------------------------
message  TrafficLight_status  {

  optional	 trafficLightType	 TrafficLightType = 1 ;
  optional	 uint32	 Distance = 2 ;
  optional	 string	 Timestamp = 3 ;
  optional	 bool	 ShowTCDBubble = 4 ;
}

//Property 4009 ActiveLane
//--------------------------------------
message  ActiveLane_status  {

  optional	 uint64	 ID = 1 ;
  optional	 bool	 Active = 2 ;
  optional	 string	 Timestamp = 3 ;
}

//Property 4010 Host
//--------------------------------------
message  Host_status  {

  optional	 pointType	 Position = 1 ;
  optional	 float	 OrientationNew = 3 ;
  optional	 halo	 Halo = 4 ;
  optional	 hostBrakeLights	 HostBrakeLights = 5 ;
  optional	 hostTurnSignal	 HostTurnSignal = 6 ;
  optional	 hostHeadlights	 HostHeadlights = 7 ;
  optional	 hostReverseLights	 HostReverseLights = 8 ;
  optional	 hostHazardVehicles	 HostHazardVehicles = 9 ;
  optional	 string	 Timestamp = 10 ;
  optional	 uint32	 BulbOnTime = 11 ;
  optional	 uint32	 BulbOffTime = 12 ;
}

//Property 4012 ActiveActors
//--------------------------------------
message  ActiveActors_status  {

  repeated	 activeActors	 ActiveActors = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4013 LaneChange
//--------------------------------------
message  LaneChange_status  {

  optional	 laneChangeState	 LaneChangeState = 1 ;
  optional	 laneChangeType	 LaneChangeType = 2 ;
  optional	 laneChangeDirection	 LaneChangeDirection = 3 ;
  optional	 string	 Timestamp = 4 ;
  optional	 uint64	 TargetLaneID = 5 ;
}

//Property 4014 UCState
//--------------------------------------
message  UCState_status  {

  optional	 uC_State	 UC_State = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4016 Trip_Time_in_AD
//--------------------------------------
message  Trip_Time_in_AD_status  {

  optional	 uint32	 Trip_Time_in_AD = 1 ;
}

//Property 4018 Trip_Percent_Utilization
//--------------------------------------
message  Trip_Percent_Utilization_status  {

  optional	 float	 Trip_Percent_Utilization = 1 ;
}

//Property 4019 Stored_AD_Screen_Name
//--------------------------------------
message  Stored_AD_Screen_Name_status  {

  optional	 string	 Stored_AD_Screen_Name = 1 ;
}

//Property 4022 Fencing
//--------------------------------------
message  Fencing_status  {

  repeated	 fence	 Fence = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4023 ADSensorStatusGroup
//--------------------------------------
message  ADSensorStatusGroup_status  {

  optional	 uCSensorStatusType	 Front_Windshield_Header = 1 ;
  optional	 uCSensorStatusType	 Front_Center = 2 ;
  optional	 uCSensorStatusType	 Front_DRIVER_Corner = 3 ;
  optional	 uCSensorStatusType	 Front_PASSENGER_Corner = 4 ;
  optional	 uCSensorStatusType	 Side_Mirror_DRIVER = 5 ;
  optional	 uCSensorStatusType	 Side_Mirror_PASSENGER = 6 ;
  optional	 uCSensorStatusType	 Rear_CHMSL = 7 ;
  optional	 uCSensorStatusType	 Rear_Center = 8 ;
  optional	 uCSensorStatusType	 Rear_DRIVER_Corner = 9 ;
  optional	 uCSensorStatusType	 Rear_PASSENGER_Corner = 10 ;
  optional	 uCSensorStatusType	 DRIVER_B_Pillar = 11 ;
  optional	 uCSensorStatusType	 PASSENGER_B_Pillar = 12 ;
  optional	 uCSensorStatusType	 DRIVER_C_Pillar = 13 ;
  optional	 uCSensorStatusType	 PASSENGER_C_Pillar = 14 ;
}

//Property 4024 Uncategorized_Object
//--------------------------------------
message  Uncategorized_Object_status  {

  repeated	 uncategorized_Object	 Uncategorized_Object = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4025 LaneSegment_v2
//--------------------------------------
message  LaneSegment_v2_status  {

  repeated	 laneSegmentData	 LaneSegmentData = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4026 RemovedLaneSegments_v2
//--------------------------------------
message  RemovedLaneSegments_v2_status  {

  repeated	 uint64	 RemovedIDs = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4027 VehiclePath_v2
//--------------------------------------
message  VehiclePath_v2_status  {

  repeated	 pointType	 TrajectoryPoints = 1 ;
}

//Property 4028 Actors_v2
//--------------------------------------
message  Actors_v2_status  {

  repeated	 position	 Position = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4029 TrafficControlBars
//--------------------------------------
message  TrafficControlBars_status  {

  repeated	 tCBs	 TCBs = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4032 Trip_KM_in_AD
//--------------------------------------
message  Trip_KM_in_AD_status  {

  optional	 float	 Trip_KM_in_AD = 1 ;
}

//Property 4033 RoadMarkings
//--------------------------------------
message  RoadMarkings_status  {

  repeated	 roadMarking	 RoadMarking = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4034 RoadSegmentData
//--------------------------------------
message  RoadSegmentData_status  {

  repeated	 roadSegmentData	 RoadSegmentData = 1 ;
  optional	 string	 Timestamp = 2 ;
}

enum  displayView  {

  VIEW_1 = 0 ;
  VIEW_2 = 1 ;
  VIEW_3 = 2 ;
  VIEW_4 = 3 ;
}

enum  trafficSignType  {

  NO_SIGN = 0 ;
  STOP = 1 ;
  STOP_GRAYED = 2 ;
  YEILD = 3 ;
  YIELD_GRAYED = 4 ;
  CROSSWALK = 5 ;
  CROSSWALK_GRAYED = 6 ;
  RAILROAD = 7 ;
  RAILROAD_GRAYED = 8 ;
  SCHOOL_ZONE = 9 ;
  SCHOOL_ZONE_GRAYED = 10 ;
  SPEED_BUMP = 11 ;
  SPEED_BUMP_GRAYED = 12 ;
  ROAD_WORK_AHEAD = 13 ;
  ROAD_WORK_AHEAD_GRAYED = 14 ;
  FLAGGER_AHEAD = 15 ;
  FLAGGER_AHEAD_GRAYED = 16 ;
  DETOUR = 17 ;
  DETOUR_GRAYED = 18 ;
  EXIT_CLOSED = 19 ;
  EXIT_CLOSED_GRAYED = 20 ;
}

enum  trafficLightType  {

  TL_NO_SIGN = 0 ;
  GRAYED = 1 ;
  RED = 2 ;
  YELLOW = 3 ;
  GREEN = 4 ;
  GREEN_RIGHT = 5 ;
  GREEN_LEFT = 6 ;
  RED_RIGHT = 7 ;
  RED_LEFT = 8 ;
  YELLOW_LEFT = 9 ;
  YELLOW_RIGHT = 10 ;
  FLASHING_RED = 11 ;
  FLASHING_YELLOW = 12 ;
  FLASHING_GREEN_RIGHT = 13 ;
  FLASHING_GREEN_LEFT = 14 ;
  FLASHING_RED_RIGHT = 15 ;
  FLASHING_RED_LEFT = 16 ;
  FLASHING_YELLOW_LEFT = 17 ;
  FLASHING_YELLOW_RIGHT = 18 ;
}

message  pointType  {

  optional	 float	 PointX = 1 ;
  optional	 float	 PointY = 2 ;
}

enum  halo  {

  Halo_Disabled = 0 ;
  Enabled_type_1 = 1 ;
  Enabled_type_2 = 2 ;
}

enum  hostBrakeLights  {

  HOST_BRAKE_LIGHTS_Off = 0 ;
  HOST_BRAKE_LIGHTS_On = 1 ;
}

enum  hostTurnSignal  {

  HOST_TURN_SIGNAL_Off = 0 ;
  HOST_TURN_SIGNAL_Right = 1 ;
  HOST_TURN_SIGNAL_Left = 2 ;
}

enum  hostHeadlights  {

  HOST_HEADLIGHTS_Off = 0 ;
  HOST_HEADLIGHTS_On = 1 ;
}

enum  hostReverseLights  {

  HOST_REVERSE_LIGHTS_Off = 0 ;
  HOST_REVERSE_LIGHTS_On = 1 ;
}

enum  hostHazardVehicles  {

  HOST_HAZARD_VEHICLES_Off = 0 ;
  HOST_HAZARD_VEHICLES_On = 1 ;
}

message  activeActors  {

  optional	 uint64	 ActiveActorID = 1 ;
  optional	 bool	 IsInfluencingPath = 2 ;
}

enum  laneChangeState  {

  LOOKING_FOR_OPENING = 0 ;
  OPENING_IDENTIFIED = 1 ;
  PREPARING_TO_CHANGE_LANES = 2 ;
  CHANGING_LANES = 3 ;
  LANE_CHANGE_COMPLETED = 4 ;
  THREAT_IDENTIFIED_IN_TARGET_LANE = 5 ;
  TIME_OUT = 6 ;
  CANCELED = 7 ;
}

enum  laneChangeType  {

  LANE_CHANGE_FOR_TIME = 0 ;
  LANE_CHANGE_FOR_ROUTE = 1 ;
  LANE_CHANGE_ON_DEMAND = 2 ;
  NO_LANE_CHANGE = 3 ;
}

enum  laneChangeDirection  {

  RIGHT = 0 ;
  LEFT = 1 ;
}

enum  uC_State  {

  UC_DISABLE = 0 ;
  UC_ENABLE = 1 ;
  UC_ACTIVE = 2 ;
  UC_LATERAL_OVERRIDE = 4 ;
  UC_LONGITUDINAL_OVERRIDE = 5 ;
  UC_ESCALATION1 = 6 ;
  UC_ESCALATION2 = 7 ;
  UC_ESCALATION3 = 8 ;
  UC_ESCALATION4 = 9 ;
}

message  leftFence  {

  optional	 float	 XCoord = 1 ;
  optional	 float	 YCoord = 2 ;
}

message  rightFence  {

  optional	 float	 XCoord = 1 ;
  optional	 float	 YCoord = 2 ;
}

enum  pointColorType  {

  PC_UNSPECIFIED = 0 ;
  PC_WHITE = 1 ;
  PC_YELLOW = 2 ;
  PC_RED = 3 ;
  PC_GREEN = 4 ;
  PC_BLUE = 5 ;
}

message  fence  {

  repeated	 leftFence	 LeftFence = 1 ;
  repeated	 rightFence	 RightFence = 2 ;
  optional	 pointColorType	 Color = 3 ;
}

enum  uCSensorStatusType  {

  NORMAL = 0 ;
  BLOCKED = 1 ;
  MALFUNCTIONED = 2 ;
  ALIGNING = 3 ;
  CLEANING = 4 ;
  INITIALIZING = 5 ;
  BLOCKED_ENVIRONMENTAL = 6 ;
  OUTSIDE_OPERATIONAL_RANGE = 7 ;
  MISALIGNED_USER_CAN_ALIGN = 8 ;
  MISALIGNED_USER_CANNOT_ALIGN = 9 ;
}

message  uncategorized_Object  {

  optional	 pointType	 bottom_left_corner = 1 ;
  optional	 pointType	 bottom_right_corner = 2 ;
  optional	 pointType	 top_left_corner = 3 ;
  optional	 pointType	 top_right_corner = 4 ;
  optional	 float	 height_float = 6 ;
  optional	 bool	 Active = 7 ;
}

enum  laneMarkerTypeNew  {

  LMT_UNSPECIFIED = 0 ;
  LMT_SINGLE_SOLID = 1 ;
  LMT_SINGLE_DASHED = 2 ;
  LMT_DOUBLE_SOLID = 3 ;
  LMT_RIGHT_SOLID_LEFT_DASHED = 4 ;
  LMT_RIGHT_DASHED_LEFT_SOLID = 5 ;
  LMT_DOUBLE_DASHED = 6 ;
  LMT_ROAD_EDGE = 7 ;
  LMT_BARRIER = 8 ;
  LMT_DRIVEWAY_EDGE = 9 ;
  LMT_NONE = 10 ;
}

enum  laneMarkerColor  {

  LANE_MARKER_UNSPECIFIED = 0 ;
  LANE_MARKER_WHITE = 1 ;
  LANE_MARKER_GRAY = 2 ;
  LANE_MARKER_YELLOW = 3 ;
}

message  laneBoundaryTypeNew  {

  repeated	 pointType	 LanePoints = 2 ;
  optional	 laneMarkerTypeNew	 LaneMarkerTypeNew = 3 ;
  optional	 laneMarkerColor	 LaneMarkerColor = 4 ;
  optional	 float	 LaneMarkerOffset = 5 ;
}

enum  directionType  {

  MOVING_DIRECTION_UNSPECIFIED = 0 ;
  MOVING_DIRECTION_ADJACENT_OR_SAME_DIRECTION = 1 ;
  MOVING_DIRECTION_OPPOSING = 2 ;
  MOVING_DIRECTION_CENTER_LANE = 3 ;
}

message  adjacentLaneType  {

  optional	 uint64	 ID = 1 ;
  optional	 directionType	 LaneDirection = 2 ;
}

message  laneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 LeftBoundary = 3 ;
  repeated	 laneBoundaryTypeNew	 RightBoundary = 4 ;
  optional	 adjacentLaneType	 LeftLaneID = 5 ;
  optional	 adjacentLaneType	 RightLaneID = 6 ;
  repeated	 uint64	 DownstreamLanesIDs = 7 ;
}

enum  actorType  {

  ACTOR_TYPE_Pedestrian1 = 0 ;
  ACTOR_TYPE_Pedestrian2 = 1 ;
  ACTOR_TYPE_Animal1 = 2 ;
  ACTOR_TYPE_Animal2 = 3 ;
  ACTOR_TYPE_Bicycle = 4 ;
  ACTOR_TYPE_Motorcycle1 = 5 ;
  ACTOR_TYPE_Motorcycle2 = 6 ;
  ACTOR_TYPE_Car1 = 7 ;
  ACTOR_TYPE_Car2 = 8 ;
  ACTOR_TYPE_SUV1 = 9 ;
  ACTOR_TYPE_SUV2 = 10 ;
  ACTOR_TYPE_Truck1 = 11 ;
  ACTOR_TYPE_Truck2 = 12 ;
  ACTOR_TYPE_Truck3 = 13 ;
  ACTOR_TYPE_Truck4 = 14 ;
  ACTOR_TYPE_Truck5 = 15 ;
  ACTOR_TYPE_Bus = 16 ;
  ACTOR_TYPE_Emergency1 = 17 ;
  ACTOR_TYPE_Emergency2 = 18 ;
  ACTOR_TYPE_Emergency3 = 19 ;
  ACTOR_TYPE_TrafficCones = 20 ;
  ACTOR_TYPE_ConstructionBarrels = 21 ;
  ACTOR_TYPE_TrashCans = 22 ;
}

enum  actorBrakeLights  {

  ACTOR_BRAKE_LIGHTS_Off = 0 ;
  ACTOR_BRAKE_LIGHTS_On = 1 ;
}

enum  actorTurnSignal  {

  ACTOR_TURN_SIGNAL_Off = 0 ;
  ACTOR_TURN_SIGNAL_Right = 1 ;
  ACTOR_TURN_SIGNAL_Left = 3 ;
}

enum  actorHeadlights  {

  ACTOR_HEADLIGHTS_Off = 0 ;
  ACTOR_HEADLIGHTS_On = 1 ;
}

enum  actorReverseLights  {

  ACTOR_REVERSE_LIGHTS_Off = 0 ;
  ACTOR_REVERSE_LIGHTS_On = 1 ;
}

enum  actorHazardVehicles  {

  ACTOR_HAZARD_VEHICLES_Off = 0 ;
  ACTOR_HAZARD_VEHICLES_On = 1 ;
}

message  position  {

  optional	 uint64	 ID = 1 ;
  optional	 pointType	 PositionPoint = 3 ;
  optional	 uint64	 LaneAssociation = 4 ;
  optional	 float	 Orientation = 5 ;
  optional	 actorType	 ActorType = 6 ;
  optional	 bool	 StaticActor = 7 ;
  optional	 actorBrakeLights	 ActorBrakeLights = 8 ;
  optional	 actorTurnSignal	 ActorTurnSignal = 9 ;
  optional	 actorHeadlights	 ActorHeadlights = 10 ;
  optional	 actorReverseLights	 ActorReverseLights = 11 ;
  optional	 actorHazardVehicles	 ActorHazardVehicles = 12 ;
}

message  tCBs  {

  optional	 uint64	 ID = 1 ;
  optional	 pointType	 Start = 2 ;
  optional	 pointType	 End = 3 ;
  optional	 float	 Orientation = 4 ;
  optional	 float	 TCBWidth = 5 ;
  optional	 pointType	 StoppingPoint = 6 ;
}

message  roadMarkingCoords  {

  optional	 float	 XCoord = 1 ;
  optional	 float	 YCoord = 2 ;
}

enum  roadMarkingType  {

  ROAD_MARKING_TYPE_None = 0 ;
  ROAD_MARKING_TYPE_Crosswalk = 1 ;
  ROAD_MARKING_TYPE_SchoolCrossing = 2 ;
  ROAD_MARKING_TYPE_RailroadCrossing = 3 ;
  ROAD_MARKING_TYPE_SpeedBump = 4 ;
}

enum  roadMarkingColor  {

  ROAD_MARKING_COLOR_White = 0 ;
  ROAD_MARKING_COLOR_Grey = 1 ;
  ROAD_MARKING_COLOR_Yellow = 2 ;
}

message  roadMarking  {

  repeated	 roadMarkingCoords	 RoadMarkingCoords = 1 ;
  optional	 roadMarkingType	 RoadMarkingType = 2 ;
  optional	 roadMarkingColor	 RoadMarkingColor = 3 ;
}

enum  roadEdgeType  {

  ROAD_EDGE_TYPE_UNSPECIFIED = 0 ;
  ROAD_EDGE = 1 ;
  ROAD_EDGE_BARRIER = 2 ;
  ROAD_EDGE_DRIVEWAY_EDGE = 3 ;
  ROAD_EDGE_CURB = 4 ;
  ROAD_EDGE_NONE = 5 ;
}

enum  roadEdgeColor  {

  ROAD_EDGE_COLOR_UNSPECIFIED = 0 ;
  ROAD_EDGE_WHITE = 1 ;
  ROAD_EDGE_GRAY = 2 ;
  ROAD_EDGE_YELLOW = 3 ;
}

message  roadBoundaryType  {

  repeated	 pointType	 RoadPoints = 2 ;
  optional	 roadEdgeType	 RoadEdgeType = 3 ;
  optional	 roadEdgeColor	 RoadEdgeColor = 4 ;
  optional	 float	 RoadMarkerOffset = 5 ;
}

message  adjacentRoadType  {

  optional	 uint64	 ID = 1 ;
  optional	 directionType	 RoadDirection = 2 ;
}

message  roadSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 roadBoundaryType	 LeftBoundary = 3 ;
  repeated	 roadBoundaryType	 RightBoundary = 4 ;
  optional	 adjacentRoadType	 LeftRoadD = 5 ;
  optional	 adjacentRoadType	 RightRoadID = 6 ;
  optional	 bool	 IntersectionFlag = 7 ;
}


//**********************
//Interface ID: 41 iUltraCruisePreference
//**********************

//Method 4102 PreferenceChange
//--------------------------------------
message  PreferenceChange_request_response  {

  optional	 ultraCruisePreferenceType	 PreferenceType = 1 ;
  optional	 uint32	 PreferenceValue = 2 ;
  optional	 uint32	 DriverID = 3 ;
}

message  PreferenceChange_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Method 4103 RestorePreferenceFactoryDefault
//--------------------------------------
message  RestorePreferenceFactoryDefault_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Property 4101 PreferenceList
//--------------------------------------
message  PreferenceList_status  {

  repeated	 preferencList	 PreferencList = 1 ;
}

enum  ultraCruisePreferenceType  {

  AUTOMATED_DRIVING_STYLE = 0 ;
  LANE_CHANGE_FREQUENCY = 2 ;
  OPEN_LANE_DECELERATION = 3 ;
  OPEN_LANE_ACCELERATION = 4 ;
  SPEED_TROUGH_TURN = 5 ;
  ALERT_LEVEL = 7 ;
  SPEED_LIMIT_OFFSET = 8 ;
  STATISTICS_SHARED = 9 ;
  AUTO_LANE_CHANGE_FOR_FASTER_ROUTE = 10 ;
  CARPOOL_LANE_SETTINGS = 11 ;
  TOLL_PREFERENCE_SETTINGS = 12 ;
  DRIVEWAY_ENTRY_SETTINGS = 13 ;
  UC_REQUEST_ON_ROUTE = 14 ;
  LANE_MERGE = 15 ;
  AD_FEATURE_CUSTOMIZATION = 16 ;
  HNP_CRUISE_SPEED_OFFSET_SETTINGS = 17 ;
  HNP_CRUISE_SPEED_OFFSET_FIXEDSPEED = 18 ;
  HNP_CRUISE_SPEED_OFFSET_PERCENTAGE = 19 ;
  CP_CRUISE_SPEED_OFFSET_SWITCH = 20 ;
  CP_CRUISE_SPEED_OFFSET_SETTINGS = 21 ;
  CP_CRUISE_SPEED_OFFSET_FIXEDSPEED = 22 ;
  CP_CRUISE_SPEED_OFFSET_PERCENTAGE = 23 ;
  SPEED_THROUGH_TURN = 24 ;
  AUTOMATED_SENSOR_CLEAN_SWITCH_STATE = 25 ;
  DATA_COLLECTION_AUTHORIZATION = 26 ;
  RESERVE_SETTING_2 = 27 ;
  RESERVE_SETTING_3 = 28 ;
  RESERVE_SETTING_4 = 29 ;
  RESERVE_SETTING_5 = 30 ;
  RESERVE_SETTING_6 = 31 ;
  RESERVE_SETTING_7 = 32 ;
  RESERVE_SETTING_8 = 33 ;
  RESERVE_SETTING_9 = 34 ;
  RESERVE_SETTING_10 = 35 ;
}

message  preferencList  {

  optional	 ultraCruisePreferenceType	 PreferenceType = 1 ;
  repeated	 uint32	 AvailableValues = 2 ;
  optional	 uint32	 SelectedValues = 3 ;
}


//**********************
//Interface ID: 42 iUltraCruiseActivation
//**********************

//Method 4201 ActivateUltraCruise
//--------------------------------------
message  ActivateUltraCruise_response  {

  optional	 bool	 Confirmation = 1 ;
}


//**********************
//Interface ID: 43 iAutomatedDrivingVideo
//**********************

//Method 4301 ADVGetChapterList
//--------------------------------------
message  ADVGetChapterList_request_response  {

  optional	 string	 Locale = 1 ;
}

message  ADVGetChapterList_response  {

  repeated	 aDVGetChapterListData	 ADVGetChapterListData = 1 ;
}

//Method 4302 ADVGetPlayConfiguration
//--------------------------------------
message  ADVGetPlayConfiguration_request_response  {

  optional	 string	 PlayConfigurationFile = 1 ;
}

message  ADVGetPlayConfiguration_response  {

  optional	 bytes	 JSONFormatContent = 1 ;
}

//Method 4303 ADVActivateNotification
//--------------------------------------
message  ADVActivateNotification_request_response  {

  repeated	 activateNotificationData	 ActivateNotificationData = 1 ;
}

message  ADVActivateNotification_response  {

  optional	 bool	 Status = 1 ;
}

//Method 4304 ADVNotifyPlaybackStatus
//--------------------------------------
message  ADVNotifyPlaybackStatus_request_response  {

  optional	 playbackStatus	 PlaybackStatus = 1 ;
}

message  ADVNotifyPlaybackStatus_response  {

  optional	 bool	 Status = 1 ;
}

//Method 4305 ADVNotifyChapterWatchStatus
//--------------------------------------
message  ADVNotifyChapterWatchStatus_request_response  {

  optional	 chapterWatchStatusType	 WatchStatus = 1 ;
  optional	 uint32	 ChapterID = 2 ;
}

message  ADVNotifyChapterWatchStatus_response  {

  optional	 bool	 Status = 1 ;
}

enum  chapterWatchStatusType  {

  NOT_WATCH = 0 ;
  WATCHING = 1 ;
  WATCHED = 2 ;
}

message  aDVGetChapterListData  {

  optional	 uint32	 ChapterID = 1 ;
  optional	 string	 ChapterTitle = 2 ;
  optional	 uint32	 ChapterLength = 3 ;
  optional	 chapterWatchStatusType	 ChapterWatchStatus = 4 ;
  optional	 string	 URL = 5 ;
  optional	 string	 ConfigurationFile = 6 ;
}

enum  notificationID  {

  NotifyID_None = 0 ;
  NotifyID_ChimeON = 1 ;
  NotifyID_ChimeOFF = 2 ;
  NotifyID_HapticSeatON = 3 ;
  NotifyID_HapticSeatOFF = 4 ;
  NotifyID_LightBarON = 5 ;
  NotifyID_LightBarOFF = 6 ;
}

enum  lightBarColor  {

  LightBarColor_None = 0 ;
  LightBarColor_Green = 1 ;
  LightBarColor_Amber = 2 ;
  LightBarColor_Red = 3 ;
  LightBarColor_White = 4 ;
  LightBarColor_Blue = 5 ;
}

message  notifyID_LightBarONData  {

  optional	 lightBarColor	 LightBarColor = 1 ;
  optional	 uint32	 LightBarFlashRate = 2 ;
}

message  activateNotificationData  {

  optional	 notificationID	 NotificationID = 1 ;
  optional	 notifyID_LightBarONData	 NotifyID_LightBarONData = 2 ;
}

enum  playbackStatus  {

  PlaybackStatus_Stop = 0 ;
  PlaybackStatus_Play = 1 ;
  PlaybackStatus_Pause = 2 ;
  PlaybackStatus_FastForward = 3 ;
  PlaybackStatus_FastRewind = 4 ;
}


//**********************
//Interface ID: 44 iAutomatedDrivingBugReportButton
//**********************

//Method 4401 DrivingBugReportButtonState
//--------------------------------------
message  DrivingBugReportButtonState_request_response  {

  optional	 bool	 BugReportButtonState = 1 ;
}

message  DrivingBugReportButtonState_response  {

  optional	 bool	 BugReportButtonStateResponse = 1 ;
}

//Property 4402 DrivingBugReportButton
//--------------------------------------
message  DrivingBugReportButton_status  {

  optional	 bugReportButton	 BugReportButton = 1 ;
}

enum  bugReportButton  {

  BugReportButton_NotShown = 0 ;
  BugReportButton_ShownNotSelectable = 1 ;
  BugReportButton_ShownSelectable = 2 ;
}


//**********************
//Interface ID: 45 iADASDisplay
//**********************

//Method 4520 ADAS_Accepted_AD_Screen_Name
//--------------------------------------
message  ADAS_Accepted_AD_Screen_Name_request_response  {

  optional	 string	 Accepted_AD_Screen_Name = 1 ;
}

message  ADAS_Accepted_AD_Screen_Name_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Method 4521 ADAS_AD_Trip_Reset
//--------------------------------------
message  ADAS_AD_Trip_Reset_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Method 4530 ADASSensorAlignmentButton
//--------------------------------------
message  ADASSensorAlignmentButton_request_response  {

  optional	 bool	 SensorAlignmentButtonState = 1 ;
}

message  ADASSensorAlignmentButton_response  {

  optional	 bool	 Confirmation = 1 ;
}

//Method 4531 ADASSpeedLimitOffsetResetSwitch
//--------------------------------------
message  ADASSpeedLimitOffsetResetSwitch_request  {

  optional	 bool	 SpeedLimitOffsetResetSwitchState = 1 ;
}

//Method 4535 ADASAutomatedSensorCleanSwitch
//--------------------------------------
message  ADASAutomatedSensorCleanSwitch_request  {

  optional	 bool	 AutomatedSensorClearnSwitchState = 1 ;
}

//Method 4543 ADASHMIFeatureDebug
//--------------------------------------
message  ADASHMIFeatureDebug_request_response  {

  optional	 googleTimeStamp	 ADAS_DebugTimeStamp = 1 ;
}

message  ADASHMIFeatureDebug_response  {

  optional	 bytes	 ADAS_DebugInfo = 1 ;
}

//Method 4544 ADASNaviSoftSwitch
//--------------------------------------
message  ADASNaviSoftSwitch_request_response  {

  optional	 aDAS_NaviFeatureBarOptionRequest	 ADAS_NaviFeatureBarOptionRequest = 1 ;
}

message  ADASNaviSoftSwitch_response  {

  optional	 bool	 NaviFeatureBarOptionConfirm = 1 ;
}

//Property 4501 ADASDisplayView
//--------------------------------------
message  ADASDisplayView_status  {

  optional	 aDASDisplayView	 ADASDisplayView = 1 ;
  optional	 string	 Timestamp = 2 ;
  optional	 float	 rearOffset = 3 ;
  optional	 float	 zOffset = 4 ;
  optional	 float	 pitch = 5 ;
  optional	 float	 hostAngleOffset = 6 ;
  optional	 float	 focalLength = 7 ;
  optional	 float	 sensorSize = 8 ;
  optional	 aDASSensorFit	 ADASSensorFit = 9 ;
  optional	 float	 FadeRightDistance = 10 ;
  optional	 float	 FadeLeftDistance = 11 ;
  optional	 float	 FadeBackDistance = 12 ;
  optional	 float	 FadeFrontDistance = 13 ;
}

//Property 4504 ADASSpeed
//--------------------------------------
message  ADASSpeed_status  {

  optional	 float	 SpeedOffset = 1 ;
  optional	 float	 SpeedLimit = 3 ;
  optional	 float	 SetSpeed = 4 ;
  optional	 int32	 AccelerationDecelerationRate = 5 ;
  optional	 string	 Timestamp = 6 ;
}

//Property 4505 ADASAnticipatedSpeed
//--------------------------------------
message  ADASAnticipatedSpeed_status  {

  optional	 float	 AnticipatedSpeed = 1 ;
  optional	 float	 TargetSpeed = 2 ;
  optional	 string	 Timestamp = 3 ;
}

//Property 4506 ADASTrafficSign
//--------------------------------------
message  ADASTrafficSign_status  {

  optional	 aDAS_TrafficSignType	 ADAS_TrafficSignType = 1 ;
  optional	 uint32	 Distance = 2 ;
  optional	 string	 Timestamp = 3 ;
  optional	 bool	 ShowTCDBubble = 4 ;
  optional	 uint32	 ID = 5 ;
  optional	 threedemension_Position_Points	 Position_Points = 6 ;
}

//Property 4507 ADASTrafficLight
//--------------------------------------
message  ADASTrafficLight_status  {

  optional	 aDAS_TrafficLightType	 ADAS_TrafficLightType = 1 ;
  optional	 uint32	 Distance = 2 ;
  optional	 string	 Timestamp = 3 ;
  optional	 bool	 ShowTCDBubble = 4 ;
  optional	 float	 LifeCycleCountDownValue = 5 ;
  optional	 bool	 ShowLifeCycleCountDown = 6 ;
  optional	 aDAS_TrafficLightOrientation	 ADAS_TrafficLightOrientation = 7 ;
  optional	 bool	 TrafficLightStatus = 8 ;
  optional	 uint32	 ID = 9 ;
}

//Property 4509 ADASActiveLane
//--------------------------------------
message  ADASActiveLane_status  {

  optional	 uint64	 ID = 1 ;
  optional	 bool	 Active = 2 ;
  optional	 string	 Timestamp = 3 ;
}

//Property 4510 ADASHost
//--------------------------------------
message  ADASHost_status  {

  optional	 pointType	 Position = 1 ;
  optional	 float	 Orientation = 3 ;
  optional	 aDAS_Halo	 ADAS_Halo = 4 ;
  optional	 aDAS_HostBrakeLights	 ADAS_HostBrakeLights = 5 ;
  optional	 aDAS_HostTurnSignal	 ADAS_HostTurnSignal = 6 ;
  optional	 aDAS_HostHeadlights	 ADAS_HostHeadlights = 7 ;
  optional	 aDAS_HostReverseLights	 ADAS_HostReverseLights = 8 ;
  optional	 aDAS_HostHazardVehicles	 ADAS_HostHazardVehicles = 9 ;
  optional	 string	 Timestamp = 10 ;
  optional	 uint32	 BulbOnTime = 11 ;
  optional	 uint32	 BulbOffTime = 12 ;
  optional	 uint32	 HostlaneID = 13 ;
  repeated	 water_Ripples	 Water_Ripples = 14 ;
}

//Property 4512 ADASActiveActors
//--------------------------------------
message  ADASActiveActors_status  {

  repeated	 aDAS_ActiveActors	 ADAS_ActiveActors = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4513 ADASLaneChange
//--------------------------------------
message  ADASLaneChange_status  {

  optional	 aDAS_LaneChangeState	 ADAS_LaneChangeState = 1 ;
  optional	 aDAS_LaneChangeType	 ADAS_LaneChangeType = 2 ;
  optional	 aDAS_LaneChangeDirection	 ADAS_LaneChangeDirection = 3 ;
  optional	 string	 Timestamp = 4 ;
  optional	 uint64	 TargetLaneID = 5 ;
  optional	 float	 NewVehiclePositionPointX = 6 ;
  optional	 float	 NewVehiclePositionPointY = 7 ;
  optional	 bool	 NewVehiclePositionDisplay = 8 ;
  optional	 float	 NewVehiclePositionPointZ = 9 ;
}

//Property 4514 ADASState
//--------------------------------------
message  ADASState_status  {

  optional	 aDAS_State	 ADAS_State = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4516 ADAS_Trip_Time_in_AD
//--------------------------------------
message  ADAS_Trip_Time_in_AD_status  {

  optional	 uint32	 Trip_Time_in_AD = 1 ;
}

//Property 4518 ADAS_Trip_Percent_Utilization
//--------------------------------------
message  ADAS_Trip_Percent_Utilization_status  {

  optional	 float	 Trip_Percent_Utilization = 1 ;
}

//Property 4519 ADAS_Stored_AD_Screen_Name
//--------------------------------------
message  ADAS_Stored_AD_Screen_Name_status  {

  optional	 string	 Stored_AD_Screen_Name = 1 ;
}

//Property 4522 ADASFencing
//--------------------------------------
message  ADASFencing_status  {

  repeated	 aDAS_Fence	 ADAS_Fence = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4523 ADASADSensorStatusGroup
//--------------------------------------
message  ADASADSensorStatusGroup_status  {

  optional	 uCSensorStatusType	 ADAS_Front_Windshield_Header = 1 ;
  optional	 uCSensorStatusType	 ADAS_Front_Center = 2 ;
  optional	 uCSensorStatusType	 ADAS_Front_DRIVER_Corner = 3 ;
  optional	 uCSensorStatusType	 ADAS_Front_PASSENGER_Corner = 4 ;
  optional	 uCSensorStatusType	 ADAS_Side_Mirror_DRIVER = 5 ;
  optional	 uCSensorStatusType	 ADAS_Side_Mirror_PASSENGER = 6 ;
  optional	 uCSensorStatusType	 ADAS_Rear_CHMSL = 7 ;
  optional	 uCSensorStatusType	 ADAS_Rear_Center = 8 ;
  optional	 uCSensorStatusType	 ADAS_Rear_DRIVER_Corner = 9 ;
  optional	 uCSensorStatusType	 ADAS_Rear_PASSENGER_Corner = 10 ;
  optional	 uCSensorStatusType	 ADAS_DRIVER_B_Pillar = 11 ;
  optional	 uCSensorStatusType	 ADAS_PASSENGER_B_Pillar = 12 ;
  optional	 uCSensorStatusType	 ADAS_DRIVER_C_Pillar = 13 ;
  optional	 uCSensorStatusType	 ADAS_PASSENGER_C_Pillar = 14 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_1 = 15 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_2 = 16 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_3 = 17 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_4 = 18 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_5 = 19 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_6 = 20 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_7 = 21 ;
  optional	 uCSensorStatusType	 ADAS_Sensor_Reserve_8 = 22 ;
}

//Property 4524 ADASUncategorized_Object
//--------------------------------------
message  ADASUncategorized_Object_status  {

  repeated	 aDAS_Uncategorized_Object	 ADAS_Uncategorized_Object = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4525 ADASLaneSegment_v2
//--------------------------------------
message  ADASLaneSegment_v2_status  {

  repeated	 aDAS_LaneSegmentData	 ADAS_LaneSegmentData = 1 ;
  optional	 string	 Timestamp = 2 ;
  repeated	 aDAS_LeftOneLaneSegmentData	 ADAS_LeftOneLaneSegmentData = 3 ;
  repeated	 aDAS_LeftTwoLaneSegmentData	 ADAS_LeftTwoLaneSegmentData = 4 ;
  repeated	 aDAS_LeftThreeLaneSegmentData	 ADAS_LeftThreeLaneSegmentData = 5 ;
  repeated	 aDAS_RightOneLaneSegmentData	 ADAS_RightOneLaneSegmentData = 6 ;
  repeated	 aDAS_RightTwoLaneSegmentData	 ADAS_RightTwoLaneSegmentData = 7 ;
  repeated	 aDAS_RightThreeLaneSegmentData	 ADAS_RightThreeLaneSegmentData = 8 ;
}

//Property 4526 ADAS_RemovedLaneSegments_v2
//--------------------------------------
message  ADAS_RemovedLaneSegments_v2_status  {

  repeated	 uint64	 RemovedIDs = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4527 ADASVehiclePath_v2
//--------------------------------------
message  ADASVehiclePath_v2_status  {

  repeated	 threedemension_Position_Points	 ADAS_TrajectoryPoints = 1 ;
  optional	 aDAS_PathColor	 ADAS_PathColor = 2 ;
  optional	 curveparameter	 ADAS_TrajectoryCurveParameters = 3 ;
}

//Property 4528 ADASActors_v2
//--------------------------------------
message  ADASActors_v2_status  {

  repeated	 aDAS_Position	 ADAS_Position = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4529 ADASTrafficControlBars
//--------------------------------------
message  ADASTrafficControlBars_status  {

  repeated	 aDAS_TCBs	 ADAS_TCBs = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4532 ADAS_Trip_KM_in_AD
//--------------------------------------
message  ADAS_Trip_KM_in_AD_status  {

  optional	 float	 ADAS_Trip_KM_in_AD = 1 ;
}

//Property 4533 ADASRoadMarkings
//--------------------------------------
message  ADASRoadMarkings_status  {

  repeated	 aDAS_RoadMarking	 ADAS_RoadMarking = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4534 ADASRoadSegmentData
//--------------------------------------
message  ADASRoadSegmentData_status  {

  repeated	 aDAS_RoadSegmentData	 ADAS_RoadSegmentData = 1 ;
  optional	 string	 Timestamp = 2 ;
}

//Property 4536 ADASLaneMarkings
//--------------------------------------
message  ADASLaneMarkings_status  {

  repeated	 aDAS_LaneMarking	 ADAS_LaneMarking = 1 ;
}

//Property 4537 ADASWarnings
//--------------------------------------
message  ADASWarnings_status  {

  optional	 aDAS_FeatureStateWarnings	 ADAS_FeatureStateWarnings = 1 ;
  optional	 aDAS_ServiceUnavailableWarnings	 ADAS_ServiceUnavailableWarnings = 2 ;
  optional	 aDAS_ServiceEndWarnings	 ADAS_ServiceEndWarnings = 3 ;
  optional	 aDAS_LaneCancelWarnings	 ADAS_LaneCancelWarnings = 4 ;
  optional	 aDAS_GeneralSafetyWarnings	 ADAS_GeneralSafetyWarnings = 5 ;
  optional	 aDAS_SensorCleanWarnings	 ADAS_SensorCleanWarnings = 6 ;
  optional	 aDAS_NaviWarnings	 ADAS_NaviWarnings = 7 ;
}

//Property 4538 ADASLocalizationHDPoint
//--------------------------------------
message  ADASLocalizationHDPoint_status  {

  optional	 float	 Longitude = 1 ;
  optional	 float	 Latitude = 2 ;
  optional	 float	 Height = 3 ;
  optional	 float	 Heading = 4 ;
  optional	 uint32	 Speed = 5 ;
  optional	 float	 PositionResolution = 6 ;
  optional	 float	 HeightResolution = 7 ;
  optional	 float	 Timestamp = 8 ;
}

//Property 4539 ADASLocalizationLaneMarkSemantic
//--------------------------------------
message  ADASLocalizationLaneMarkSemantic_status  {

  optional	 float	 Longitude = 1 ;
  optional	 float	 Latitude = 2 ;
  optional	 aDAS_Ephemeris	 ADAS_Ephemeris = 3 ;
  optional	 uint32	 Speed = 4 ;
  optional	 float	 IMUGyroX = 5 ;
  optional	 float	 IMUGyroY = 6 ;
  optional	 float	 IMUGyroZ = 7 ;
  optional	 float	 IMUAccelX = 8 ;
  optional	 float	 IMUAccelY = 9 ;
  optional	 float	 IMUAccelZ = 10 ;
  optional	 float	 Timestamp = 11 ;
  optional	 uint32	 TimeInterval = 12 ;
  optional	 uint32	 LeftLaneNumbers = 13 ;
  optional	 uint32	 RightLaneNumbers = 14 ;
  optional	 aDAS_LeftLaneDrawParameter	 ADAS_LeftLaneDrawParameter = 15 ;
  optional	 aDAS_RightLaneDrawParameter	 ADAS_RightLaneDrawParameter = 16 ;
}

//Property 4540 ADASLaneMarkingForLaneLevelLocalization
//--------------------------------------
message  ADASLaneMarkingForLaneLevelLocalization_status  {

  optional	 aDAS_LaneMarkingForLaneLevelLocalization	 ADAS_LaneMarkingForLaneLevelLocalization = 1 ;
}

//Property 4541 ADASNaviODDIndication
//--------------------------------------
message  ADASNaviODDIndication_status  {

  repeated	 aDAS_ODD_Info	 ADAS_ODD_Info = 1 ;
  repeated	 aDAS_Switch_segments	 ADAS_Switch_segments = 2 ;
  repeated	 aDAS_Match_results	 ADAS_Match_results = 3 ;
}

//Property 4542 ADASNaviRouteSetup
//--------------------------------------
message  ADASNaviRouteSetup_status  {

  optional	 aDAS_Route_setup_status	 ADAS_Route_setup_status = 1 ;
  optional	 float	 UUID = 2 ;
  optional	 aDAS_Subscription_State	 ADAS_Subscription_State = 3 ;
  optional	 float	 ProtectedID_By_MAC = 4 ;
}

message  googleTimeStamp  {

  optional	 int64	 seconds = 1 ;
  optional	 int32	 nanos = 2 ;
}

enum  aDAS_NaviFeatureBarOptionRequest  {

  ADAS_NAVI_FEATURE_UNKNOW = 0 ;
  ADAS_NAVI_FEATURE_NOP = 1 ;
  ADAS_NAVI_FEATURE_CP = 2 ;
  ADAS_NAVI_FEATURE_OFF = 3 ;
}

enum  aDASDisplayView  {

  ADAS_DV_UNSPECIFIED = 0 ;
  ADAS_DV_VIEW1 = 1 ;
  ADAS_DV_VIEW2 = 2 ;
  ADAS_DV_VIEW3 = 3 ;
  ADAS_DV_VIEW4 = 4 ;
}

enum  aDASSensorFit  {

  ADAS_SF_UNSPECIFIED = 0 ;
  ADAS_SF_AUTO = 1 ;
  ADAS_SF_HORIZONTAL = 2 ;
  ADAS_SF_VERTICAL = 3 ;
}

enum  aDAS_TrafficSignType  {

  ADAS_TST_UNSPECIFIED = 0 ;
  ADAS_TST_NO_SIGN = 1 ;
  ADAS_TST_STOP = 2 ;
  ADAS_TST_STOP_GRAYED = 3 ;
  ADAS_TST_YEILD = 4 ;
  ADAS_TST_YIELD_GRAYED = 5 ;
  ADAS_TST_CROSSWALK = 6 ;
  ADAS_TST_CROSSWALK_GRAYED = 7 ;
  ADAS_TST_RAILROAD = 8 ;
  ADAS_TST_RAILROAD_GRAYED = 9 ;
  ADAS_TST_SCHOOL_ZONE = 10 ;
  ADAS_TST_SCHOOL_ZONE_GRAYED = 11 ;
  ADAS_TST_SPEED_BUMP = 12 ;
  ADAS_TST_SPEED_BUMP_GRAYED = 13 ;
  ADAS_TST_ROAD_WORK_AHEAD = 14 ;
  ADAS_TST_ROAD_WORK_AHEAD_GRAYED = 15 ;
  ADAS_TST_FLAGGER_AHEAD = 16 ;
  ADAS_TST_FLAGGER_AHEAD_GRAYED = 17 ;
  ADAS_TST_DETOUR = 18 ;
  ADAS_TST_DETOUR_GRAYED = 19 ;
  ADAS_TST_EXIT_CLOSED = 20 ;
  ADAS_TST_EXIT_CLOSED_GRAYED = 21 ;
  ADAS_TST_NO_OVERTAKING = 22 ;
  ADAS_TST_NO_OVERTAKING_GRAYED = 23 ;
  ADAS_TST_RELEASE_NO_OVERTAKING = 24 ;
  ADAS_TST_RELEASE_NOOVERTAKING_GRAYED = 25 ;
  ADAS_TST_MAXSPEED_LIMIT = 26 ;
  ADAS_TST_MAXSPEED_LIMIT_GRAYED = 27 ;
  ADAS_TST_NO_ENTERING = 28 ;
  ADAS_TST_NO_PASS = 29 ;
  ADAS_TST_NO_VEHICLE_ENTRANCE = 30 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN1 = 31 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN2 = 32 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN3 = 33 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN4 = 34 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN5 = 35 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN6 = 36 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN7 = 37 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN8 = 38 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN9 = 39 ;
  ADAS_TST_RESERVE_FOR_TRAFFICSIGN10 = 40 ;
}

message  threedemension_Position_Points  {

  optional	 float	 PointX = 1 ;
  optional	 float	 PointY = 2 ;
  optional	 float	 PointZ = 3 ;
}

enum  aDAS_TrafficLightType  {

  ADAS_TLT_UNSPECIFIED = 0 ;
  ADAS_TLT_NO_SIGN = 1 ;
  ADAS_TLT_GRAYED = 2 ;
  ADAS_TLT_RED = 3 ;
  ADAS_TLT_YELLOW = 4 ;
  ADAS_TLT_GREEN = 5 ;
  ADAS_TLT_GREEN_RIGHT = 6 ;
  ADAS_TLT_GREEN_LEFT = 7 ;
  ADAS_TLT_RED_RIGHT = 8 ;
  ADAS_TLT_RED_LEFT = 9 ;
  ADAS_TLT_YELLOW_LEFT = 10 ;
  ADAS_TLT_YELLOW_RIGHT = 11 ;
  ADAS_TLT_FLASHING_RED = 12 ;
  ADAS_TLT_FLASHING_YELLOW = 13 ;
  ADAS_TLT_FLASHING_GREEN_RIGHT = 14 ;
  ADAS_TLT_FLASHING_GREEN_LEFT = 15 ;
  ADAS_TLT_FLASHING_RED_RIGHT = 16 ;
  ADAS_TLT_FLASHING_RED_LEFT = 17 ;
  ADAS_TLT_FLASHING_YELLOW_LEFT = 18 ;
  ADAS_TLT_FLASHING_YELLOW_RIGHT = 19 ;
  ADAS_TLT_FLASHING_GREEN = 20 ;
  ADAS_TLT_GREEN_TURN_AROUND = 21 ;
  ADAS_TLT_YELLOW_TURN_AROUND = 22 ;
  ADAS_TLT_RED_TURN_AROUND = 23 ;
  ADAS_TLT_FLASHING_GREEN_TURN_AROUND = 24 ;
  ADAS_TLT_FLASHING_YELLOW_TURN_AROUND = 25 ;
  ADAS_TLT_FLASHING_RED_TURN_AROUND = 26 ;
  ADAS_TLT_RESERVE1 = 27 ;
  ADAS_TLT_RESERVE2 = 28 ;
  ADAS_TLT_RESERVE3 = 29 ;
  ADAS_TLT_RESERVE4 = 30 ;
  ADAS_TLT_RESERVE5 = 31 ;
  ADAS_TLT_RESERVE6 = 32 ;
  ADAS_TLT_RESERVE7 = 33 ;
}

enum  aDAS_TrafficLightOrientation  {

  ADAS_TLO_UNSPECIFIED = 0 ;
  ADAS_TLO_TOWARDLEFT = 1 ;
  ADAS_TLO_TOWARDRIGHT = 2 ;
  ADAS_TLO_STRAIGHT = 3 ;
}

enum  aDAS_Halo  {

  ADAS_HALO_UNSPECIFIED = 0 ;
  ADAS_HALO_DISABLED = 1 ;
  ADAS_HALO_ENABLED_TYPE1 = 2 ;
  ADAS_HALO_ENABLED_TYPE2 = 3 ;
}

enum  aDAS_HostBrakeLights  {

  ADAS_HOST_BRAKE_LIGHTS_UNSPECIFIED = 0 ;
  ADAS_HOST_BRAKE_LIGHTS_OFF = 1 ;
  ADAS_HOST_BRAKE_LIGHTS_ON = 2 ;
}

enum  aDAS_HostTurnSignal  {

  ADAS_HOST_TURN_SIGNAL_UNSPECIFIED = 0 ;
  ADAS_HOST_TURN_SIGNAL_OFF = 1 ;
  ADAS_HOST_TURN_SIGNAL_RIGHT = 2 ;
  ADAS_HOST_TURN_SIGNAL_LEFT = 3 ;
}

enum  aDAS_HostHeadlights  {

  ADAS_HOST_HEADLIGHTS_UNSPECIFIED = 0 ;
  ADAS_HOST_HEADLIGHTS_OFF = 1 ;
  ADAS_HOST_HEADLIGHTS_ON = 2 ;
}

enum  aDAS_HostReverseLights  {

  ADAS_HOST_REVERSE_LIGHTS_UNSPECIFIED = 0 ;
  ADAS_HOST_REVERSE_LIGHTS_OFF = 1 ;
  ADAS_HOST_REVERSE_LIGHTS_ON = 2 ;
}

enum  aDAS_HostHazardVehicles  {

  ADAS_HOST_HAZARD_VEHICLES_UNSPECIFIED = 0 ;
  ADAS_HOST_HAZARD_VEHICLES_OFF = 1 ;
  ADAS_HOST_HAZARD_VEHICLES_ON = 2 ;
}

enum  water_Ripples_Position  {

  OFFripples = 0 ;
  Frontripples = 1 ;
  Backripples = 2 ;
  Leftripples = 3 ;
  Rightripples = 4 ;
  Front_Leftripples = 5 ;
  Front_Rightripples = 6 ;
  Back_Leftripples = 7 ;
  Back_Rightripples = 8 ;
}

enum  water_Ripples_Level  {

  Level_0 = 0 ;
  Level_1 = 1 ;
  Level_2 = 2 ;
  Level_3 = 3 ;
}

message  water_Ripples  {

  optional	 water_Ripples_Position	 Water_Ripples_Position = 1 ;
  optional	 water_Ripples_Level	 Water_Ripples_Level = 2 ;
}

message  aDAS_ActiveActors  {

  optional	 uint64	 ActiveActorID = 1 ;
  optional	 bool	 IsInfluencingPath = 2 ;
}

enum  aDAS_LaneChangeState  {

  ADAS_LCS_UNSPECIFIED = 0 ;
  ADAS_LCS_LOOKING_FOR_OPENING = 1 ;
  ADAS_LCS_OPENING_IDENTIFIED = 2 ;
  ADAS_LCS_PREPARING_TO_CHANGE_LANES = 3 ;
  ADAS_LCS_CHANGING_LANES = 4 ;
  ADAS_LCS_LANE_CHANGE_COMPLETED = 5 ;
  ADAS_LCS_THREAT_IDENTIFIED_IN_TARGET_LANE = 6 ;
  ADAS_LCS_TIME_OUT = 7 ;
  ADAS_LCS_CANCELED = 8 ;
}

enum  aDAS_LaneChangeType  {

  ADAS_LCT_UNSPECIFIED = 0 ;
  ADAS_LCT_LANE_CHANGE_FOR_TIME = 1 ;
  ADAS_LCT_LANE_CHANGE_FOR_ROUTE = 2 ;
  ADAS_LCT_LANE_CHANGE_ON_DEMAND = 3 ;
  ADAS_LCT_NO_LANE_CHANGE = 4 ;
}

enum  aDAS_LaneChangeDirection  {

  ADAS_LCD_UNSPECIFIED = 0 ;
  ADAS_LCD_RIGHT = 1 ;
  ADAS_LCD_LEFT = 2 ;
}

enum  aDAS_State  {

  ADAS_UNSPECIFIED = 0 ;
  ADAS_DISABLE = 1 ;
  ADAS_ENABLE = 2 ;
  ADAS_ACTIVE = 3 ;
  ADAS_LATERAL_OVERRIDE = 4 ;
  ADAS_LONGITUDINAL_OVERRIDE = 5 ;
  ADAS_ESCALATION1 = 6 ;
  ADAS_ESCALATION2 = 7 ;
  ADAS_ESCALATION3 = 8 ;
  ADAS_ESCALATION4 = 9 ;
  ADAS_CP_OFF_AND_NP_OFF = 10 ;
  ADAS_CP_STANDBY_AND_NP_OFF = 11 ;
  ADAS_CP_ACTIVE_AND_NP_OFF = 12 ;
  ADAS_CP_INACTIVE_AND_NP_STANDBY = 13 ;
  ADAS_CP_ACTIVE_AND_NP_STANDBY = 14 ;
  ADAS_CP_ANY_AND_NP_ACTIVE = 15 ;
  ADAS_CP_LATERAL_OVERRIDE = 16 ;
  ADAS_CP_LONGITUDINAL_OVERRIDE = 17 ;
  ADAS_NP_LATERAL_OVERRIDE = 18 ;
  ADAS_NP_LONGITUDINAL_OVERRIDE = 19 ;
  ADAS_CP_PRESTANDBY_NP_OFF = 20 ;
  ADAS_CP_PRESTANDBY_NP_PRESTANDBY = 21 ;
  ADAS_CP_STANDBY_NP_PRESTANDBY = 22 ;
  ADAS_CP_ACTIVE_NP_PRESTANDBY = 23 ;
  ADAS_RESERVE_ADASState_1 = 24 ;
  ADAS_RESERVE_ADASState_2 = 25 ;
  ADAS_RESERVE_ADASState_3 = 26 ;
  ADAS_RESERVE_ADASState_4 = 27 ;
  ADAS_RESERVE_ADASState_5 = 28 ;
  ADAS_RESERVE_ADASState_6 = 29 ;
}

message  curveparameter  {

  optional	 float	 C0 = 1 ;
  optional	 float	 C1 = 2 ;
  optional	 float	 C2 = 3 ;
  optional	 float	 C3 = 4 ;
}

message  aDAS_LeftFence  {

  optional	 float	 XCoord = 1 ;
  optional	 float	 YCoord = 2 ;
  optional	 float	 ZCoord = 3 ;
  optional	 curveparameter	 Curve_Parameter = 4 ;
}

message  aDAS_RightFence  {

  optional	 float	 XCoord = 1 ;
  optional	 float	 YCoord = 2 ;
  optional	 float	 ZCoord = 3 ;
  optional	 curveparameter	 Curve_Parameter = 4 ;
}

message  aDAS_Fence  {

  repeated	 aDAS_LeftFence	 ADAS_LeftFence = 1 ;
  repeated	 aDAS_RightFence	 ADAS_RightFence = 2 ;
  optional	 pointColorType	 ADAS_Color = 3 ;
}

message  aDAS_Uncategorized_Object  {

  optional	 threedemension_Position_Points	 ADAS_bottom_left_corner = 1 ;
  optional	 threedemension_Position_Points	 ADAS_bottom_right_corner = 2 ;
  optional	 threedemension_Position_Points	 ADAS_top_left_corner = 3 ;
  optional	 threedemension_Position_Points	 ADAS_top_right_corner = 4 ;
  optional	 float	 height_float = 6 ;
  optional	 bool	 Active = 7 ;
  optional	 uint32	 ID = 8 ;
}

message  laneBoundaryTypeNewV2Left  {

  repeated	 threedemension_Position_Points	 LanePoints = 2 ;
  optional	 laneMarkerTypeNew	 LaneMarkerTypeNew = 3 ;
  optional	 laneMarkerColor	 LaneMarkerColor = 4 ;
  optional	 float	 LaneMarkerOffset = 5 ;
  optional	 float	 LeftBoundary_LaneMarkerTypeNewConfidence = 6 ;
  optional	 float	 LeftBoundary_LaneMarkerColorConfidence = 7 ;
  optional	 curveparameter	 CurveParameters = 8 ;
}

message  laneBoundaryTypeNewV2Right  {

  repeated	 threedemension_Position_Points	 LanePoints = 2 ;
  optional	 laneMarkerTypeNew	 LaneMarkerTypeNew = 3 ;
  optional	 laneMarkerColor	 LaneMarkerColor = 4 ;
  optional	 float	 LaneMarkerOffset = 5 ;
  optional	 float	 RightBoundary_LaneMarkerTypeNewConfidence = 6 ;
  optional	 float	 RightBoundary_LaneMarkerColorConfidence = 7 ;
  optional	 curveparameter	 CurveParameters = 8 ;
}

message  aDAS_LaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNewV2Left	 ADAS_LeftBoundary = 3 ;
  repeated	 laneBoundaryTypeNewV2Right	 ADAS_RightBoundary = 4 ;
  optional	 adjacentLaneType	 ADAS_LeftLaneID = 5 ;
  optional	 adjacentLaneType	 ADAS_RightLaneID = 6 ;
  repeated	 uint64	 ADAS_DownstreamLanesIDs = 7 ;
}

message  aDAS_LeftOneLaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 ADAS_LeftBoundary = 3 ;
}

message  aDAS_LeftTwoLaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 ADAS_LeftBoundary = 3 ;
}

message  aDAS_LeftThreeLaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 ADAS_LeftBoundary = 3 ;
}

message  aDAS_RightOneLaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 ADAS_RightBoundary = 3 ;
}

message  aDAS_RightTwoLaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 ADAS_RightBoundary = 3 ;
}

message  aDAS_RightThreeLaneSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 laneBoundaryTypeNew	 ADAS_RightBoundary = 3 ;
}

enum  aDAS_PathColor  {

  ADAS_DEFAULT_COLOR = 0 ;
  ADAS_WARNING_COLOR = 1 ;
  ADAS_OVERRIDE_COLOR = 2 ;
  ADAS_VEHICLE_PATH_RESERVE_1 = 3 ;
  ADAS_VEHICLE_PATH_RESERVE_2 = 4 ;
  ADAS_VEHICLE_PATH_RESERVE_3 = 5 ;
}

enum  aDAS_ActorType  {

  ADAS_ACTOR_TYPE_UNSPECIFIED = 0 ;
  ADAS_ACTOR_TYPE_PEDESTRIAN1 = 1 ;
  ADAS_ACTOR_TYPE_PEDESTRIAN2 = 2 ;
  ADAS_ACTOR_TYPE_ANIMAL1 = 3 ;
  ADAS_ACTOR_TYPE_ANIMAL2 = 4 ;
  ADAS_ACTOR_TYPE_BICYCLE = 5 ;
  ADAS_ACTOR_TYPE_MOTORCYCLE1 = 6 ;
  ADAS_ACTOR_TYPE_MOTORCYCLE2 = 7 ;
  ADAS_ACTOR_TYPE_CAR1 = 8 ;
  ADAS_ACTOR_TYPE_CAR2 = 9 ;
  ADAS_ACTOR_TYPE_SUV1 = 10 ;
  ADAS_ACTOR_TYPE_SUV2 = 11 ;
  ADAS_ACTOR_TYPE_TRUCK1 = 12 ;
  ADAS_ACTOR_TYPE_TRUCK2 = 13 ;
  ADAS_ACTOR_TYPE_TRUCK3 = 14 ;
  ADAS_ACTOR_TYPE_TRUCK4 = 15 ;
  ADAS_ACTOR_TYPE_TRUCK5 = 16 ;
  ADAS_ACTOR_TYPE_BUS = 17 ;
  ADAS_ACTOR_TYPE_EMERGENCY1 = 18 ;
  ADAS_ACTOR_TYPE_EMERGENCY2 = 19 ;
  ADAS_ACTOR_TYPE_EMERGENCY3 = 20 ;
  ADAS_ACTOR_TYPE_TRAFFIC_CONES = 21 ;
  ADAS_ACTOR_TYPE_CONSTRUCTION_BARRELS = 22 ;
  ADAS_ACTOR_TYPE_TRASH_CANS = 23 ;
  ADAS_ACTOR_TYPE_TRICYCLE = 24 ;
  ADAS_ACTOR_TYPE_POLE = 25 ;
  ADAS_ACTOR_TYPE_SHORT_POLE = 26 ;
  ADAS_ACTOR_TYPE_TREE = 27 ;
  ADAS_ACTOR_TYPE_SINGLE_BARRIER = 28 ;
  ADAS_ACTOR_TYPE_RESERVE1 = 29 ;
  ADAS_ACTOR_TYPE_RESERVE2 = 30 ;
  ADAS_ACTOR_TYPE_RESERVE3 = 31 ;
  ADAS_ACTOR_TYPE_RESERVE4 = 32 ;
  ADAS_ACTOR_TYPE_RESERVE5 = 33 ;
  ADAS_ACTOR_TYPE_RESERVE6 = 34 ;
  ADAS_ACTOR_TYPE_RESERVE7 = 35 ;
}

enum  aDAS_ActorBrakeLights  {

  ADAS_ACTOR_BRAKE_LIGHTS_UNSPECIFIED = 0 ;
  ADAS_ACTOR_BRAKE_LIGHTS_OFF = 1 ;
  ADAS_ACTOR_BRAKE_LIGHTS_ON = 2 ;
}

enum  aDAS_ActorTurnSignal  {

  ADAS_ACTOR_TURN_SIGNAL_UNSPECIFIED = 0 ;
  ADAS_ACTOR_TURN_SIGNAL_OFF = 1 ;
  ADAS_ACTOR_TURN_SIGNAL_RIGHT = 2 ;
  ADAS_ACTOR_TURN_SIGNAL_LEFT = 3 ;
}

enum  aDAS_ActorHeadlights  {

  ADAS_ACTOR_HEADLIGHTS_UNSPECIFIED = 0 ;
  ADAS_ACTOR_HEADLIGHTS_OFF = 1 ;
  ADAS_ACTOR_HEADLIGHTS_ON = 2 ;
}

enum  aDAS_ActorReverseLights  {

  ADAS_ACTOR_REVERSE_LIGHTS_UNSPECIFIED = 0 ;
  ADAS_ACTOR_REVERSE_LIGHTS_OFF = 1 ;
  ADAS_ACTOR_REVERSE_LIGHTS_ON = 2 ;
}

enum  aDAS_ActorHazardVehicles  {

  ADAS_ACTOR_HAZARD_VEHICLES_UNSPECIFIED = 0 ;
  ADAS_ACTOR_HAZARD_VEHICLES_OFF = 1 ;
  ADAS_ACTOR_HAZARD_VEHICLES_ON = 2 ;
}

enum  aDAS_ActorColor  {

  ADAS_AC_UNSPECIFIED = 0 ;
  ADAS_AC_GREY = 1 ;
  ADAS_AC_GREEN = 2 ;
  ADAS_AC_RED = 3 ;
  ADAS_AC_Blue = 4 ;
  ADAS_AC_Amber = 5 ;
}

message  aDAS_Position  {

  optional	 uint64	 ID = 1 ;
  optional	 threedemension_Position_Points	 ADAS_PositionPoint = 3 ;
  optional	 uint64	 ADAS_LaneAssociation = 4 ;
  optional	 float	 ADAS_Orientation = 5 ;
  optional	 aDAS_ActorType	 ADAS_ActorType = 6 ;
  optional	 bool	 ADAS_StaticActor = 7 ;
  optional	 aDAS_ActorBrakeLights	 ADAS_ActorBrakeLights = 8 ;
  optional	 aDAS_ActorTurnSignal	 ADAS_ActorTurnSignal = 9 ;
  optional	 aDAS_ActorHeadlights	 ADAS_ActorHeadlights = 10 ;
  optional	 aDAS_ActorReverseLights	 ADAS_ActorReverseLights = 11 ;
  optional	 aDAS_ActorHazardVehicles	 ADAS_ActorHazardVehicles = 12 ;
  optional	 aDAS_ActorColor	 ADAS_ActorColor = 13 ;
}

message  aDAS_TCBs  {

  optional	 uint64	 ID = 1 ;
  optional	 pointType	 ADAS_Start = 2 ;
  optional	 pointType	 ADAS_End = 3 ;
  optional	 float	 Orientation = 4 ;
  optional	 float	 TCBWidth = 5 ;
  optional	 threedemension_Position_Points	 ADAS_StoppingPoint = 6 ;
}

message  aDAS_RoadMarkingCoords  {

  optional	 float	 XCoord = 1 ;
  optional	 float	 YCoord = 2 ;
}

enum  aDAS_RoadMarkingType  {

  ADAS_ROAD_MARKING_TYPE_UNSPECIFIED = 0 ;
  ADAS_ROAD_MARKING_TYPE_NONE = 1 ;
  ADAS_ROAD_MARKING_TYPE_CROSSWALK = 2 ;
  ADAS_ROAD_MARKING_TYPE_SCHOOL_CROSSING = 3 ;
  ADAS_ROAD_MARKING_TYPE_RAILROAD_CROSSING = 4 ;
  ADAS_ROAD_MARKING_TYPE_SPEEDBUMP = 5 ;
  ADAS_ROAD_MARKING_TYPE_STOPLINE = 6 ;
  ADAS_ROAD_MARKING_TYPE_NO_PARKING = 7 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE_FOR_GUIDELINE = 8 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE1 = 9 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE2 = 10 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE3 = 11 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE4 = 12 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE5 = 13 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE6 = 14 ;
  ADAS_ROAD_MARKING_TYPE_RESERVE7 = 15 ;
}

enum  aDAS_RoadMarkingColor  {

  ADAS_ROAD_MARKING_COLOR_UNSPECIFIED = 0 ;
  ADAS_ROAD_MARKING_COLOR_WHITE = 1 ;
  ADAS_ROAD_MARKING_COLOR_GREY = 2 ;
  ADAS_ROAD_MARKING_COLOR_YELLOW = 3 ;
}

message  aDAS_RoadMarking  {

  repeated	 aDAS_RoadMarkingCoords	 ADAS_RoadMarkingCoords = 1 ;
  optional	 aDAS_RoadMarkingType	 ADAS_RoadMarkingType = 2 ;
  optional	 aDAS_RoadMarkingColor	 ADAS_RoadMarkingColor = 3 ;
  repeated	 threedemension_Position_Points	 ADAS_RoadMarkingCoords_FrontLeft = 4 ;
  repeated	 threedemension_Position_Points	 ADAS_RoadMarkingCoords_FrontRight = 5 ;
  repeated	 threedemension_Position_Points	 ADAS_RoadMarkingCoords_RearLeft = 6 ;
  repeated	 threedemension_Position_Points	 ADAS_RoadMarkingCoords_RearRight = 7 ;
  optional	 float	 Orientation = 8 ;
}

message  aDAS_RoadSegmentData  {

  optional	 uint64	 ID = 1 ;
  optional	 uint32	 Length = 2 ;
  repeated	 roadBoundaryType	 ADAS_LeftBoundary = 3 ;
  repeated	 roadBoundaryType	 ADAS_RightBoundary = 4 ;
  optional	 adjacentRoadType	 ADAS_LeftRoadID = 5 ;
  optional	 adjacentRoadType	 ADAS_RightRoadID = 6 ;
  optional	 bool	 IntersectionFlag = 7 ;
}

enum  aDAS_LaneMarkingType  {

  ADAS_LANE_MARKING_TYPE_None = 0 ;
  ADAS_LANE_MARKING_TYPE_SpeedRestriction = 1 ;
  ADAS_LANE_MARKING_TYPE_Warning = 2 ;
  ADAS_LANE_MARKING_TYPE_Prohibition = 3 ;
  ADAS_REVERSE_13 = 4 ;
  ADAS_LANE_MARKING_TYPE_Road_SignPost = 5 ;
  ADAS_LANE_MARKING_TYPE_StopLine = 6 ;
  ADAS_LANE_MARKING_TYPE_Straight = 7 ;
  ADAS_LANE_MARKING_TYPE_Right = 8 ;
  ADAS_LANE_MARKING_TYPE_Left = 9 ;
  ADAS_LANE_MARKING_TYPE_TurnRound = 10 ;
  ADAS_LANE_MARKING_TYPE_Straight_Left = 11 ;
  ADAS_LANE_MARKING_TYPE_Straight_Right = 12 ;
  ADAS_LANE_MARKING_TYPE_Left_Right = 13 ;
  ADAS_LANE_MARKING_TYPE_Left_TurnRound = 14 ;
  ADAS_LANE_MARKING_TYPE_Straight_TurnRound = 15 ;
  ADAS_LANE_MARKING_TYPE_Right_TurnRound = 16 ;
  ADAS_LANE_MARKING_TYPE_Stright_Left_Right = 17 ;
  ADAS_RESERVE_LMT_1 = 18 ;
  ADAS_RESERVE_LMT_2 = 19 ;
  ADAS_RESERVE_LMT_3 = 20 ;
  ADAS_RESERVE_LMT_4 = 21 ;
  ADAS_RESERVE_LMT_5 = 22 ;
  ADAS_RESERVE_LMT_6 = 23 ;
  ADAS_RESERVE_LMT_7 = 24 ;
  ADAS_RESERVE_LMT_8 = 25 ;
}

enum  aDAS_LaneMarkingColor  {

  ADAS_Lane_MARKING_COLOR_White = 0 ;
  ADAS_Lane_MARKING_COLOR_Grey = 1 ;
  ADAS_Lane_MARKING_COLOR_Yellow = 2 ;
}

message  aDAS_LaneMarking  {

  repeated	 float	 LaneMarkingCoords_Xcoord = 1 ;
  repeated	 float	 LaneMarkingCoords_Ycoord = 2 ;
  optional	 aDAS_LaneMarkingType	 ADAS_LaneMarkingType = 3 ;
  optional	 aDAS_LaneMarkingColor	 ADAS_LaneMarkingColor = 4 ;
  optional	 uint32	 LaneID = 5 ;
  optional	 uint32	 LaneMarkingDistance = 6 ;
  repeated	 threedemension_Position_Points	 ADAS_LaneMarkingFrontLeftPoint = 7 ;
  repeated	 threedemension_Position_Points	 ADAS_LaneMarkingRearLeftPoint = 8 ;
  repeated	 threedemension_Position_Points	 ADAS_LaneMarkingRearRightPoint = 9 ;
  repeated	 threedemension_Position_Points	 ADAS_LaneMarkingFrontRightPoint = 10 ;
}

enum  aDAS_FeatureStateWarnings  {

  ADAS_REVERSE_1 = 0 ;
  ADAS_APPROACHING_PILOT_ODD = 1 ;
  ADAS_ACTIVE_PILOT_SERVICE_PROMPT = 2 ;
  ADAS_NP_SERVICE_ACTIVE_ALERT = 3 ;
  ADAS_CP_SERVICE_ACTIVE_ALERT = 4 ;
  ADAS_PILOT_SERVICE_ACTIVE_ALERT = 5 ;
  ADAS_UPGRADE_TO_NP_ALERT = 6 ;
  ADAS_DOWNGRADE_TO_CP_ALERT = 7 ;
  ADAS_PILOT_SERVICE_END_ALERT_AND_TAKEOVER_PROMPT = 8 ;
  ADAS_PILOT_SERVICE_RESTORED_ALERT = 9 ;
  ADAS_PILOT_SERVICE_FAIL_ACTIVED_ALERT_AND_CHANGE_SETTINGS_PROMPT = 10 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_1 = 11 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_2 = 12 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_3 = 13 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_4 = 14 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_5 = 15 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_6 = 16 ;
  ADAS_FEATURE_STATE_WARNINGS_RESERVE_7 = 17 ;
}

enum  aDAS_ServiceUnavailableWarnings  {

  ADAS_GENERAL_SERVICE_UNAVAILABLE = 0 ;
  ADAS_SET_WIPER = 1 ;
  ADAS_TURN_STEERING_WHEEL_BACK = 2 ;
  ADAS_RELEASE_PEDAL = 3 ;
  ADAS_MAP_UNAVAILABLE = 4 ;
  ADAS_GPS_UNAVAILABLE = 5 ;
  ADAS_TIGHT_CURVE = 6 ;
  ADAS_OVERSPEED = 7 ;
  ADAS_BAD_WEATHER = 8 ;
  ADAS_COMPLICATED_ROAD_CONDITION = 9 ;
  ADAS_NP_SERVICE_UNAVAILABLE = 10 ;
  ADAS_REVERSE_6 = 11 ;
  ADAS_REVERSE_7 = 12 ;
  ADAS_PILOT_SERVICE_LOCKOUT = 13 ;
  ADAS_OUT_OF_ODD = 14 ;
  ADAS_TURN_OFF_OTHER_DRIVING_FEATURE = 15 ;
  ADAS_TURN_OFF_OTHER_DRIVING_MODE = 16 ;
  ADAS_CHECK_DOORS_AND_COVERS = 17 ;
  ADAS_SLIDING_CAR = 18 ;
  ADAS_CHECK_GEAR_D = 19 ;
  ADAS_EPB_NOT_PULLLED_UP = 20 ;
  ADAS_CHECK_SAFTEY_BELT = 21 ;
  ADAS_CHECK_CAMERA_AND_LRR = 22 ;
  ADAS_CHECK_IPD = 23 ;
  ADAS_CHECK_IBS = 24 ;
  ADAS_HANDS_ON_ALERT = 25 ;
  ADAS_STOP_TAKEOVER_STEERING_WHEEL_ALERT = 26 ;
  ADAS_ANGLE_OF_STEERING_WHEEL_TOO_BIG_ALERT = 27 ;
  ADAS_DRIVE_TO_ROAD_CENTER_ALERT = 28 ;
  ADAS_CHECK_DMS_ALERT = 29 ;
  ADAS_CHECK_NAVIGATION_ON_ALERT = 30 ;
  ADAS_CHECK_EGO_VEHICLE_IS_ON_ROUTE_ALERT = 31 ;
  ADAS_ABNORMAL_LANE_WIDTH_ALERT = 32 ;
  ADAS_SEE_DEALER_ALERT = 33 ;
  ADAS_CHECK_VEHICLE_STATUS_ALERT = 34 ;
  ADAS_GENERAL_SERVICE_UNAVAILABLE_ALERT = 35 ;
  ADAS_LOWSPEED = 36 ;
  ADAS_ARS_TURNING_OFF_ALERT = 37 ;
  ADAS_ARS_TURNNED_OFF_ALERT = 38 ;
  ADAS_STOP_90_TO_180_ALERT = 39 ;
  ADAS_AEB_OFF = 40 ;
  ADAS_ACC_OFF = 41 ;
  ADAS_CHECK_DOORS_AND_COVERS_PART2 = 42 ;
  ADAS_CHECK_DOORS_AND_COVERS_PART3 = 43 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_1 = 44 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_2 = 45 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_3 = 46 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_4 = 47 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_5 = 48 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_6 = 49 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_7 = 50 ;
  ADAS_CP_UNAVAILABLE_COVER_ALL_CASE = 51 ;
  ADAS_NP_UNAVAILABLE_COVER_ALL_CASE = 52 ;
  ADAS_APPROACHING_ODD_CLOSED_SERVICE_UNAVAILABLE = 53 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_8 = 54 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_9 = 55 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_10 = 56 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_11 = 57 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_12 = 58 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_13 = 59 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_14 = 60 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_15 = 61 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_16 = 62 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_17 = 63 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_18 = 64 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_19 = 65 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_20 = 66 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_21 = 67 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_22 = 68 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_23 = 69 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_24 = 70 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_25 = 71 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_26 = 72 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_27 = 73 ;
  ADAS_RESERVE_SERVICE_UNAVAILABLE_28 = 74 ;
}

enum  aDAS_ServiceEndWarnings  {

  ADAS_GENERAL_SERVICE_UNAVAILABLE_END = 0 ;
  ADAS_PILOT_SERVICE_END = 1 ;
  ADAS_TOLLBOOTH_DETECTED_END = 2 ;
  ADAS_CONSTRUCTION_DETECTED_END = 3 ;
  ADAS_MAP_UNAVAILABLE_END = 4 ;
  ADAS_GPS_UNAVAILABLE_END = 5 ;
  ADAS_OVERSPEED_END = 6 ;
  ADAS_TIGHT_CURVE_END = 7 ;
  ADAS_BAD_WEATHER_END = 8 ;
  ADAS_COMPLICATED_ROAD_CONDITION_END = 9 ;
  ADAS_NP_SERVICE_END = 10 ;
  ADAS_TUNNEL_DETECTED_END = 11 ;
  ADAS_NAVIGATION_UNAVAILABLE_END = 12 ;
  ADAS_PILOT_SERVICE_LOCKOUT_END = 13 ;
  ADAS_OUT_OF_ODD_END = 14 ;
  ADAS_TURN_OFF_OTHER_DRIVING_FEATURE_END = 15 ;
  ADAS_TURN_OFF_OTHER_DRIVING_MODE_END = 16 ;
  ADAS_CHECK_DOORS_AND_COVERS_END = 17 ;
  ADAS_SLIDING_CAR_END = 18 ;
  ADAS_CHECK_GEAR_D_END = 19 ;
  ADAS_EPB_NOT_PULLLED_UP_END = 20 ;
  ADAS_CHECK_SAFTEY_BELT_END = 21 ;
  ADAS_CHECK_CAMERA_AND_LRR_END = 22 ;
  ADAS_CHECK_IPD_END = 23 ;
  ADAS_CHECK_IBS_END = 24 ;
  ADAS_HANDS_ON_ALERT_END = 25 ;
  ADAS_STOP_TAKEOVER_STEERING_WHEEL_ALERT_END = 26 ;
  ADAS_ANGLE_OF_STEERING_WHEEL_TOO_BIG_ALERT_END = 27 ;
  ADAS_DRIVE_TO_ROAD_CENTER_ALERT_END = 28 ;
  ADAS_CHECK_DMS_ALERT_END = 29 ;
  ADAS_CHECK_NAVIGATION_ON_ALERT_END = 30 ;
  ADAS_CHECK_EGO_VEHICLE_IS_ON_ROUTE_ALERT_END = 31 ;
  ADAS_ABNORMAL_LANE_WIDTH_ALERT_END = 32 ;
  ADAS_SEE_DEALER_ALERT_END = 33 ;
  ADAS_CHECK_VEHICLE_STATUS_ALERT_END = 34 ;
  ADAS_SET_WIPER_END = 35 ;
  ADAS_TURN_STEERING_WHEEL_BACK_END = 36 ;
  ADAS_RELEASE_PEDAL_END = 37 ;
  ADAS_CHECK_DOORS_AND_COVERS_END_PART2 = 38 ;
  ADAS_CHECK_DOORS_AND_COVERS_END_PART3 = 39 ;
  ADAS_OVERTIME_STOP_ALERT = 40 ;
  ADAS_ACC_OFF_END = 41 ;
  ADAS_RESERVE_SERVICE_END_1 = 42 ;
  ADAS_RESERVE_SERVICE_END_2 = 43 ;
  ADAS_RESERVE_SERVICE_END_3 = 44 ;
  ADAS_RESERVE_SERVICE_END_4 = 45 ;
  ADAS_RESERVE_SERVICE_END_5 = 46 ;
  ADAS_RESERVE_SERVICE_END_6 = 47 ;
  ADAS_RESERVE_SERVICE_END_7 = 48 ;
  ADAS_RESERVE_SERVICE_END_8 = 49 ;
  ADAS_RESERVE_SERVICE_END_9 = 50 ;
  ADAS_RESERVE_SERVICE_END_10 = 51 ;
  ADAS_RESERVE_SERVICE_END_11 = 52 ;
  ADAS_RESERVE_SERVICE_END_12 = 53 ;
  ADAS_RESERVE_SERVICE_END_13 = 54 ;
  ADAS_RESERVE_SERVICE_END_14 = 55 ;
  ADAS_RESERVE_SERVICE_END_15 = 56 ;
  ADAS_RESERVE_SERVICE_END_16 = 57 ;
  ADAS_RESERVE_SERVICE_END_17 = 58 ;
  ADAS_RESERVE_SERVICE_END_18 = 59 ;
  ADAS_RESERVE_SERVICE_END_19 = 60 ;
  ADAS_RESERVE_SERVICE_END_20 = 61 ;
  ADAS_RESERVE_SERVICE_END_21 = 62 ;
  ADAS_RESERVE_SERVICE_END_22 = 63 ;
  ADAS_RESERVE_SERVICE_END_23 = 64 ;
  ADAS_RESERVE_SERVICE_END_24 = 65 ;
  ADAS_RESERVE_SERVICE_END_25 = 66 ;
  ADAS_RESERVE_SERVICE_END_26 = 67 ;
  ADAS_RESERVE_SERVICE_END_27 = 68 ;
  ADAS_RESERVE_SERVICE_END_28 = 69 ;
  ADAS_RESERVE_SERVICE_END_29 = 70 ;
  ADAS_RESERVE_SERVICE_END_30 = 71 ;
  ADAS_RESERVE_SERVICE_END_31 = 72 ;
}

enum  aDAS_LaneCancelWarnings  {

  ADAS_LANE_CHANGE_CONDITION_NOT_MEET = 0 ;
  ADAS_LANE_CHANGE_TO_LEFT_RIGHTNOW = 1 ;
  ADAS_LANE_CHANGE_TO_RIGHT_RIGHTNOW = 2 ;
  ADAS_CANCEL_LEFT_LANE_CHANGE_FOR_ROUTE = 3 ;
  ADAS_CANCEL_RIGHT_LANE_CHANGE_FOR_ROUTE = 4 ;
  ADAS_FAIL_TO_DETECT_ADJACENT_LANES = 5 ;
  ADAS_ADJACENT_LANE_WIDTH_MISMATCH = 6 ;
  ADAS_SURROUNDING_THREAT = 7 ;
  ADAS_PILOT_LANE_CHANGE_ABORTED = 8 ;
  ADAS_TURN_LEVER_OFF = 9 ;
  ADAS_SOLID_LINE = 10 ;
  ADAS_COMPLICATED_ROAD_CONDITION_CANCEL = 11 ;
  ADAS_LEFT_TURNING = 12 ;
  ADAS_RIGHT_TURNING = 13 ;
  ADAS_LANE_CHANGE_ABORTED = 14 ;
  ADAS_LANE_MERGING_ALERT = 15 ;
  ADAS_LANE_DIVERSION_ALERT = 16 ;
  ADAS_RESERVE_LANE_CHANGE_1 = 17 ;
  ADAS_RESERVE_LANE_CHANGE_2 = 18 ;
  ADAS_RESERVE_LANE_CHANGE_3 = 19 ;
  ADAS_RESERVE_LANE_CHANGE_4 = 20 ;
  ADAS_RESERVE_LANE_CHANGE_5 = 21 ;
  ADAS_RESERVE_LANE_CHANGE_6 = 22 ;
  ADAS_RESERVE_LANE_CHANGE_7 = 23 ;
  ADAS_RESERVE_LANE_CHANGE_8 = 24 ;
  ADAS_RESERVE_LANE_CHANGE_9 = 25 ;
  ADAS_RESERVE_LANE_CHANGE_10 = 26 ;
  ADAS_RESERVE_LANE_CHANGE_11 = 27 ;
  ADAS_RESERVE_LANE_CHANGE_12 = 28 ;
  ADAS_RESERVE_LANE_CHANGE_13 = 29 ;
  ADAS_RESERVE_LANE_CHANGE_14 = 30 ;
  ADAS_RESERVE_LANE_CHANGE_15 = 31 ;
}

enum  aDAS_GeneralSafetyWarnings  {

  ADAS_COLLISION_RISK = 0 ;
  ADAS_DODGE_TRUCK = 1 ;
  ADAS_TAKEOVER_STEERING_WHEEL = 2 ;
  ADAS_ENTER_RAMP_AFTER_2_KILOMETERS = 3 ;
  ADAS_ENTER_RAMP_AFTER_500_METERS = 4 ;
  ADAS_QUIT_RAMP_AFTER_2_KILOMETERS = 5 ;
  ADAS_QUIT_RAMP_AFTER_500_METERS = 6 ;
  ADAS_QUIT_ODD_SECTION_AFTER_2_KILOMETERS = 7 ;
  ADAS_ATTENTION_TO_PEDESTRIAN = 8 ;
  ADAS_PREALERT_OF_PASSING_CROSS = 9 ;
  ADAS_ALERT_OF_PASSING_CROSS = 10 ;
  ADAS_ALERT_OF_SOTIF_STILL_AVAILABLE = 11 ;
  ADAS_ALERT_OF_SOTIF_UNAVAILABLE = 12 ;
  ADAS_COLLISION_RISK_ALERT = 13 ;
  ADAS_TIGHT_CURVE_ALERT = 14 ;
  ADAS_TAKEOVER_STEERING_WHEEL_IMMEDIATELY = 15 ;
  ADAS_HOLD_ON_TO_STEERING_WHEEL = 16 ;
  ADAS_RESERVE_GENERAL_SAFETY_1 = 17 ;
  ADAS_RESERVE_GENERAL_SAFETY_2 = 18 ;
  ADAS_RESERVE_GENERAL_SAFETY_3 = 19 ;
  ADAS_RESERVE_GENERAL_SAFETY_4 = 20 ;
  ADAS_RESERVE_GENERAL_SAFETY_5 = 21 ;
  ADAS_RESERVE_GENERAL_SAFETY_6 = 22 ;
  ADAS_RESERVE_GENERAL_SAFETY_7 = 23 ;
  ADAS_RESERVE_GENERAL_SAFETY_8 = 24 ;
  ADAS_RESERVE_GENERAL_SAFETY_9 = 25 ;
  ADAS_RESERVE_GENERAL_SAFETY_10 = 26 ;
  ADAS_RESERVE_GENERAL_SAFETY_11 = 27 ;
  ADAS_RESERVE_GENERAL_SAFETY_12 = 28 ;
  ADAS_RESERVE_GENERAL_SAFETY_13 = 29 ;
  ADAS_RESERVE_GENERAL_SAFETY_14 = 30 ;
  ADAS_RESERVE_GENERAL_SAFETY_15 = 31 ;
  ADAS_RESERVE_GENERAL_SAFETY_16 = 32 ;
  ADAS_RESERVE_GENERAL_SAFETY_17 = 33 ;
  ADAS_RESERVE_GENERAL_SAFETY_18 = 34 ;
}

enum  aDAS_SensorCleanWarnings  {

  ADAS_OFFCleaning = 0 ;
  ADAS_REQUEST_CAMERA_CLEAN_MANNUALLY = 1 ;
  ADAS_CAMERA_CLEAN_PREPARATION = 2 ;
  ADAS_CAMERA_CLEAN_SYSTEM_FAULT = 3 ;
  ADAS_TEMPERATURE_LOW_CLEAN_UNAVAILABLE = 4 ;
  ADAS_TOO_DIRTY_REQUEST_CAMERA_CLEAN_MANNUALLY = 5 ;
  ADAS_ENVIROMENT_DIRTY_REQUEST_CAMERA_CLEAN_MANNUALLY = 6 ;
  ADAS_CLEAN_COMPLETE = 7 ;
}

enum  aDAS_NaviWarnings  {

  ADAS_RESERVE_Navi_MSG_0 = 0 ;
  ADAS_RESERVE_Navi_MSG_1 = 1 ;
  ADAS_RESERVE_Navi_MSG_2 = 2 ;
  ADAS_RESERVE_Navi_MSG_3 = 3 ;
  ADAS_RESERVE_Navi_MSG_4 = 4 ;
  ADAS_RESERVE_Navi_MSG_5 = 5 ;
  ADAS_RESERVE_Navi_MSG_6 = 6 ;
  ADAS_RESERVE_Navi_MSG_7 = 7 ;
  ADAS_RESERVE_Navi_MSG_8 = 8 ;
  ADAS_RESERVE_Navi_MSG_9 = 9 ;
  ADAS_RESERVE_Navi_MSG_10 = 10 ;
  ADAS_RESERVE_Navi_MSG_11 = 11 ;
  ADAS_RESERVE_Navi_MSG_12 = 12 ;
  ADAS_RESERVE_Navi_MSG_13 = 13 ;
  ADAS_RESERVE_Navi_MSG_14 = 14 ;
  ADAS_RESERVE_Navi_MSG_15 = 15 ;
  ADAS_RESERVE_Navi_MSG_16 = 16 ;
  ADAS_RESERVE_Navi_MSG_17 = 17 ;
  ADAS_RESERVE_Navi_MSG_18 = 18 ;
  ADAS_RESERVE_Navi_MSG_19 = 19 ;
  ADAS_RESERVE_Navi_MSG_20 = 20 ;
  ADAS_RESERVE_Navi_MSG_21 = 21 ;
  ADAS_RESERVE_Navi_MSG_22 = 22 ;
  ADAS_RESERVE_Navi_MSG_23 = 23 ;
  ADAS_RESERVE_Navi_MSG_24 = 24 ;
  ADAS_RESERVE_Navi_MSG_25 = 25 ;
  ADAS_RESERVE_Navi_MSG_26 = 26 ;
  ADAS_RESERVE_Navi_MSG_27 = 27 ;
  ADAS_RESERVE_Navi_MSG_28 = 28 ;
  ADAS_RESERVE_Navi_MSG_29 = 29 ;
  ADAS_RESERVE_Navi_MSG_30 = 30 ;
  ADAS_RESERVE_Navi_MSG_31 = 31 ;
  ADAS_RESERVE_Navi_MSG_32 = 32 ;
  ADAS_RESERVE_Navi_MSG_33 = 33 ;
  ADAS_RESERVE_Navi_MSG_34 = 34 ;
  ADAS_RESERVE_Navi_MSG_35 = 35 ;
  ADAS_RESERVE_Navi_MSG_36 = 36 ;
  ADAS_RESERVE_Navi_MSG_37 = 37 ;
  ADAS_RESERVE_Navi_MSG_38 = 38 ;
  ADAS_RESERVE_Navi_MSG_39 = 39 ;
  ADAS_RESERVE_Navi_MSG_40 = 40 ;
  ADAS_RESERVE_Navi_MSG_41 = 41 ;
  ADAS_RESERVE_Navi_MSG_42 = 42 ;
  ADAS_RESERVE_Navi_MSG_43 = 43 ;
  ADAS_RESERVE_Navi_MSG_44 = 44 ;
  ADAS_RESERVE_Navi_MSG_45 = 45 ;
  ADAS_RESERVE_Navi_MSG_46 = 46 ;
  ADAS_RESERVE_Navi_MSG_47 = 47 ;
  ADAS_RESERVE_Navi_MSG_48 = 48 ;
  ADAS_RESERVE_Navi_MSG_49 = 49 ;
  ADAS_RESERVE_Navi_MSG_50 = 50 ;
  ADAS_RESERVE_Navi_MSG_51 = 51 ;
  ADAS_RESERVE_Navi_MSG_52 = 52 ;
  ADAS_RESERVE_Navi_MSG_53 = 53 ;
  ADAS_RESERVE_Navi_MSG_54 = 54 ;
  ADAS_RESERVE_Navi_MSG_55 = 55 ;
  ADAS_RESERVE_Navi_MSG_56 = 56 ;
  ADAS_RESERVE_Navi_MSG_57 = 57 ;
  ADAS_RESERVE_Navi_MSG_58 = 58 ;
  ADAS_RESERVE_Navi_MSG_59 = 59 ;
  ADAS_RESERVE_Navi_MSG_60 = 60 ;
}

enum  aDAS_CONSTELLATION  {

  ADAS_GPS = 0 ;
  ADAS_GLONASS = 1 ;
  ADAS_GALILEO = 2 ;
  ADAS_BEIDOU = 3 ;
}

message  aDAS_Ephemeris  {

  optional	 uint32	 FREQUENCY = 1 ;
  optional	 aDAS_CONSTELLATION	 ADAS_CONSTELLATION = 2 ;
  optional	 uint32	 VISIBLE_SATELLITE_NUMBER = 3 ;
  optional	 uint32	 SATELLITEC_ID = 4 ;
  optional	 float	 ELEVATION = 5 ;
  optional	 float	 AZIMUTH = 6 ;
  optional	 uint32	 SIGNAL_NOISE_RATIO = 7 ;
  optional	 float	 TIMESTAMP = 8 ;
}

message  aDAS_LeftLaneDrawParameter  {

  optional	 float	 C0 = 1 ;
  optional	 float	 C1 = 2 ;
  optional	 float	 C2 = 3 ;
  optional	 float	 C3 = 4 ;
  optional	 uint32	 Confidence = 5 ;
}

message  aDAS_RightLaneDrawParameter  {

  optional	 float	 C0 = 1 ;
  optional	 float	 C1 = 2 ;
  optional	 float	 C2 = 3 ;
  optional	 float	 C3 = 4 ;
  optional	 uint32	 Confidence = 5 ;
}

enum  roadMarkingTypeL2PP  {

  SINGLE_SOLIDTYPE = 0 ;
  SINGLE_DASHEDTYPE = 1 ;
  DOUBLE_SOLIDTYPE = 2 ;
  RIGHT_SOLID_LEFT_DASHEDTYPE = 3 ;
  RIGHT_DASHED_LEFT_SOLIDTYPE = 4 ;
  DOUBLE_DASHEDTYPE = 5 ;
  ROAD_EDGETYPE = 6 ;
  BARRIERTYPE = 7 ;
  DRIVEWAY_EDGETYPE = 8 ;
  LANE_MARKER_NONETYPE = 9 ;
  RESERVE_FOR_LEFT_LMT_1TYPE = 10 ;
  RESERVE_FOR_LEFT_LMT_2TYPE = 11 ;
  RESERVE_FOR_LEFT_LMT_3TYPE = 12 ;
  RESERVE_FOR_LEFT_LMT_4TYPE = 13 ;
  RESERVE_FOR_LEFT_LMT_5TYPE = 14 ;
}

message  aDAS_LaneMarkingForLaneLevelLocalization  {

  optional	 uint64	 ID = 1 ;
  repeated	 threedemension_Position_Points	 ADAS_LeftBoundaryPoint = 3 ;
  repeated	 threedemension_Position_Points	 ADAS_RightBoundaryPoint = 4 ;
  optional	 roadMarkingTypeL2PP	 ADAS_LeftBoundary_LaneMarkerTypeNew = 5 ;
  optional	 roadMarkingTypeL2PP	 ADAS_RightBoundary_LaneMarkerTypeNew = 6 ;
  optional	 float	 LeftBoundary_LaneMarkerTypeNewConfidence = 7 ;
  optional	 float	 LeftBoundary_LaneMarkerColorConfidence = 8 ;
  optional	 float	 RightBoundary_LaneMarkerTypeNewConfidence = 9 ;
  optional	 float	 RightBoundary_LaneMarkerColorConfidence = 10 ;
  repeated	 float	 RoadMarkingCoords_FrontLeft = 11 ;
  repeated	 float	 RoadMarkingCoords_FrontRight = 12 ;
  repeated	 float	 RoadMarkingCoords_RearLeft = 13 ;
  repeated	 float	 RoadMarkingCoords_RearRight = 14 ;
  optional	 aDAS_RoadMarkingType	 ADAS_RoadMarkingType = 15 ;
  optional	 aDAS_LaneMarkingType	 ADAS_LaneMarkingType = 16 ;
  optional	 aDAS_LaneMarkingColor	 ADAS_LaneMarkingColor = 17 ;
  optional	 uint32	 LaneID = 18 ;
  optional	 uint32	 LaneMarkingDistance = 19 ;
  optional	 float	 Timestamp = 20 ;
  optional	 uint32	 LaneIndex = 21 ;
}

enum  aDAS_Route_ID  {

  ADAS_No_Route = 0 ;
  ADAS_Route_One = 1 ;
  ADAS_Route_Two = 2 ;
  ADAS_Route_Three = 3 ;
}

message  aDAS_ODD_Info  {

  optional	 aDAS_Route_ID	 ADAS_Route_ID = 1 ;
  optional	 float	 ODD_Percentage = 2 ;
}

enum  aDAS_Switch_segments_mode  {

  ADAS_UNMATCH = 0 ;
  ADAS_HD_HIGHWAY = 1 ;
  ADAS_HD_URBAN = 2 ;
  ADAS_NO_HD_HIGHWAY = 3 ;
  ADAS_NO_HD_URBAN = 4 ;
  ADAS_HD_ODD = 5 ;
  ADAS_LANDTOPO_ODD = 6 ;
}

message  aDAS_Switch_segments  {

  optional	 uint32	 Switch_segments_ID = 1 ;
  optional	 uint32	 Switch_segments_begin = 2 ;
  optional	 uint32	 Switch_segments_end = 3 ;
  optional	 uint32	 Switch_segments_begin_link_index = 4 ;
  optional	 uint32	 Switch_segments_begin_link_offset = 5 ;
  optional	 uint32	 Switch_segments_end_link_index = 6 ;
  optional	 uint32	 Switch_segments_end_link_offset = 7 ;
  optional	 aDAS_Switch_segments_mode	 ADAS_Switch_segments_mode = 8 ;
  optional	 string	 Switch_segments_mode_describe = 9 ;
  optional	 pointType	 ADAS_Switch_segments_coords = 10 ;
}

enum  aDAS_Match_results_Segment_Type  {

  ADAS_OUT_OF_ODDType = 0 ;
  ADAS_MATCHEDType = 1 ;
  ADAS_UNMATCHEDType = 2 ;
}

message  aDAS_Match_results  {

  optional	 aDAS_Match_results_Segment_Type	 ADAS_Match_results_Segment_Type = 1 ;
  optional	 uint32	 Match_results_odd_type = 2 ;
  optional	 string	 Match_results_odd_id = 3 ;
}

enum  aDAS_Route_setup_status  {

  ADAS_NORMALSTATUS = 0 ;
  ADAS_ROUTE_NOT_SETSTATUS = 1 ;
  ADAS_ROUTE_SETSTATUS = 2 ;
  ADAS_ROUTE_CALCULATINGSTATUS = 3 ;
  ADAS_ROUTE_YAWSTATUS = 4 ;
}

enum  aDAS_Subscription_State  {

  ADAS_Subscribed_Unkown = 0 ;
  ADAS_Subscribed_Success = 1 ;
  ADAS_Subscribed_Fail = 2 ;
}


//**********************
//Interface ID: 46 iSurroundVisionRecorder
//**********************

//Method 4601 SurroundVisionRecorderData
//--------------------------------------
message  SurroundVisionRecorderData_request_response  {

  optional	 bytes	 SurroundVisionRecorderData = 1 ;
}

message  SurroundVisionRecorderData_response  {

  optional	 bytes	 SurroundVisionRecorderData = 1 ;
}

//Property 4602 SVRTimeOfPlay
//--------------------------------------
message  SVRTimeOfPlay_status  {

  optional	 uint32	 SVRTimeOfPlayTimer = 1 ;
}

//Event 4603 SVREndOfFile
//--------------------------------------
message  SVREndOfFile_event  {

  optional	 bool	 SVREndOfFileState = 1 ;
}

//Event 4604 SurroundVisionRecorderDataAck
//--------------------------------------
//message  SurroundVisionRecorderDataAck_event  {
//
//No parameters, so GPB not necessary.
//}


//**********************
//Interface ID: 47 iLCMManager
//**********************

//Method 4701 LCMData
//--------------------------------------
message  LCMData_request_response  {

  repeated	 licenseInfo	 LicenseInfo = 1 ;
}

message  LCMData_response  {

  optional	 bool	 LCMDataStatus = 1 ;
}

message  files  {

  optional	 string	 FileNames = 1 ;
}

message  licenseText  {

  optional	 string	 Para = 1 ;
}

message  license  {

  optional	 string	 Title = 1 ;
  optional	 string	 Date = 2 ;
  optional	 string	 Language = 3 ;
  repeated	 files	 Files = 4 ;
  repeated	 licenseText	 LicenseText = 5 ;
}

message  licenseInfo  {

  repeated	 license	 License = 1 ;
}


//**********************
//Interface ID: 48 iUltifiFSABridge
//**********************

//Method 4801 UltifiDataIN
//--------------------------------------
message  UltifiDataIN_request  {

  optional	 bytes	 UltifiData = 1 ;
  optional	 string	 URI = 2 ;
  optional	 uint32	 Size = 3 ;
}

//Event 4802 UltifiDataOUT
//--------------------------------------
message  UltifiDataOUT_event  {

  optional	 bytes	 UltifiData = 1 ;
  optional	 string	 URI = 2 ;
  optional	 uint32	 Size = 3 ;
}


//**********************
//Interface ID: 49 iArcade
//**********************

//Method 4901 ArcadeIN
//--------------------------------------
message  ArcadeIN_request  {

  optional	 bytes	 ArcadeData = 1 ;
  optional	 uint32	 ArcadeTo = 2 ;
  optional	 uint32	 ArcadeFrom = 3 ;
}

//Event 4902 ArcadeOUT
//--------------------------------------
message  ArcadeOUT_event  {

  optional	 bytes	 ArcadeData = 1 ;
  optional	 uint32	 ArcadeTo = 2 ;
  optional	 uint32	 ArcadeFrom = 3 ;
}


//**********************
//Interface ID: 50 iAVAudioManager
//**********************

//Property 5001 AVAudioBalance
//--------------------------------------
message  AVAudioBalance_set  {

  optional	 int32	 BalanceLeft = 1 ;
  optional	 int32	 BalanceRight = 2 ;
}

message  AVAudioBalance_status  {

  optional	 int32	 BalanceLeft = 1 ;
  optional	 int32	 BalanceRight = 2 ;
}

//Property 5002 AVAudioFade
//--------------------------------------
message  AVAudioFade_set  {

  optional	 int32	 FadeFront = 1 ;
  optional	 int32	 FadeRear = 2 ;
}

message  AVAudioFade_status  {

  optional	 int32	 FadeFront = 1 ;
  optional	 int32	 FadeRear = 2 ;
}

//Property 5003 AVAudioBass
//--------------------------------------
message  AVAudioBass_set  {

  optional	 int32	 Bass = 1 ;
}

message  AVAudioBass_status  {

  optional	 int32	 Bass = 1 ;
}

//Property 5004 AVAudioMidrange
//--------------------------------------
message  AVAudioMidrange_set  {

  optional	 int32	 Midrange = 1 ;
}

message  AVAudioMidrange_status  {

  optional	 int32	 Midrange = 1 ;
}

//Property 5005 AVAudioTreble
//--------------------------------------
message  AVAudioTreble_set  {

  optional	 int32	 Treble = 1 ;
}

message  AVAudioTreble_status  {

  optional	 int32	 Treble = 1 ;
}

//Property 5006 AVAudioEntertainmentVolume
//--------------------------------------
message  AVAudioEntertainmentVolume_set  {

  optional	 float	 EntertainmentVolume = 1 ;
}

message  AVAudioEntertainmentVolume_status  {

  optional	 float	 EntertainmentVolume = 1 ;
}

//Property 5007 AVAudioEmergencyPhoneVolume
//--------------------------------------
message  AVAudioEmergencyPhoneVolume_set  {

  optional	 float	 EmergencyPhoneVolume = 1 ;
}

message  AVAudioEmergencyPhoneVolume_status  {

  optional	 float	 EmergencyPhoneVolume = 1 ;
}

//Property 5008 AVAudioChimeVolume
//--------------------------------------
message  AVAudioChimeVolume_set  {

  optional	 float	 ChimeVolume = 1 ;
}

message  AVAudioChimeVolume_status  {

  optional	 float	 ChimeVolume = 1 ;
}

//Property 5009 AVAudioEntertainmentVolumeMute
//--------------------------------------
message  AVAudioEntertainmentVolumeMute_set  {

  optional	 bool	 EntertainmentVolumeMute = 1 ;
}

message  AVAudioEntertainmentVolumeMute_status  {

  optional	 bool	 EntertainmentVolumeMute = 1 ;
}

//Property 5010 AVAudioEmergencyPhoneRingtoneVolume
//--------------------------------------
message  AVAudioEmergencyPhoneRingtoneVolume_set  {

  optional	 float	 EmergencyPhoneRingtoneVolume = 1 ;
}

message  AVAudioEmergencyPhoneRingtoneVolume_status  {

  optional	 float	 EmergencyPhoneRingtoneVolume = 1 ;
}

//Property 5011 AVAudioExteriorVolumeMute
//--------------------------------------
message  AVAudioExteriorVolumeMute_set  {

  optional	 bool	 ExteriorVolumeMute = 1 ;
}

message  AVAudioExteriorVolumeMute_status  {

  optional	 bool	 ExteriorVolumeMute = 1 ;
}

//Property 5012 ExteriorAudioStateofHealth
//--------------------------------------
message  ExteriorAudioStateofHealth_status  {

  optional	 exteriorSpeakerHealth	 ExteriorSpeakerHealth = 1 ;
}

//Property 5013 CabinAudioStateofHealth
//--------------------------------------
message  CabinAudioStateofHealth_status  {

  optional	 interiorSpeakerHealth	 InteriorSpeakerHealth = 1 ;
}

//Property 5014 InteriorMixerInput1SelectionMuteRampTime
//--------------------------------------
message  InteriorMixerInput1SelectionMuteRampTime_set  {

  optional	 interiorMixerInput1Selection	 InteriorMixerInput1Selection = 1 ;
  optional	 bool	 InteriorMixerInput1Mute = 2 ;
  optional	 float	 InteriorMixerInput1RampTime = 3 ;
}

message  InteriorMixerInput1SelectionMuteRampTime_status  {

  optional	 interiorMixerInput1Selection	 InteriorMixerInput1Selection = 1 ;
  optional	 bool	 InteriorMixerInput1Mute = 2 ;
  optional	 float	 InteriorMixerInput1RampTime = 3 ;
}

//Property 5015 InteriorMixerInput1Gain
//--------------------------------------
message  InteriorMixerInput1Gain_set  {

  optional	 float	 Gain = 1 ;
}

message  InteriorMixerInput1Gain_status  {

  optional	 float	 Gain = 1 ;
}

//Property 5016 InteriorMixerInput2SelectionMuteRampTime
//--------------------------------------
message  InteriorMixerInput2SelectionMuteRampTime_set  {

  optional	 interiorMixerInput2Selection	 InteriorMixerInput2Selection = 1 ;
  optional	 bool	 InteriorMixerInput2Mute = 2 ;
  optional	 float	 InteriorMixerInput2RampTime = 3 ;
}

message  InteriorMixerInput2SelectionMuteRampTime_status  {

  optional	 interiorMixerInput2Selection	 InteriorMixerInput2Selection = 1 ;
  optional	 bool	 InteriorMixerInput2Mute = 2 ;
  optional	 float	 InteriorMixerInput2RampTime = 3 ;
}

//Property 5017 InteriorMixerInput2Gain
//--------------------------------------
message  InteriorMixerInput2Gain_set  {

  optional	 float	 Gain = 1 ;
}

message  InteriorMixerInput2Gain_status  {

  optional	 float	 Gain = 1 ;
}

//Property 5018 InteriorMixerOutputMuteRampTime
//--------------------------------------
message  InteriorMixerOutputMuteRampTime_set  {

  optional	 bool	 InteriorMixerOutputMute = 1 ;
  optional	 float	 InteriorMixerOutputRampTime = 2 ;
}

message  InteriorMixerOutputMuteRampTime_status  {

  optional	 bool	 InteriorMixerOutputMute = 1 ;
  optional	 float	 InteriorMixerOutputRampTime = 2 ;
}

//Property 5019 InteriorMixerOutputGain
//--------------------------------------
message  InteriorMixerOutputGain_set  {

  optional	 float	 Gain = 1 ;
}

message  InteriorMixerOutputGain_status  {

  optional	 float	 Gain = 1 ;
}

//Property 5020 ExteriorMixerInput1SelectionMuteRampTime
//--------------------------------------
message  ExteriorMixerInput1SelectionMuteRampTime_set  {

  optional	 exteriorMixerInput1Selection	 ExteriorMixerInput1Selection = 1 ;
  optional	 bool	 ExteriorMixerInput1Mute = 2 ;
  optional	 float	 ExteriorMixerInput1RampTime = 3 ;
}

message  ExteriorMixerInput1SelectionMuteRampTime_status  {

  optional	 exteriorMixerInput1Selection	 ExteriorMixerInput1Selection = 1 ;
  optional	 bool	 ExteriorMixerInput1Mute = 2 ;
  optional	 float	 ExteriorMixerInput1RampTime = 3 ;
}

//Property 5021 ExteriorMixerInput1Gain
//--------------------------------------
message  ExteriorMixerInput1Gain_set  {

  optional	 float	 Gain = 1 ;
}

message  ExteriorMixerInput1Gain_status  {

  optional	 float	 Gain = 1 ;
}

//Property 5022 ExteriorMixerInput2SelectionMuteRampTime
//--------------------------------------
message  ExteriorMixerInput2SelectionMuteRampTime_set  {

  optional	 exteriorMixerInput2Selection	 ExteriorMixerInput2Selection = 1 ;
  optional	 bool	 ExteriorMixerInput2Mute = 2 ;
  optional	 float	 ExteriorMixerInput2RampTime = 3 ;
}

message  ExteriorMixerInput2SelectionMuteRampTime_status  {

  optional	 exteriorMixerInput2Selection	 ExteriorMixerInput2Selection = 1 ;
  optional	 bool	 ExteriorMixerInput2Mute = 2 ;
  optional	 float	 ExteriorMixerInput2RampTime = 3 ;
}

//Property 5023 ExteriorMixerInput2Gain
//--------------------------------------
message  ExteriorMixerInput2Gain_set  {

  optional	 float	 Gain = 1 ;
}

message  ExteriorMixerInput2Gain_status  {

  optional	 float	 Gain = 1 ;
}

//Property 5024 ExteriorMixerOutputMuteRampTime
//--------------------------------------
message  ExteriorMixerOutputMuteRampTime_set  {

  optional	 bool	 ExteriorMixerOutputMute = 1 ;
  optional	 float	 ExteriorMixerOutputRampTime = 2 ;
}

message  ExteriorMixerOutputMuteRampTime_status  {

  optional	 bool	 ExteriorMixerOutputMute = 1 ;
  optional	 float	 ExteriorMixerOutputRampTime = 2 ;
}

//Property 5025 ExteriorMixerOutputGain
//--------------------------------------
message  ExteriorMixerOutputGain_set  {

  optional	 float	 Gain = 1 ;
}

message  ExteriorMixerOutputGain_status  {

  optional	 float	 Gain = 1 ;
}

//Property 5026 MixerInput2Selection
//--------------------------------------
message  MixerInput2Selection_set  {

  optional	 bool	 MixerInput2Selection = 1 ;
}

message  MixerInput2Selection_status  {

  optional	 bool	 MixerInput2Selection = 1 ;
}

//Property 5027 EndNodeSelection
//--------------------------------------
message  EndNodeSelection_set  {

  optional	 bool	 EndNodeSelection = 1 ;
}

message  EndNodeSelection_status  {

  optional	 bool	 EndNodeSelection = 1 ;
}

//Property 5028 A2BFaultStatus
//--------------------------------------
message  A2BFaultStatus_status  {

  optional	 a2BFaultType	 StatusofA2BFaults = 1 ;
}

//Property 5029 AVExteriorAudioFade
//--------------------------------------
message  AVExteriorAudioFade_set  {

  optional	 int32	 ExteriorFadeFront = 1 ;
  optional	 int32	 ExteriorFadeRear = 2 ;
}

message  AVExteriorAudioFade_status  {

  optional	 int32	 ExteriorFadeFront = 1 ;
  optional	 int32	 ExteriorFadeRear = 2 ;
}

//Property 5030 AVExteriorAudioBass
//--------------------------------------
message  AVExteriorAudioBass_set  {

  optional	 int32	 ExteriorBass = 1 ;
}

message  AVExteriorAudioBass_status  {

  optional	 int32	 ExteriorBass = 1 ;
}

//Property 5031 AVExteriorAudioMidrange
//--------------------------------------
message  AVExteriorAudioMidrange_set  {

  optional	 int32	 ExteriorMidrange = 1 ;
}

message  AVExteriorAudioMidrange_status  {

  optional	 int32	 ExteriorMidrange = 1 ;
}

//Property 5032 AVExteriorAudioTreble
//--------------------------------------
message  AVExteriorAudioTreble_set  {

  optional	 int32	 ExteriorTreble = 1 ;
}

message  AVExteriorAudioTreble_status  {

  optional	 int32	 ExteriorTreble = 1 ;
}

enum  exteriorSpeakerHealth  {

  ExteriorSpeakerHealth_DTC_Unknown = 0 ;
  ExteriorSpeakerHealth_DTC_PartialLoss = 1 ;
  ExteriorSpeakerHealth_DTC_FullLoss = 2 ;
  ExteriorSpeakerHealth_DTC_NoFaultsDetected = 3 ;
}

enum  interiorSpeakerHealth  {

  InteriorSpeakerHealth_DTC_Unknown = 0 ;
  InteriorSpeakerHealth_DTC_PartialLoss = 1 ;
  InteriorSpeakerHealth_DTC_FullLoss = 2 ;
  InteriorSpeakerHealth_DTC_NoFaultsDetected = 3 ;
}

enum  interiorMixerInput1Selection  {

  TANG2InteriorCallAudio = 0 ;
  TANG2InteriorBackupAudioAlertsInput1 = 1 ;
}

enum  interiorMixerInput2Selection  {

  IDCMInterior = 0 ;
  TANG2InteriorBackupAudioAlertsInput2 = 1 ;
}

enum  exteriorMixerInput1Selection  {

  TANG2ExteriorCallAudio = 0 ;
  TANG2ExteriorBackupAudioAlertsInput1 = 1 ;
  TANG2PFAFAudio = 2 ;
}

enum  exteriorMixerInput2Selection  {

  IDCMExterior = 0 ;
  TANG2ExteriorBackupAudioAlertsInput2 = 1 ;
}

message  a2BFaultType  {

  optional	 bool	 Unknown = 1 ;
  optional	 bool	 CableFaultAfterDiscovery = 2 ;
  optional	 bool	 LossofMasterClock = 3 ;
  optional	 bool	 A2BDiscoveryTimeout = 4 ;
  optional	 bool	 NoFaultsDetected = 5 ;
}


//**********************
//Interface ID: 52 iAVEHDGateway
//**********************

//Method 5201 StoreImage
//--------------------------------------
message  StoreImage_request_response  {

  optional	 uint32	 LeftFrontStoreLocation = 1 ;
  optional	 uint32	 LeftRearStoreLocation = 2 ;
  optional	 uint32	 RightFrontStoreLocation = 3 ;
  optional	 uint32	 RightRearStoreLocation = 4 ;
  optional	 bytes	 PixelData = 5 ;
}

message  StoreImage_response  {

  optional	 storeImageResultCodeType	 LeftFrontResultCode = 1 ;
  optional	 storeImageResultCodeType	 LeftRearResultCode = 2 ;
  optional	 storeImageResultCodeType	 RightFrontResultCode = 3 ;
  optional	 storeImageResultCodeType	 RightRearResultCode = 4 ;
}

//Method 5202 DisplayImage
//--------------------------------------
message  DisplayImage_request_response  {

  repeated	 leftFrontDisplay	 LeftFrontDisplay = 1 ;
  repeated	 leftRearDisplay	 LeftRearDisplay = 2 ;
  repeated	 rightFrontDisplay	 RightFrontDisplay = 3 ;
  repeated	 rightRearDisplay	 RightRearDisplay = 4 ;
}

message  DisplayImage_response  {

  optional	 storeImageResultCodeType	 LeftFrontResultCode = 1 ;
  optional	 storeImageResultCodeType	 LeftRearResultCode = 2 ;
  optional	 storeImageResultCodeType	 RightFrontResultCode = 3 ;
  optional	 storeImageResultCodeType	 RightRearResultCode = 4 ;
}

//Property 5203 MemoryReady
//--------------------------------------
message  MemoryReady_status  {

  repeated	 bool	 LeftFrontMemoryReady = 1 ;
  repeated	 bool	 LefrRearMemoryReady = 2 ;
  repeated	 bool	 RightFrontMemoryReady = 3 ;
  repeated	 bool	 RightRearMemoryReady = 4 ;
}

//Property 5208 LeftFrontDisplayErrorInfo
//--------------------------------------
message  LeftFrontDisplayErrorInfo_status  {

  optional	 lEDStatusType	 LEDStatus = 1 ;
  optional	 temperatureStatusType	 TemperatureStatus = 2 ;
  optional	 communicationStatusType	 CommunicationStatus = 3 ;
}

//Property 5209 LeftRearDisplayErrorInfo
//--------------------------------------
message  LeftRearDisplayErrorInfo_status  {

  optional	 lEDStatusType	 LEDStatus = 1 ;
  optional	 temperatureStatusType	 TemperatureStatus = 2 ;
  optional	 communicationStatusType	 CommunicationStatus = 3 ;
}

//Property 5210 RightFrontDisplayErrorInfo
//--------------------------------------
message  RightFrontDisplayErrorInfo_status  {

  optional	 lEDStatusType	 LEDStatus = 1 ;
  optional	 temperatureStatusType	 TemperatureStatus = 2 ;
  optional	 communicationStatusType	 CommunicationStatus = 3 ;
}

//Property 5211 RightRearDisplayErrorInfo
//--------------------------------------
message  RightRearDisplayErrorInfo_status  {

  optional	 lEDStatusType	 LEDStatus = 1 ;
  optional	 temperatureStatusType	 TemperatureStatus = 2 ;
  optional	 communicationStatusType	 CommunicationStatus = 3 ;
}

//Property 5212 ManufacturingInfo
//--------------------------------------
message  ManufacturingInfo_status  {

  optional	 uint32	 LeftFrontPartNumber = 1 ;
  optional	 uint32	 LeftRearPartNumber = 2 ;
  optional	 uint32	 RightFrontPartNumber = 3 ;
  optional	 uint32	 RightRearPartNumber = 4 ;
}

//Event 5204 LeftFrontDisplayedImage
//--------------------------------------
message  LeftFrontDisplayedImage_event  {

  optional	 uint32	 CurrentImage = 1 ;
}

//Event 5205 RightFrontDisplayedImage
//--------------------------------------
message  RightFrontDisplayedImage_event  {

  optional	 uint32	 CurrentImage = 1 ;
}

//Event 5206 LeftRearDisplayedImage
//--------------------------------------
message  LeftRearDisplayedImage_event  {

  optional	 uint32	 CurrentImage = 1 ;
}

//Event 5207 RightRearDisplayedImage
//--------------------------------------
message  RightRearDisplayedImage_event  {

  optional	 uint32	 CurrentImage = 1 ;
}

enum  storeImageResultCodeType  {

  DisplayCommandSuccess = 0 ;
  DisplayCommandInvalid = 1 ;
  DisplayCommandTimeout = 2 ;
}

enum  displayRefreshRateType  {

  Static_0_ms = 0 ;
  Static_50_ms = 1 ;
  Static_100_ms = 2 ;
  Static_150_ms = 3 ;
  Static_200_ms = 4 ;
  Static_250_ms = 5 ;
  Static_300_ms = 6 ;
  Static_350_ms = 7 ;
  Static_400_ms = 8 ;
  Static_450_ms = 9 ;
  Static_500_ms = 10 ;
  Static_550_ms = 11 ;
  Static_600_ms = 12 ;
  Static_650_ms = 13 ;
  Static_700_ms = 14 ;
  Static_750_ms = 15 ;
}

message  leftFrontDisplay  {

  optional	 uint32	 DisplayStartMemory = 1 ;
  optional	 uint32	 DisplayEndMemory = 2 ;
  optional	 displayRefreshRateType	 DisplayRefreshRate = 3 ;
}

message  leftRearDisplay  {

  optional	 uint32	 DisplayStartMemory = 1 ;
  optional	 uint32	 DisplayEndMemory = 2 ;
  optional	 displayRefreshRateType	 DisplayRefreshRate = 3 ;
}

message  rightFrontDisplay  {

  optional	 uint32	 DisplayStartMemory = 1 ;
  optional	 uint32	 DisplayEndMemory = 2 ;
  optional	 displayRefreshRateType	 DisplayRefreshRate = 3 ;
}

message  rightRearDisplay  {

  optional	 uint32	 DisplayStartMemory = 1 ;
  optional	 uint32	 DisplayEndMemory = 2 ;
  optional	 displayRefreshRateType	 DisplayRefreshRate = 3 ;
}

enum  lEDStatusType  {

  LED_Unknown = 0 ;
  LED_Error = 1 ;
  LED_NoError = 2 ;
}

enum  temperatureStatusType  {

  Temp_Unknown = 0 ;
  Temp_OverTemperatureError = 1 ;
  Temp_NormalOperatingRange = 2 ;
}

enum  communicationStatusType  {

  Comm_Unknown = 0 ;
  Comm_Normal = 1 ;
  Comm_NoCommunication = 2 ;
}


//**********************
//Interface ID: 60 iRSIFPIMediaControl
//**********************

//Method 6001 ToggleDisplay
//--------------------------------------
message  ToggleDisplay_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 bool	 ScreenStatus = 2 ;
}

//Method 6003 ToggleAudio
//--------------------------------------
message  ToggleAudio_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 bool	 AudioStatus = 2 ;
}

//Method 6005 ToggleScreenLock
//--------------------------------------
message  ToggleScreenLock_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 bool	 ScreenLockStatus = 2 ;
}

//Method 6007 TogglePlayPause
//--------------------------------------
message  TogglePlayPause_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 playPauseStatusType	 PlayPauseStatus = 2 ;
}

//Method 6009 ScreenShare
//--------------------------------------
message  ScreenShare_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 screenShareStatusType	 ScreenShareStatus = 2 ;
  optional	 bool	 ScreenShareRole = 3 ;
}

//Method 6011 MediaProvidersJSON
//--------------------------------------
message  MediaProvidersJSON_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
}

message  MediaProvidersJSON_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bytes	 JSONPayload = 2 ;
}

//Method 6012 MediaProvidersJSONValidation
//--------------------------------------
message  MediaProvidersJSONValidation_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 bool	 JSONValidationStatus = 2 ;
}

//Method 6015 RSIFPIMediaMetaData
//--------------------------------------
message  RSIFPIMediaMetaData_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 string	 MediaTitleLine1 = 2 ;
  optional	 string	 MediaTitleLine2 = 3 ;
  optional	 uint32	 MediaTotalLength = 4 ;
  optional	 uint32	 MediaElapsedTime = 5 ;
  optional	 bytes	 MediaMetaData = 6 ;
}

//Method 6017 ToggleListenIn
//--------------------------------------
message  ToggleListenIn_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 listenInStatus	 ListenInStatus = 2 ;
}

//Method 6020 SelectedSource
//--------------------------------------
message  SelectedSource_request  {

  optional	 targetDeviceType	 SourceDevice = 1 ;
  optional	 selectedSourceType	 SelectedSourceType = 2 ;
  optional	 string	 StreamingServiceID = 3 ;
}

//Method 6021 BrowserBroadcastData
//--------------------------------------
message  BrowserBroadcastData_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 browserTabType	 RSIFPIBrowserTabState = 2 ;
  optional	 string	 FocusTabID = 3 ;
  optional	 string	 FocusTabTitle = 4 ;
  optional	 string	 FocusTabDomain = 5 ;
}

//Method 6023 AnalyticsData
//--------------------------------------
message  AnalyticsData_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 string	 EventKey = 2 ;
  optional	 bytes	 AnalyticsDataPayload = 3 ;
}

//Method 6025 RSIFPIEntitlements
//--------------------------------------
message  RSIFPIEntitlements_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
}

message  RSIFPIEntitlements_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bytes	 EntitlementsInfo = 2 ;
}

//Property 6019 RSIFPIBrowserTabInfo
//--------------------------------------
message  RSIFPIBrowserTabInfo_status  {

}

//Event 6002 ToggleDisplayEvent
//--------------------------------------
message  ToggleDisplayEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 ScreenStatus = 2 ;
}

//Event 6004 ToggleAudioEvent
//--------------------------------------
message  ToggleAudioEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 AudioStatus = 2 ;
}

//Event 6006 ToggleScreenLockEvent
//--------------------------------------
message  ToggleScreenLockEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 ScreenLockStatus = 2 ;
}

//Event 6008 TogglePlayPauseEvent
//--------------------------------------
message  TogglePlayPauseEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 playPauseStatusType	 PlayPauseStatus = 2 ;
}

//Event 6010 ScreenShareEvent
//--------------------------------------
message  ScreenShareEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 screenShareStatusType	 ScreenShareStatus = 2 ;
}

//Event 6013 MediaProvidersJSONNotificationEvent
//--------------------------------------
message  MediaProvidersJSONNotificationEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bytes	 JSONPayload = 2 ;
}

//Event 6014 SourceSelection
//--------------------------------------
message  SourceSelection_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 sourceType	 SourceType = 2 ;
  optional	 string	 StreamingServiceID = 3 ;
}

//Event 6016 FrontMediaAppActive
//--------------------------------------
message  FrontMediaAppActive_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 FrontMediaAppActive = 2 ;
}

//Event 6018 ToggleListenInRequest
//--------------------------------------
message  ToggleListenInRequest_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 ListenInStateChange = 2 ;
}

//Event 6022 TabStateChange
//--------------------------------------
message  TabStateChange_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 browserTabType	 TabState = 2 ;
}

//Event 6024 Entitlements
//--------------------------------------
message  Entitlements_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bytes	 EntitlementsInfo = 2 ;
}

enum  sourceDeviceType  {

  SourceDevice_None = 0 ;
  SourceDevice_RSI1 = 2 ;
  SourceDevice_RSI2 = 3 ;
  SourceDevice_FPI = 4 ;
}

enum  playPauseStatusType  {

  PlayPauseStatus_None = 0 ;
  PlayPauseStatus_Play = 1 ;
  PlayPauseStatus_Pause = 2 ;
  PlayPauseStatus_Loading = 3 ;
  PlayPauseStatus_Buffering = 4 ;
  PlayPauseStatus_Stop = 5 ;
}

enum  screenShareStatusType  {

  ScreenShareStatus_Unavailable = 0 ;
  ScreenShareStatus_Off = 1 ;
  ScreenShareStatus_On = 2 ;
}

enum  targetDeviceType  {

  TargetDevice_None = 0 ;
  TargetDevice_Broadcast = 1 ;
  TargetDevice_RSI1 = 2 ;
  TargetDevice_RSI2 = 3 ;
  TargetDevice_FPI = 4 ;
}

enum  listenInStatus  {

  ListenInStatus_Unavailable = 0 ;
  ListenInStatus_ListenInAvailable = 1 ;
  ListenInStatus_ListenInActive = 2 ;
}

enum  selectedSourceType  {

  SelectedSourceType_None = 0 ;
  SelectedSourceType_HDMI1 = 1 ;
  SelectedSourceType_HDMI2 = 2 ;
  SelectedSourceType_StreamingService = 3 ;
  SelectedSourceType_Browser = 4 ;
  SelectedSourceType_Settings = 5 ;
  SelectedSourceType_VehicleInfo = 6 ;
}

enum  browserTabType  {

  BrowserTab_None = 0 ;
  BrowserTab_Open = 1 ;
  BrowserTab_Close = 2 ;
  BrowserTab_Hidden = 3 ;
  BrowserTab_Shown = 4 ;
}

enum  sourceType  {

  SourceType_None = 0 ;
  SourceType_HDMI1 = 1 ;
  SourceType_HDMI2 = 2 ;
  SourceType_StreamingService = 3 ;
  SourceType_Browser = 4 ;
  SourceType_Settings = 5 ;
  SourceType_VehicleInfo = 6 ;
}


//**********************
//Interface ID: 61 iRSIFPISettings
//**********************

//Method 6100 ToggleVideoVoiceOver
//--------------------------------------
message  ToggleVideoVoiceOver_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 bool	 VideoVoiceOverStatus = 2 ;
}

//Method 6102 LocationServicesEnableRequest
//--------------------------------------
message  LocationServicesEnableRequest_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
}

message  LocationServicesEnableRequest_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 LocationServiceEnableRequestResponse = 2 ;
}

//Method 6103 LocationServicesSetting
//--------------------------------------
message  LocationServicesSetting_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
}

message  LocationServicesSetting_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 LocationServicesSetting = 2 ;
}

//Method 6108 RSITerms
//--------------------------------------
message  RSITerms_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
}

message  RSITerms_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 string	 RSITermsData = 2 ;
}

//Method 6109 HiddenMediaServices
//--------------------------------------
message  HiddenMediaServices_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 string	 GeneratedIDFromJSON = 2 ;
  optional	 bool	 StreamingMediaServiceVisible = 3 ;
}

//Method 6111 BrowserEnabledState
//--------------------------------------
message  BrowserEnabledState_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 bool	 BrowserEnabledState = 2[default = true];
}

//Method 6113 RSIFPIReset
//--------------------------------------
message  RSIFPIReset_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 rSIFPIResetType	 RSIFPIResetType = 2 ;
}

//Property 6107 RSITermsConsentStatus
//--------------------------------------
message  RSITermsConsentStatus_status  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 rSITermsConsentStatus	 RSITermsConsentStatus = 2 ;
}

//Property 6115 STRSetToEnable
//--------------------------------------
message  STRSetToEnable_status  {

  optional	 bool	 STRSetToEnableStatus = 1[default = true];
}

//Event 6101 ToggleVideoVoiceOverEvent
//--------------------------------------
message  ToggleVideoVoiceOverEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 VideoVoiceOverStatus = 2 ;
}

//Event 6104 LocationServices
//--------------------------------------
message  LocationServices_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bool	 LocationServicesSetting = 2 ;
}

//Event 6105 RSITermsUpdateNotification
//--------------------------------------
message  RSITermsUpdateNotification_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
}

//Event 6106 RSITermsConsentStatusEvent
//--------------------------------------
message  RSITermsConsentStatusEvent_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 rSITermsConsentStatus	 RSITermsConsentStatus = 2 ;
}

//Event 6110 ToggleVisibleMediaServices
//--------------------------------------
message  ToggleVisibleMediaServices_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 string	 GeneratedIDFromJSON = 2 ;
  optional	 bool	 ShowHideStreamingMediaService = 3 ;
}

//Event 6112 ToggleBrowserEnabled
//--------------------------------------
message  ToggleBrowserEnabled_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 browserEnableState	 BrowserEnableState = 2 ;
  optional	 bool	 ClearBrowserCache = 3 ;
  optional	 bool	 ResetSiteSettings = 4 ;
  optional	 bool	 RemoveBrowserCookies = 5 ;
  optional	 bool	 DeleteBrowserAppData = 6 ;
  optional	 bool	 ClearBrowserHistory = 7 ;
}

//Event 6114 IHUResetNotification
//--------------------------------------
message  IHUResetNotification_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 iHUResetType	 IHUResetType = 2 ;
}

enum  rSIFPIResetType  {

  RSIFPIResetType_None = 0 ;
  RSIFPIResetType1 = 1 ;
  RSIFPIResetType2 = 2 ;
  RSIFPIResetType3 = 3 ;
  RSIFPIResetType4 = 4 ;
  RSIFPIResetType5 = 5 ;
  RSIFPIResetType6 = 6 ;
  RSIFPIResetType7 = 7 ;
}

enum  rSITermsConsentStatus  {

  RSITermsConsentStatus_Unknown = 0 ;
  RSITermsConsentStatus_Declined = 1 ;
  RSITermsConsentStatus_Accepted = 2 ;
}

enum  browserEnableState  {

  BrowserEnableState_NoChange = 0 ;
  BrowserEnableState_Disable = 1 ;
  BrowserEnableState_Enable = 2 ;
}

enum  iHUResetType  {

  IHUResetType_None = 0 ;
  IHUResetType1 = 1 ;
  IHUResetType2 = 2 ;
  IHUResetType3 = 3 ;
  IHUResetType4 = 4 ;
  IHUResetType5 = 5 ;
  IHUResetType6 = 6 ;
  IHUResetType7 = 7 ;
}


//**********************
//Interface ID: 62 iRSIFPIConnectivity
//**********************

//Property 6200 WiFiInVehicleAccessPointParameters
//--------------------------------------
message  WiFiInVehicleAccessPointParameters_status  {

  optional	 string	 SSID = 1 ;
  optional	 string	 PassPhrase = 2 ;
  optional	 wiFiInVehicleAccessPointEncryption	 WiFiInVehicleAccessPointEncryption = 3 ;
  optional	 wiFiInVehicleAccessPointSecurityType	 WiFiInVehicleAccessPointSecurityType = 4 ;
  optional	 wifiHotSpotStateType	 WifiHotSpotState = 5 ;
  optional	 string	 WiFIAPChannel = 6 ;
}

enum  wiFiInVehicleAccessPointEncryption  {

  WiFiInVehicleAccessPointEncryption_OpenEncryption = 0 ;
  WiFiInVehicleAccessPointEncryption_AES = 1 ;
}

enum  wiFiInVehicleAccessPointSecurityType  {

  WiFiInVehicleAccessPointSecurity_Open = 0 ;
  WiFiInVehicleAccessPointSecurity_WPA3Only = 1 ;
  WiFiInVehicleAccessPointSecurity_WPA3Transition = 2 ;
}


//**********************
//Interface ID: 63 iRSIFPIThemes
//**********************

//Method 6302 ThemeAssets
//--------------------------------------
message  ThemeAssets_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 string	 ThemeFeatureID = 2 ;
}

message  ThemeAssets_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 string	 ThemeFeatureID = 2 ;
  optional	 assetFileTypeType	 AssetFileType = 3 ;
  optional	 bytes	 BackgroundWallpaper = 4 ;
  optional	 bytes	 ThemeParameters = 5 ;
  optional	 string	 ThemeVersion = 6 ;
  optional	 bool	 IsSelected = 7 ;
}

//Method 6303 ThemeFeatureIDList
//--------------------------------------
message  ThemeFeatureIDList_request_response  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
}

message  ThemeFeatureIDList_response  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 bytes	 FeatureIDList = 2 ;
}

//Method 6305 ThemeActionConfirmation
//--------------------------------------
message  ThemeActionConfirmation_request  {

  optional	 sourceDeviceType	 SourceDevice = 1 ;
  optional	 string	 ThemeVersion = 2 ;
  optional	 string	 ThemeFeatureID = 3 ;
  optional	 string	 EventID = 4 ;
  repeated	 themeActionResponse	 ThemeActionResponse = 5 ;
}

//Event 6301 ThemeTransfer
//--------------------------------------
message  ThemeTransfer_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 string	 ThemeFeatureID = 2 ;
  optional	 assetFileTypeType	 AssetFileType = 3 ;
  optional	 bytes	 BackgroundWallpaper = 4 ;
  optional	 bytes	 ThemeParameters = 5 ;
  optional	 string	 ThemeVersion = 6 ;
}

//Event 6304 ThemeChangeRequest
//--------------------------------------
message  ThemeChangeRequest_event  {

  optional	 targetDeviceType	 TargetDevice = 1 ;
  optional	 string	 ThemeFeatureID = 2 ;
}

enum  themeActionStatus  {

  THEME_ACTION_SUCCESS = 0 ;
  DOWNLOAD_FAILED = 1 ;
  INSTALL_FAILED = 2 ;
  SELECT_FAILED = 3 ;
}

message  themeActionResponse  {

  optional	 themeActionStatus	 ThemeActionStatus = 1 ;
  optional	 string	 ThemeActionStatusCode = 2 ;
  optional	 string	 ThemeActionStatusErrorString = 3 ;
}


//**********************
//Interface ID: 64 iDigitalmapL2PP
//**********************

//Property 6400 MetaData
//--------------------------------------
message  MetaData_status  {

  optional	 bytes	 MetaData = 1 ;
}

//Property 6401 Position
//--------------------------------------
message  Position_status  {

  optional	 bytes	 PositionData = 1 ;
}

//Property 6402 ProfileLong
//--------------------------------------
message  ProfileLong_status  {

  optional	 bytes	 ProfileLongData = 1 ;
}

//Property 6403 ProfileShort
//--------------------------------------
message  ProfileShort_status  {

  optional	 bytes	 ProfileShortData = 1 ;
}

//Property 6404 Segment
//--------------------------------------
message  Segment_status  {

  optional	 bytes	 SegmentData = 1 ;
}

//Property 6405 Stub
//--------------------------------------
message  Stub_status  {

  optional	 bytes	 StubData = 1 ;
}

//Property 6406 SDRoute
//--------------------------------------
message  SDRoute_status  {

  optional	 bytes	 SDRoute = 1 ;
}

//Property 6407 SDUserSelectSDRoute
//--------------------------------------
message  SDUserSelectSDRoute_status  {

  optional	 bytes	 SDUserSelectSDRoute = 1 ;
}

//Property 6408 SDOffCourse
//--------------------------------------
message  SDOffCourse_status  {

  optional	 bytes	 SDOffCourse = 1 ;
}

//Property 6409 SDNavigationStatus
//--------------------------------------
message  SDNavigationStatus_status  {

  optional	 bytes	 SDNavigationStatus = 1 ;
}

//Property 6410 SDPeriod_SHORTData
//--------------------------------------
message  SDPeriod_SHORTData_status  {

  optional	 bytes	 SDPeriod_SHORTData = 1 ;
}

//Property 6411 SDPeriod_LONGData
//--------------------------------------
message  SDPeriod_LONGData_status  {

  optional	 bytes	 SDPeriod_LONGData = 1 ;
}

//Property 6412 SDEventData
//--------------------------------------
message  SDEventData_status  {

  optional	 bytes	 SDEventData = 1 ;
}

//Property 6413 SDmapReserve
//--------------------------------------
message  SDmapReserve_status  {

  optional	 bytes	 SDmapReserve = 1 ;
}


//**********************
//Interface ID: 65 iPerceptionMessage
//**********************

//Property 6501 ParkingSpotsMap
//--------------------------------------
message  ParkingSpotsMap_status  {

  optional	 googleTimeStamp	 timestamp = 1 ;
  repeated	 parkingSpotInfo	 parking_spots = 2 ;
}

//Property 6502 ObjectsMap
//--------------------------------------
message  ObjectsMap_status  {

  optional	 googleTimeStamp	 timestamp = 1 ;
  repeated	 objectInfo	 Objects = 2 ;
  repeated	 int32	 objects_obstructing_path_object_id = 3 ;
}

enum  type  {

  UNSPECIFIED = 0 ;
  PERPENDICULAR = 10 ;
  PARALLEL = 11 ;
  SLANTED = 12 ;
}

enum  state  {

  STATE_UNSPECIFIED = 0 ;
  NOT_APPLICABLE = 1 ;
  AVAILABLE = 2 ;
  OCCUPIED = 3 ;
  SELECTED = 4 ;
  UNAVAILABLE = 5 ;
}

message  parkingSlotPointType  {

  optional	 float	 x = 1 ;
  optional	 float	 y = 2 ;
  optional	 float	 z = 3 ;
}

enum  parkingDirection  {

  PD_UNSPECIFIED = 0 ;
  PD_BACK_IN = 1 ;
  PD_FRONT_IN = 2 ;
}

message  parkingSpotInfo  {

  optional	 int32	 spot_id = 1 ;
  optional	 type	 Type = 2 ;
  optional	 state	 State = 3 ;
  optional	 parkingSlotPointType	 Corner1 = 4 ;
  optional	 parkingSlotPointType	 Corner2 = 5 ;
  optional	 parkingSlotPointType	 Corner3 = 6 ;
  optional	 parkingSlotPointType	 Corner4 = 7 ;
  optional	 int32	 estimated_num_legs_front_in = 8 ;
  optional	 int32	 estimated_num_legs_back_in = 9 ;
  optional	 parkingDirection	 parking_direction = 10 ;
}

enum  classificationType  {

  OCT_PEDESTRIAN = 0 ;
  OCT_GROUP_PEDESTRIAN = 1 ;
  OCT_BICYCLE = 4 ;
  OCT_SINGLE_MOTORCYCLE = 5 ;
  OCT_SMALL_VEHICLE = 7 ;
  OCT_LARGE_VEHICLE = 8 ;
  OCT_PICKUP_TRUCK = 11 ;
  OCT_PICKUP_SUV_TRAILER = 12 ;
  OCT_BOX_TRUCK = 13 ;
  OCT_SHORTER_SEMI = 14 ;
  OCT_LONGER_SEMI = 15 ;
  OCT_UNKNOWN = 50 ;
  OCT_SUV = 21 ;
  OCT_BUS = 22 ;
  OCT_TRICYCLE = 23 ;
  OCT_TRAFFIC_CONE = 24 ;
  OCT_SPEED_BUMPER = 25 ;
  OCT_COLUMN = 26 ;
  OCT_RESERVED_30 = 30 ;
  OCT_RESERVED_31 = 31 ;
  OCT_RESERVED_32 = 32 ;
  OCT_RESERVED_33 = 33 ;
  OCT_RESERVED_34 = 34 ;
  OCT_RESERVED_35 = 35 ;
  OCT_RESERVED_36 = 36 ;
  OCT_RESERVED_37 = 37 ;
  OCT_RESERVED_38 = 38 ;
  OCT_RESERVED_39 = 39 ;
  OCT_RESERVED_40 = 40 ;
  OCT_RESERVED_41 = 41 ;
  OCT_RESERVED_42 = 42 ;
  OCT_RESERVED_43 = 43 ;
  OCT_RESERVED_44 = 44 ;
  OCT_RESERVED_45 = 45 ;
  OCT_RESERVED_46 = 46 ;
  OCT_RESERVED_47 = 47 ;
  OCT_RESERVED_48 = 48 ;
  OCT_RESERVED_49 = 49 ;
}

message  boundingBox  {

  optional	 float	 width = 1 ;
  optional	 float	 length = 2 ;
  optional	 float	 height = 3 ;
}

message  pose  {

  optional	 float	 yaw = 1 ;
  optional	 float	 pitch = 2 ;
  optional	 float	 roll = 3 ;
}

message  objectDynamics  {

  optional	 float	 vx = 1 ;
  optional	 float	 vy = 2 ;
  optional	 float	 vz = 3 ;
}

message  objectInfo  {

  optional	 int32	 object_id = 1 ;
  optional	 classificationType	 classification_type = 2 ;
  optional	 parkingSlotPointType	 location = 3 ;
  optional	 boundingBox	 bounding_box = 4 ;
  optional	 pose	 pose = 5 ;
  optional	 objectDynamics	 dynamics = 6 ;
}


//**********************
//Interface ID: 66 iParkingMessage
//**********************

//Method 6601 SetSearchModeRequest
//--------------------------------------
message  SetSearchModeRequest_request  {

  optional	 searchMode	 SearchMode = 1 ;
}

//Method 6602 SelectParkingSpotRequest
//--------------------------------------
message  SelectParkingSpotRequest_request  {

  optional	 int32	 Object_ID = 1 ;
  optional	 parkingType	 parking_type = 2 ;
}

//Method 6603 ExitParkingSpotRequest
//--------------------------------------
message  ExitParkingSpotRequest_request  {

  optional	 parkingType	 parking_type = 1 ;
  optional	 parkingSide	 parking_side = 2 ;
  optional	 bool	 is_u_turn = 3 ;
}

//Method 6604 StopRequest
//--------------------------------------
message  StopRequest_request  {

  optional	 bool	 abort = 1 ;
  optional	 bool	 is_complete_learning = 2 ;
}

//Method 6606 StartParkingRequest
//--------------------------------------
message  StartParkingRequest_request  {

  optional	 bool	 is_remote = 1 ;
}

//Method 6617 UpdateParkingSettingsRequest
//--------------------------------------
message  UpdateParkingSettingsRequest_request  {

  optional	 int32	 profile_id = 1 ;
  optional	 parkingSettings	 parking_settings_command = 2 ;
}

//Method 6618 GetParkingSettingsRequest
//--------------------------------------
message  GetParkingSettingsRequest_request_response  {

  optional	 int32	 profile_id = 1 ;
}

message  GetParkingSettingsRequest_response  {

  optional	 int32	 profile_id = 2 ;
  optional	 parkingSettings	 parking_settings = 3 ;
}

//Method 6619 GetParkingSupportedSettingsRequest
//--------------------------------------
message  GetParkingSupportedSettingsRequest_request_response  {

  optional	 int32	 profile_id = 1 ;
}

message  GetParkingSupportedSettingsRequest_response  {

  optional	 int32	 profile_id = 2 ;
  optional	 parkingSupportedSettings	 parking_supported_settings = 3 ;
}

//Method 6620 DeleteLearnedRoutesRequest
//--------------------------------------
message  DeleteLearnedRoutesRequest_request_response  {

  repeated	 int32	 route_id = 1 ;
}

message  DeleteLearnedRoutesRequest_response  {

  repeated	 learnedParkingRoute	 learned_parking_routes = 2 ;
}

//Method 6621 RestoreSettingDefaultsRequest
//--------------------------------------
message  RestoreSettingDefaultsRequest_request  {

}

//Method 6622 ParkingAppActivationStatus
//--------------------------------------
message  ParkingAppActivationStatus_request  {

  optional	 activationStatus	 app_activation_status = 1 ;
  optional	 int32	 app_rolling_count = 2 ;
}

//Method 6624 GetLearnedRoutesRequest
//--------------------------------------
message  GetLearnedRoutesRequest_request_response  {

  optional	 bool	 include_learned_route_details = 1 ;
  repeated	 int32	 learned_route_ids = 2 ;
}

message  GetLearnedRoutesRequest_response  {

  repeated	 learnedParkingRoute	 learned_parking_routes = 2 ;
}

//Method 6623 RenameLearnedRouteRequest
//--------------------------------------
message  RenameLearnedRouteRequest_request_response  {

  optional	 int32	 route_id = 1 ;
  optional	 string	 new_name = 2 ;
}

message  RenameLearnedRouteRequest_response  {

  repeated	 learnedParkingRoute	 learned_parking_routes = 2 ;
}

//Method 6626 RenameLearnedRouteLocationRequest
//--------------------------------------
message  RenameLearnedRouteLocationRequest_request_response  {

  optional	 int32	 route_id = 1 ;
  optional	 string	 new_name = 2 ;
}

message  RenameLearnedRouteLocationRequest_response  {

  repeated	 learnedParkingRoute	 learned_parking_routes = 2 ;
}

//Method 6625 SetLearnedRouteTargetSpotDirectionRequest
//--------------------------------------
message  SetLearnedRouteTargetSpotDirectionRequest_request_response  {

  optional	 int32	 route_id = 1 ;
  optional	 parkingDirection	 target_spot_direction = 2 ;
}

message  SetLearnedRouteTargetSpotDirectionRequest_response  {

  repeated	 learnedParkingRoute	 learned_parking_routes = 2 ;
}

//Property 6607 ParkingSequenceIndicator
//--------------------------------------
message  ParkingSequenceIndicator_status  {

  optional	 parking_sequence	 parking_sequence = 1 ;
}

//Property 6608 DriverNoticeMessage
//--------------------------------------
message  DriverNoticeMessage_status  {

  optional	 driver_notifications	 driver_notifications = 1 ;
}

//Property 6609 VehiclePosition
//--------------------------------------
message  VehiclePosition_status  {

  optional	 googleTimeStamp	 timestamp = 1 ;
  optional	 objectInfo	 host_vehicle_info = 2 ;
  optional	 float	 distance_leg_end = 3 ;
  optional	 uint32	 current_index = 4 ;
  optional	 dynamicDrivingInformationType	 dynamic_driving_information = 5 ;
  optional	 int32	 leg_completion_pct = 6 ;
}

//Property 6610 ParkingPath
//--------------------------------------
message  ParkingPath_status  {

  repeated	 parkingSlotPointType	 path = 1 ;
  repeated	 int32	 legs = 2 ;
}

//Property 6611 PreLaunchMessages
//--------------------------------------
message  PreLaunchMessages_status  {

  optional	 prelaunch_message	 prelaunch_message = 1 ;
}

//Property 6612 AvailableParkingFunctions
//--------------------------------------
message  AvailableParkingFunctions_status  {

  optional	 bool	 is_set_search_park_available = 1 ;
  optional	 bool	 is_set_search_exit_park_available = 2 ;
  optional	 bool	 is_start_parking_in_vehicle_available = 3 ;
  optional	 bool	 is_start_parking_remote_available = 4 ;
  optional	 bool	 is_exit_parking_spot_parallel_available = 5 ;
  optional	 bool	 is_exit_parking_spot_perpendicular_front_available = 6 ;
  optional	 bool	 is_exit_parking_spot_perpendicular_back_available = 7 ;
  optional	 bool	 is_exit_parking_spot_left_available = 8 ;
  optional	 bool	 is_exit_parking_spot_right_available = 9 ;
  optional	 bool	 is_abort_available = 10 ;
  optional	 bool	 is_set_search_learned_parking_pilot_available = 11 ;
  optional	 bool	 is_set_search_learned_parking_learn_available = 12 ;
  optional	 bool	 is_select_parking_spot_perpendicular_front_available = 13 ;
  optional	 bool	 is_select_parking_spot_perpendicular_back_available = 14 ;
  optional	 bool	 is_u_turn_available = 15 ;
  optional	 bool	 is_complete_learning_available = 16 ;
  optional	 bool	 is_update_parking_setting_available = 17 ;
  optional	 bool	 is_map_management_setting_available = 18 ;
  optional	 bool	 is_restore_parking_setting_available = 19 ;
}

//Property 6613 LearnedParkingRoute
//--------------------------------------
message  LearnedParkingRoute_status  {

  optional	 learnedParkingRoute	 LearnedParkingRoute = 1 ;
}

//Property 6614 parking_current_settings
//--------------------------------------
message  parking_current_settings_status  {

  optional	 parkingSettings	 customize_setting = 1 ;
}

//Property 6616 ParkingSupportedSettings
//--------------------------------------
message  ParkingSupportedSettings_status  {

  optional	 parkingSupportedSettings	 customize_setting = 1 ;
}

//Event 6630 ParkingFeatureActivationStatus
//--------------------------------------
message  ParkingFeatureActivationStatus_event  {

  optional	 activationStatus	 feature_activation_status = 1 ;
  optional	 int32	 feature_rolling_count = 2 ;
}

enum  searchMode  {

  SM_UNSPECIFIED = 0 ;
  SM_PARKING = 1 ;
  SM_EXIT_PARKING = 2 ;
  SM_LEARNED_PARKING_PILOT = 3 ;
  SM_LEARNED_PARKING_LEARNING = 4 ;
  SM_RESERVED_5 = 5 ;
  SM_RESERVED_6 = 6 ;
  SM_RESERVED_7 = 7 ;
  SM_RESERVED_8 = 8 ;
  SM_RESERVED_9 = 9 ;
  SM_RESERVED_10 = 10 ;
}

enum  parkingType  {

  PT_UNSPECIFIED = 0 ;
  PT_PERPENDICULAR_FRONT = 1 ;
  PT_PERPENDICULAR_BACK = 2 ;
  PT_PARALLEL = 3 ;
  PT_RESERVED_4 = 4 ;
  PT_RESERVED_5 = 5 ;
  PT_RESERVED_6 = 6 ;
  PT_RESERVED_7 = 7 ;
  PT_RESERVED_8 = 8 ;
  PT_RESERVED_9 = 9 ;
  PT_RESERVED_10 = 10 ;
}

enum  parkingSide  {

  PS_UNSPECIFIED = 0 ;
  PS_RIGHT = 1 ;
  PS_LEFT = 2 ;
}

enum  soundNotificationType  {

  SNT_UNSPECIFIED = 0 ;
  SNT_VOICE = 1 ;
  SNT_CHIME = 2 ;
  SNT_NO_SOUND = 3 ;
}

enum  speedLevel  {

  SL_UNSPECIFIED = 0 ;
  SL_LOW = 1 ;
  SL_MEDIUM = 2 ;
  SL_HIGH = 3 ;
}

message  target_spot_recommend_zone_setting  {

  optional	 int32	 length = 1 ;
  optional	 int32	 width = 2 ;
}

message  parkingSettings  {

  optional	 bool	 learned_parking_enable_setting = 1 ;
  optional	 soundNotificationType	 parking_sound_notification_type_setting = 2 ;
  optional	 bool	 active_popup_learning_available_enable_setting = 3 ;
  optional	 bool	 active_popup_pilot_available_enable_setting = 4 ;
  optional	 speedLevel	 pilot_speed_level_setting = 5 ;
  optional	 speedLevel	 parking_speed_level_setting = 6 ;
  optional	 target_spot_recommend_zone_setting	 target_spot_recommend_zone_setting = 7 ;
}

message  learned_parking_enable_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  optional	 bool	 is_setting_on_default = 3 ;
}

message  parking_sound_notification_type_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  repeated	 bool	 setting_choices_available = 3 ;
  optional	 soundNotificationType	 setting_choice_default = 4 ;
}

message  active_popup_learning_available_enable_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  optional	 bool	 is_setting_on_default = 3 ;
}

message  active_popup_pilot_available_enable_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  optional	 bool	 is_setting_on_default = 3 ;
}

message  pilot_speed_level_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  repeated	 bool	 setting_choices_available = 3 ;
  optional	 speedLevel	 setting_choice_default = 4 ;
}

message  parking_speed_level_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  repeated	 bool	 setting_choices_available = 3 ;
  optional	 speedLevel	 setting_choice_default = 4 ;
}

message  target_spot_recommend_zone_supported_setting  {

  optional	 bool	 is_setting_available = 1 ;
  optional	 bool	 is_setting_supported = 2 ;
  optional	 bool	 length_setting_choices_available = 3 ;
  optional	 bool	 width_setting_choices_available = 4 ;
  optional	 int32	 length_setting_choice_default = 5 ;
  optional	 int32	 width_setting_choice_default = 6 ;
}

message  parkingSupportedSettings  {

  optional	 learned_parking_enable_supported_setting	 learned_parking_enable_supported_setting = 1 ;
  optional	 parking_sound_notification_type_supported_setting	 parking_sound_notification_type_supported_setting = 2 ;
  optional	 active_popup_learning_available_enable_supported_setting	 active_popup_learning_available_enable_supported_setting = 3 ;
  optional	 active_popup_pilot_available_enable_supported_setting	 active_popup_pilot_available_enable_supported_setting = 4 ;
  optional	 pilot_speed_level_supported_setting	 pilot_speed_level_supported_setting = 5 ;
  optional	 parking_speed_level_supported_setting	 parking_speed_level_supported_setting = 6 ;
  optional	 target_spot_recommend_zone_supported_setting	 target_spot_recommend_zone_supported_setting = 7 ;
}

message  route_entry_location  {

  optional	 float	 latitude = 1 ;
  optional	 float	 longitude = 2 ;
  optional	 float	 altitude = 3 ;
}

message  learned_route  {

  optional	 int32	 route_id = 1 ;
  optional	 string	 route_name = 2 ;
  optional	 string	 route_location_name = 3 ;
  optional	 route_entry_location	 route_entry_location = 4 ;
  optional	 int32	 route_distance = 5 ;
  optional	 float	 estimated_pilot_time = 6 ;
  optional	 parkingDirection	 target_spot_parking_direction = 7 ;
}

message  rampInfo  {

  optional	 int32	 ramp_id = 1 ;
  optional	 int32	 start_point_index = 2 ;
  optional	 int32	 end_point_index = 3 ;
}

message  learned_route_detailed_data  {

  optional	 googleTimeStamp	 timestamp = 1 ;
  optional	 int32	 target_parking_spot_id = 2 ;
  repeated	 parkingSlotPointType	 path = 3 ;
  repeated	 rampInfo	 ramp_info = 4 ;
  repeated	 objectInfo	 stationary_objects = 5 ;
  repeated	 parkingSpotInfo	 parking_spots = 6 ;
}

message  learnedParkingRoute  {

  optional	 learned_route	 learned_route = 1 ;
  optional	 learned_route_detailed_data	 learned_route_detailed_data = 2 ;
}

enum  activationStatus  {

  AS_UNSPECIFIED = 0 ;
  AS_ACTIVE = 1 ;
  AS_NOT_ACTIVE = 2 ;
  AS_UNKNOWN = 3 ;
}

enum  parking_sequence  {

  PS_UNSPECIFIED_INDICATOR = 0 ;
  PS_SPOT_FOUND = 5 ;
  PS_OFF = 1000 ;
  PS_SEARCH_SPEED_WARNING = 21 ;
  PS_SEARCH_DEACTIVATED = 22 ;
  PS_AUTO_PARKING_ACTIVE = 27 ;
  PS_BACKWARD_MOVE = 29 ;
  PS_FORWARD_MOVE = 31 ;
  PS_SHIFTING = 33 ;
  PS_EXIT_PARK_COMPLETE = 37 ;
  PS_DEACTIVATED = 38 ;
  PS_CANCELED_GENERAL = 39 ;
  PS_CANCELED_MOVES = 40 ;
  PS_CANCELED_SPEED = 41 ;
  PS_CANCELED_INTERFERENCE = 42 ;
  PS_STOPPING = 44 ;
  PS_AUTO_PARKING_COMPLETE = 45 ;
  PS_IN_VEHICLE_OR_REMOTE = 47 ;
  PS_REMOTE_STAY_ALERT = 48 ;
  PS_REMOTE_CONNECTING = 49 ;
  PS_REMOTE_CANNOT_CONNECT = 50 ;
  PS_REMOTE_SHIFT_TO_PARK = 52 ;
  PS_REMOTE_CANCELED_RANGE = 54 ;
  PS_REMOTE_CANCELED_SUPERVISION = 55 ;
  PS_REMOTE_CANCELED_CONNECTION = 56 ;
  PS_REMOTE_PAUSED_RANGE = 57 ;
  PS_REMOTE_PAUSED_SUPERVISION = 58 ;
  PS_SEARCH_DRAWER_EXIT = 60 ;
  PS_PAUSE_OBSTRUCTION = 65 ;
  PS_CANCEL_OBSTRUCTION = 66 ;
  PS_SEARCH_ALL_OPTIONS = 71 ;
  PS_ROUTE_LEARNING_READY = 101 ;
  PS_PILOT_READY = 102 ;
  PS_ROUTE_LEARNING_ACTIVE = 103 ;
  PS_PILOT_ACTIVE = 104 ;
  PS_MAP_BUILDING_PROCESSING = 105 ;
  PS_MAP_BUILDING_COMPLETE = 106 ;
  PS_MAP_BUILDING_FAILED = 107 ;
  PS_PILOT_COMPLETE = 108 ;
  PS_TRY_NOW_WAITING_FOR_RETURN_GROUND = 109 ;
  PS_TRY_NOW_WAITING_FOR_RETURN_GARAGE = 110 ;
  PS_TRY_NOW_WAITING_FOR_RETURN_ROUTE = 111 ;
  PS_TRY_NOW_COMPLETE_RETURN_ROUTE = 112 ;
  PS_PILOT_CANCELED = 113 ;
  PS_LEARNING_CANCELED = 114 ;
  PS_PARKING_PAUSED = 115 ;
  PS_PARKING_CANCELED = 116 ;
  PS_ACTIVE_POPUP = 1001 ;
  PS_RESERVED_200 = 200 ;
  PS_RESERVED_201 = 201 ;
  PS_RESERVED_202 = 202 ;
  PS_RESERVED_203 = 203 ;
  PS_RESERVED_204 = 204 ;
  PS_RESERVED_205 = 205 ;
  PS_RESERVED_206 = 206 ;
  PS_RESERVED_207 = 207 ;
  PS_RESERVED_208 = 208 ;
  PS_RESERVED_209 = 209 ;
  PS_RESERVED_210 = 210 ;
  PS_RESERVED_211 = 211 ;
  PS_RESERVED_212 = 212 ;
  PS_RESERVED_213 = 213 ;
  PS_RESERVED_214 = 214 ;
  PS_RESERVED_215 = 215 ;
  PS_RESERVED_216 = 216 ;
  PS_RESERVED_217 = 217 ;
  PS_RESERVED_218 = 218 ;
  PS_RESERVED_219 = 219 ;
  PS_RESERVED_220 = 220 ;
  PS_RESERVED_221 = 221 ;
  PS_RESERVED_222 = 222 ;
  PS_RESERVED_223 = 223 ;
  PS_RESERVED_224 = 224 ;
  PS_RESERVED_225 = 225 ;
  PS_RESERVED_226 = 226 ;
  PS_RESERVED_227 = 227 ;
  PS_RESERVED_228 = 228 ;
  PS_RESERVED_229 = 229 ;
  PS_RESERVED_230 = 230 ;
  PS_RESERVED_231 = 231 ;
  PS_RESERVED_232 = 232 ;
  PS_RESERVED_233 = 233 ;
  PS_RESERVED_234 = 234 ;
  PS_RESERVED_235 = 235 ;
  PS_RESERVED_236 = 236 ;
  PS_RESERVED_237 = 237 ;
  PS_RESERVED_238 = 238 ;
  PS_RESERVED_239 = 239 ;
  PS_RESERVED_240 = 240 ;
  PS_RESERVED_241 = 241 ;
  PS_RESERVED_242 = 242 ;
  PS_RESERVED_243 = 243 ;
  PS_RESERVED_244 = 244 ;
  PS_RESERVED_245 = 245 ;
  PS_RESERVED_246 = 246 ;
  PS_RESERVED_247 = 247 ;
  PS_RESERVED_248 = 248 ;
  PS_RESERVED_249 = 249 ;
  PS_RESERVED_250 = 250 ;
}

enum  driver_notifications  {

  DN_UNSPECIFIED = 0 ;
  DN_SEATBELT_CANCELLATION = 1 ;
  DN_DOOR_AJAR_CANCELLATION = 2 ;
  DN_LAUNCH_PARKING_EXIT_PROMPT = 3 ;
  DN_LAUNCH_PARKING_PROMPT = 4 ;
  DN_CAMERA_UNAVAILABLE = 5 ;
  DN_PARKING_DEFAULT_SELECTION = 6 ;
  DN_TIGHT_SPOT_WARNING = 7 ;
  DN_OFFSET_PARKING = 8 ;
  DN_NOTIFY_SRP_NO_SUBSCRIPTION = 9 ;
  DN_POPUP_ROUTE_LEARNING_AVAILABLE_ACTIVE_NOTIFICATION = 31 ;
  DN_POPUP_CRUISE_AVAILABLE_ACTIVE_NOTIFICATION = 32 ;
  DN_POPUP_RESUME_AVAILABLE_ACTIVE_NOTIFICATION = 33 ;
  DN_POPUP_MAP_BUILDING_COMPLETE = 34 ;
  DN_POPUP_MAP_BUILDING_FAILED = 35 ;
  DN_UNAVAILABLE_DOOR_AJAR = 41 ;
  DN_UNAVAILABLE_HOOD_AJAR = 42 ;
  DN_UNAVAILABLE_TRUNK_AJAR = 43 ;
  DN_UNAVAILABLE_SEAT_BELT_LOOSEN = 44 ;
  DN_UNAVAILABLE_SYSTEM_FAULTY = 45 ;
  DN_UNAVAILABLE_OUTSIDE_UNDERGROUND_GARAGE = 46 ;
  DN_UNAVAILABLE_NOT_IN_D_GEAR = 47 ;
  DN_UNAVAILABLE_IN_RAMP = 48 ;
  DN_UNAVAILABLE_NOT_BRAKE_TO_STOP = 49 ;
  DN_UNAVAILABLE_NO_AVAILABLE_SPOT = 50 ;
  DN_UNAVAILABLE_OUT_OF_LEARNING_ROUTE = 51 ;
  DN_UNAVAILABLE_LPNP_FUNCTION_SETTING_OFF = 52 ;
  DN_UNAVAILABLE_AEB_FUNCTION_SETTING_OFF = 53 ;
  DN_UNAVAILABLE_EMERGENCY_BRAKING_ACTIVE = 54 ;
  DN_UNAVAILABLE_LEARNING_DISTANCE_TOO_SHORT = 55 ;
  DN_UNAVAILABLE_OTHER_ADAS_FEATURE_ACTIVE = 56 ;
  DN_UNAVAILABLE_SPEED_EXCEED_LIMITATION = 57 ;
  DN_UNAVAILABLE_MAP_CHECK_FAILED = 58 ;
  DN_UNAVAILABLE_DISTANCE_TOO_LONG_BEFORE_LEARNING = 59 ;
  DN_UNAVAILABLE_LEARNED_MAP_QUANTITY_REACH_LIMITATION = 60 ;
  DN_UNAVAILABLE_ROUTE_REPEAT_BEFORE_LEARNING = 61 ;
  DN_UNAVAILABLE_SPEED_TOO_HIGH = 62 ;
  DN_UNAVAILABLE_CRUISE_ALREADY_COMPLETED = 63 ;
  DN_UNAVAILABLE_COMPLETE_STUDY_WITHOUT_BRAKE_TO_STOP = 64 ;
  DN_UNAVAILABLE_COMPLETE_LEARNING_TOO_SHORT_DISTANCE = 65 ;
  DN_UNAVAILABLE_LIDAR = 66 ;
  DN_UNAVAILABLE_OUTSIDE_REAR_MIRROR_FOLD = 67 ;
  DN_FEEDBACK_PLANNING_PATH_FAILED = 70 ;
  DN_FEEDBACK_ACCELERATOR_PEDAL_PRESSED = 71 ;
  DN_FEEDBACK_RELEASE_THE_BRAKES = 72 ;
  DN_FEEDBACK_LEARNING_BRAKE_TO_STOP = 73 ;
  DN_FEEDBACK_SPEED_TOO_HIGH_WARNING = 74 ;
  DN_INFO_AVOIDING_OBSTACLES = 80 ;
  DN_INFO_AVOIDING_PEDESTRIANS = 81 ;
  DN_INFO_CROSSING_INTERSECTION = 82 ;
  DN_INFO_GO_AROUND_AHEAD_VEHICLE = 83 ;
  DN_INFO_IN_RAMP = 84 ;
  DN_INFO_ENTER_RAMP = 85 ;
  DN_INFO_LEAVE_RAMP = 86 ;
  DN_INFO_SPEED_BUMP = 87 ;
  DN_INFO_TURN_LEFT = 88 ;
  DN_INFO_TURN_RIGHT = 89 ;
  DN_INFO_WAIT_FOR_AHEAD_VEHICLE = 90 ;
  DN_INFO_SLOW_DOWN_FOR_BLIND_ZONE = 91 ;
  DN_INFO_TIGHT_SPOT_SUGGEST_REMOTE_PARK = 101 ;
  DN_INFO_WILL_EXCEED_LEARNING_DISTANCE_IN_100M = 102 ;
  DN_INFO_WILL_EXCEEDS_LEARNING_DISTANCE = 103 ;
  DN_INFO_KEEP_DRIVING_TO_ROUTE_START_POINT = 104 ;
  DN_INFO_CRUISE_READY_TO_START = 105 ;
  DN_INFO_ARRIVING_TARGET_SPOT = 106 ;
  DN_INFO_DN_ARS_DISABLING = 107 ;
  DN_INFO_RESUME_MOVE_AFTER_WAITING = 108 ;
  DN_INFO_REVERSE_MOVE_AVOIDING_OBSTACLE = 109 ;
  DN_INFO_PASSING_GARAGE_BARRIER_GATE = 110 ;
  DN_PAUSED_PARKING_SUSPENDED = 111 ;
  DN_PAUSED_OBSTRUCTION = 112 ;
  DN_PAUSED_REMOTE_RANGE = 113 ;
  DN_PAUSED_REMOTE_SUPERVISION = 114 ;
  DN_PAUSED_DOOR_AJAR = 115 ;
  DN_PAUSED_HOOD_AJAR = 116 ;
  DN_PAUSED_TRUNK_AJAR = 117 ;
  DN_PAUSED_SEAT_BELT_LOOSEN = 118 ;
  DN_CANCELED_BACKWARD_TOO_LONG = 121 ;
  DN_CANCELED_LEARNING_DISTANCE_TOO_LONG = 122 ;
  DN_CANCELED_EXCEED_SLOPE_LIMITATION = 123 ;
  DN_CANCELED_ROUTE_REPEAT = 124 ;
  DN_CANCELED_MAP_BUILD_FAILED = 125 ;
  DN_CANCELED_PARKING_FAILED = 126 ;
  DN_CANCELED_EXCEED_MOVING_TIMES_LIMITATION = 127 ;
  DN_CANCELED_REMOTE_RANGE = 128 ;
  DN_CANCELED_REMOTE_SUPERVISION = 129 ;
  DN_CANCELED_USER_INTERVENE = 130 ;
  DN_CANCELED_STATISTIC_OBSTACLE_30S = 131 ;
  DN_CANCELED_TARGET_SPOT_OCCUPIED = 132 ;
  DN_CANCELED_DOOR_AJAR = 133 ;
  DN_CANCELED_HOOD_AJAR = 134 ;
  DN_CANCELED_TRUNK_AJAR = 135 ;
  DN_CANCELED_SEAT_BELT_LOOSEN = 136 ;
  DN_CANCELED_SPEED_EXCEED = 137 ;
  DN_CANCELED_SYSTEM_FAULTY = 138 ;
  DN_CANCELED_LEARNING_TIME_TOO_LONG = 139 ;
  DN_CANCELED_NO_ENOUGH_STORAGE = 140 ;
  DN_CANCELED_NO_SPOT_FOUND_IN_MAP = 141 ;
  DN_CANCELED_REMOTE_CONNECTION = 142 ;
  DN_CANCELED_OUTSIDE_REAR_MIRROR_FOLD = 143 ;
  DN_CANCELED_INACTIVITY_TIME_EXCEED_LIMITATION = 144 ;
  DN_CANCELED_LEARNING_STATIONARY_TIME_EXCEED_LIMITATION = 145 ;
  DN_RESERVED_200 = 200 ;
  DN_RESERVED_201 = 201 ;
  DN_RESERVED_202 = 202 ;
  DN_RESERVED_203 = 203 ;
  DN_RESERVED_204 = 204 ;
  DN_RESERVED_205 = 205 ;
  DN_RESERVED_206 = 206 ;
  DN_RESERVED_207 = 207 ;
  DN_RESERVED_208 = 208 ;
  DN_RESERVED_209 = 209 ;
  DN_RESERVED_210 = 210 ;
  DN_RESERVED_211 = 211 ;
  DN_RESERVED_212 = 212 ;
  DN_RESERVED_213 = 213 ;
  DN_RESERVED_214 = 214 ;
  DN_RESERVED_215 = 215 ;
  DN_RESERVED_216 = 216 ;
  DN_RESERVED_217 = 217 ;
  DN_RESERVED_218 = 218 ;
  DN_RESERVED_219 = 219 ;
  DN_RESERVED_220 = 220 ;
  DN_RESERVED_221 = 221 ;
  DN_RESERVED_222 = 222 ;
  DN_RESERVED_223 = 223 ;
  DN_RESERVED_224 = 224 ;
  DN_RESERVED_225 = 225 ;
  DN_RESERVED_226 = 226 ;
  DN_RESERVED_227 = 227 ;
  DN_RESERVED_228 = 228 ;
  DN_RESERVED_229 = 229 ;
  DN_RESERVED_230 = 230 ;
  DN_RESERVED_231 = 231 ;
  DN_RESERVED_232 = 232 ;
  DN_RESERVED_233 = 233 ;
  DN_RESERVED_234 = 234 ;
  DN_RESERVED_235 = 235 ;
  DN_RESERVED_236 = 236 ;
  DN_RESERVED_237 = 237 ;
  DN_RESERVED_238 = 238 ;
  DN_RESERVED_239 = 239 ;
  DN_RESERVED_240 = 240 ;
  DN_RESERVED_241 = 241 ;
  DN_RESERVED_242 = 242 ;
  DN_RESERVED_243 = 243 ;
  DN_RESERVED_244 = 244 ;
  DN_RESERVED_245 = 245 ;
  DN_RESERVED_246 = 246 ;
  DN_RESERVED_247 = 247 ;
  DN_RESERVED_248 = 248 ;
  DN_RESERVED_249 = 249 ;
  DN_RESERVED_250 = 250 ;
}

message  dynamicDrivingInformationType  {

  optional	 int32	 route_learning_distance = 1 ;
  optional	 int32	 pilot_remain_distance = 2 ;
  optional	 int32	 passed_speed_bumper_quantity = 3 ;
  optional	 int32	 passed_ramp_quantity = 4 ;
  optional	 int32	 avoid_pedestrian_quantity = 5 ;
  optional	 int32	 avoid_vehicle_quantity = 6 ;
  optional	 int32	 route_learning_last_rear_distance = 7 ;
  optional	 int32	 parking_path_leg_last_quantity = 8 ;
  optional	 int32	 pilot_on_garage_floor = 9 ;
  optional	 bool	 is_pilot_in_ramp = 10 ;
}

enum  prelaunch_message  {

  PLM_UNSPECIFIED = 0 ;
  PLM_NOTIFY_OTHER_ADAS_ACTIVE = 1 ;
  PLM_NOTIFY_SLOWDOWN = 2 ;
}


//**********************
//Interface ID: 67 iUUIDMessage
//**********************

//Property 6701 UUIDMessageContent
//--------------------------------------
message  UUIDMessageContent_status  {

  optional	 string	 UUID = 1 ;
  optional	 subscribeStatus	 SubscribeStatus = 2 ;
}

enum  subscribeStatus  {

  Unknown = 0 ;
  Subscribed = 1 ;
  Unsubscribed = 2 ;
  Fault = 3 ;
  Reserved_1 = 4 ;
  Reserved_2 = 5 ;
  Reserved_3 = 6 ;
  Reserved_4 = 7 ;
}

